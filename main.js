<script type="text/javascript">
//crypto-sha256-hmac.js
/*
 * Crypto-JS v2.5.4
 * http://code.google.com/p/crypto-js/
 * (c) 2009-2012 by Jeff Mott. All rights reserved.
 * http://code.google.com/p/crypto-js/wiki/License
 */

function ascii_to_hexa(str) {
  var arr1 = [];
  for (var n = 0, l = str.length; n < l; n++) {
    var hex = Number(str.charCodeAt(n)).toString(16);
    arr1.push(hex);
  }
  return arr1.join("");
}

//ripemd160.js
/*
  CryptoJS v3.1.2
  code.google.com/p/crypto-js
  (c) 2009-2013 by Jeff Mott. All rights reserved.
  code.google.com/p/crypto-js/wiki/License
  */
/** @preserve
  (c) 2012 by Cï¿½dric Mesnil. All rights reserved.
  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
      - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
      - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */

// Constants table
var zl = [
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  7,
  4,
  13,
  1,
  10,
  6,
  15,
  3,
  12,
  0,
  9,
  5,
  2,
  14,
  11,
  8,
  3,
  10,
  14,
  4,
  9,
  15,
  8,
  1,
  2,
  7,
  0,
  6,
  13,
  11,
  5,
  12,
  1,
  9,
  11,
  10,
  0,
  8,
  12,
  4,
  13,
  3,
  7,
  15,
  14,
  5,
  6,
  2,
  4,
  0,
  5,
  9,
  7,
  12,
  2,
  10,
  14,
  1,
  3,
  8,
  11,
  6,
  15,
  13
];
var zr = [
  5,
  14,
  7,
  0,
  9,
  2,
  11,
  4,
  13,
  6,
  15,
  8,
  1,
  10,
  3,
  12,
  6,
  11,
  3,
  7,
  0,
  13,
  5,
  10,
  14,
  15,
  8,
  12,
  4,
  9,
  1,
  2,
  15,
  5,
  1,
  3,
  7,
  14,
  6,
  9,
  11,
  8,
  12,
  2,
  10,
  0,
  4,
  13,
  8,
  6,
  4,
  1,
  3,
  11,
  15,
  0,
  5,
  12,
  2,
  13,
  9,
  7,
  10,
  14,
  12,
  15,
  10,
  4,
  1,
  5,
  8,
  7,
  6,
  2,
  13,
  14,
  0,
  3,
  9,
  11
];
var sl = [
  11,
  14,
  15,
  12,
  5,
  8,
  7,
  9,
  11,
  13,
  14,
  15,
  6,
  7,
  9,
  8,
  7,
  6,
  8,
  13,
  11,
  9,
  7,
  15,
  7,
  12,
  15,
  9,
  11,
  7,
  13,
  12,
  11,
  13,
  6,
  7,
  14,
  9,
  13,
  15,
  14,
  8,
  13,
  6,
  5,
  12,
  7,
  5,
  11,
  12,
  14,
  15,
  14,
  15,
  9,
  8,
  9,
  14,
  5,
  6,
  8,
  6,
  5,
  12,
  9,
  15,
  5,
  11,
  6,
  8,
  13,
  12,
  5,
  12,
  13,
  14,
  11,
  8,
  5,
  6
];
var sr = [
  8,
  9,
  9,
  11,
  13,
  15,
  15,
  5,
  7,
  7,
  8,
  11,
  14,
  14,
  12,
  6,
  9,
  13,
  15,
  7,
  12,
  8,
  9,
  11,
  7,
  7,
  12,
  7,
  6,
  15,
  13,
  11,
  9,
  7,
  15,
  11,
  8,
  6,
  6,
  14,
  12,
  13,
  5,
  14,
  13,
  13,
  7,
  5,
  15,
  5,
  8,
  11,
  14,
  14,
  6,
  14,
  6,
  9,
  12,
  9,
  12,
  5,
  15,
  8,
  8,
  5,
  12,
  9,
  12,
  5,
  14,
  6,
  8,
  13,
  6,
  5,
  15,
  13,
  11,
  11
];

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];

var bytesToWords = function(bytes) {
  var words = [];
  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
    words[b >>> 5] |= bytes[i] << (24 - (b % 32));
  }
  return words;
};

var wordsToBytes = function(words) {
  var bytes = [];
  for (var b = 0; b < words.length * 32; b += 8) {
    bytes.push((words[b >>> 5] >>> (24 - (b % 32))) & 0xff);
  }
  return bytes;
};

var processBlock = function(H, M, offset) {
  // Swap endian
  for (var i = 0; i < 16; i++) {
    var offset_i = offset + i;
    var M_offset_i = M[offset_i];

    // Swap
    M[offset_i] =
      (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
      (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00);
  }

  // Working variables
  var al, bl, cl, dl, el;
  var ar, br, cr, dr, er;

  ar = al = H[0];
  br = bl = H[1];
  cr = cl = H[2];
  dr = dl = H[3];
  er = el = H[4];
  // Computation
  var t;
  for (var i = 0; i < 80; i += 1) {
    t = (al + M[offset + zl[i]]) | 0;
    if (i < 16) {
      t += f1(bl, cl, dl) + hl[0];
    } else if (i < 32) {
      t += f2(bl, cl, dl) + hl[1];
    } else if (i < 48) {
      t += f3(bl, cl, dl) + hl[2];
    } else if (i < 64) {
      t += f4(bl, cl, dl) + hl[3];
    } else {
      // if (i<80) {
      t += f5(bl, cl, dl) + hl[4];
    }
    t = t | 0;
    t = rotl(t, sl[i]);
    t = (t + el) | 0;
    al = el;
    el = dl;
    dl = rotl(cl, 10);
    cl = bl;
    bl = t;

    t = (ar + M[offset + zr[i]]) | 0;
    if (i < 16) {
      t += f5(br, cr, dr) + hr[0];
    } else if (i < 32) {
      t += f4(br, cr, dr) + hr[1];
    } else if (i < 48) {
      t += f3(br, cr, dr) + hr[2];
    } else if (i < 64) {
      t += f2(br, cr, dr) + hr[3];
    } else {
      // if (i<80) {
      t += f1(br, cr, dr) + hr[4];
    }
    t = t | 0;
    t = rotl(t, sr[i]);
    t = (t + er) | 0;
    ar = er;
    er = dr;
    dr = rotl(cr, 10);
    cr = br;
    br = t;
  }
  // Intermediate hash value
  t = (H[1] + cl + dr) | 0;
  H[1] = (H[2] + dl + er) | 0;
  H[2] = (H[3] + el + ar) | 0;
  H[3] = (H[4] + al + br) | 0;
  H[4] = (H[0] + bl + cr) | 0;
  H[0] = t;
};

function f1(x, y, z) {
  return x ^ y ^ z;
}

function f2(x, y, z) {
  return (x & y) | (~x & z);
}

function f3(x, y, z) {
  return (x | ~y) ^ z;
}

function f4(x, y, z) {
  return (x & z) | (y & ~z);
}

function f5(x, y, z) {
  return x ^ (y | ~z);
}

function rotl(x, n) {
  return (x << n) | (x >>> (32 - n));
}

function ripemd160(message) {
  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  var m = bytesToWords(message);

  var nBitsLeft = message.length * 8;
  var nBitsTotal = message.length * 8;

  // Add padding
  m[nBitsLeft >>> 5] |= 0x80 << (24 - (nBitsLeft % 32));
  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] =
    (((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |
    (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00);

  for (var i = 0; i < m.length; i += 16) {
    processBlock(H, m, i);
  }

  // Swap endian
  for (var i = 0; i < 5; i++) {
    // Shortcut
    var H_i = H[i];

    // Swap
    H[i] =
      (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
      (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00);
  }

  var digestbytes = wordsToBytes(H);
  return digestbytes;
}
</script>

<script type="text/javascript">
/*!
 * Crypto-JS v2.5.4 Crypto.js
 * http://code.google.com/p/crypto-js/
 * Copyright (c) 2009-2013, Jeff Mott. All rights reserved.
 * http://code.google.com/p/crypto-js/wiki/License
 */
if (typeof Crypto == "undefined" || !Crypto.util) {
  (function() {
    var base64map =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

    // Global Crypto object
    var Crypto = (window.Crypto = {});

    // Crypto utilities
    var util = (Crypto.util = {
      // Bit-wise rotate left
      rotl: function(n, b) {
        return (n << b) | (n >>> (32 - b));
      },

      // Bit-wise rotate right
      rotr: function(n, b) {
        return (n << (32 - b)) | (n >>> b);
      },

      // Swap big-endian to little-endian and vice versa
      endian: function(n) {
        // If number given, swap endian
        if (n.constructor == Number) {
          return (
            (util.rotl(n, 8) & 0x00ff00ff) |
            (util.rotl(n, 24) & 0xff00ff00)
          );
        }

        // Else, assume array and swap all items
        for (var i = 0; i < n.length; i++) n[i] = util.endian(n[i]);
        return n;
      },

      // Generate an array of any length of random bytes
      randomBytes: function(n) {
        for (var bytes = []; n > 0; n--)
          bytes.push(Math.floor(Math.random() * 256));
        return bytes;
      },

      // Convert a byte array to big-endian 32-bit words
      bytesToWords: function(bytes) {
        for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
          words[b >>> 5] |= (bytes[i] & 0xff) << (24 - (b % 32));
        return words;
      },

      // Convert big-endian 32-bit words to a byte array
      wordsToBytes: function(words) {
        for (var bytes = [], b = 0; b < words.length * 32; b += 8)
          bytes.push((words[b >>> 5] >>> (24 - (b % 32))) & 0xff);
        return bytes;
      },

      // Convert a byte array to a hex string
      bytesToHex: function(bytes) {
        for (var hex = [], i = 0; i < bytes.length; i++) {
          hex.push((bytes[i] >>> 4).toString(16));
          hex.push((bytes[i] & 0xf).toString(16));
        }
        return hex.join("");
      },

      // Convert a hex string to a byte array
      hexToBytes: function(hex) {
        for (var bytes = [], c = 0; c < hex.length; c += 2)
          bytes.push(parseInt(hex.substr(c, 2), 16));
        return bytes;
      },

      // Convert a byte array to a base-64 string
      bytesToBase64: function(bytes) {
        for (var base64 = [], i = 0; i < bytes.length; i += 3) {
          var triplet =
            (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
          for (var j = 0; j < 4; j++) {
            if (i * 8 + j * 6 <= bytes.length * 8)
              base64.push(
                base64map.charAt((triplet >>> (6 * (3 - j))) & 0x3f)
              );
            else base64.push("=");
          }
        }

        return base64.join("");
      },

      // Convert a base-64 string to a byte array
      base64ToBytes: function(base64) {
        // Remove non-base-64 characters
        base64 = base64.replace(/[^A-Z0-9+\/]/gi, "");

        for (
          var bytes = [], i = 0, imod4 = 0;
          i < base64.length;
          imod4 = ++i % 4
        ) {
          if (imod4 == 0) continue;
          bytes.push(
            ((base64map.indexOf(base64.charAt(i - 1)) &
              (Math.pow(2, -2 * imod4 + 8) - 1)) <<
              (imod4 * 2)) |
              (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2))
          );
        }

        return bytes;
      }
    });

    // Crypto character encodings
    var charenc = (Crypto.charenc = {});

    // UTF-8 encoding
    var UTF8 = (charenc.UTF8 = {
      // Convert a string to a byte array
      stringToBytes: function(str) {
        return Binary.stringToBytes(unescape(encodeURIComponent(str)));
      },

      // Convert a byte array to a string
      bytesToString: function(bytes) {
        return decodeURIComponent(escape(Binary.bytesToString(bytes)));
      }
    });

    // Binary encoding
    var Binary = (charenc.Binary = {
      // Convert a string to a byte array
      stringToBytes: function(str) {
        for (var bytes = [], i = 0; i < str.length; i++)
          bytes.push(str.charCodeAt(i) & 0xff);
        return bytes;
      },

      // Convert a byte array to a string
      bytesToString: function(bytes) {
        for (var str = [], i = 0; i < bytes.length; i++)
          str.push(String.fromCharCode(bytes[i]));
        return str.join("");
      }
    });
  })();
}
</script>

<!-- SHA1 -->
<script type="text/javascript">
//Adding SHA1 to fix basic PKBDF2
/*
 * Crypto-JS v2.5.4
 * http://code.google.com/p/crypto-js/
 * (c) 2009-2012 by Jeff Mott. All rights reserved.
 * http://code.google.com/p/crypto-js/wiki/License
 */
(function() {
  // Shortcuts
  var C = Crypto,
    util = C.util,
    charenc = C.charenc,
    UTF8 = charenc.UTF8,
    Binary = charenc.Binary;

  // Public API
  var SHA1 = (C.SHA1 = function(message, options) {
    var digestbytes = util.wordsToBytes(SHA1._sha1(message));
    return options && options.asBytes
      ? digestbytes
      : options && options.asString
      ? Binary.bytesToString(digestbytes)
      : util.bytesToHex(digestbytes);
  });

  // The core
  SHA1._sha1 = function(message) {
    // Convert to byte array
    if (message.constructor == String)
      message = UTF8.stringToBytes(message);
    /* else, assume byte array already */

    var m = util.bytesToWords(message),
      l = message.length * 8,
      w = [],
      H0 = 1732584193,
      H1 = -271733879,
      H2 = -1732584194,
      H3 = 271733878,
      H4 = -1009589776;

    // Padding
    m[l >> 5] |= 0x80 << (24 - (l % 32));
    m[(((l + 64) >>> 9) << 4) + 15] = l;

    for (var i = 0; i < m.length; i += 16) {
      var a = H0,
        b = H1,
        c = H2,
        d = H3,
        e = H4;

      for (var j = 0; j < 80; j++) {
        if (j < 16) w[j] = m[i + j];
        else {
          var n = w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16];
          w[j] = (n << 1) | (n >>> 31);
        }

        var t =
          ((H0 << 5) | (H0 >>> 27)) +
          H4 +
          (w[j] >>> 0) +
          (j < 20
            ? ((H1 & H2) | (~H1 & H3)) + 1518500249
            : j < 40
            ? (H1 ^ H2 ^ H3) + 1859775393
            : j < 60
            ? ((H1 & H2) | (H1 & H3) | (H2 & H3)) - 1894007588
            : (H1 ^ H2 ^ H3) - 899497514);

        H4 = H3;
        H3 = H2;
        H2 = (H1 << 30) | (H1 >>> 2);
        H1 = H0;
        H0 = t;
      }

      H0 += a;
      H1 += b;
      H2 += c;
      H3 += d;
      H4 += e;
    }

    return [H0, H1, H2, H3, H4];
  };

  // Package private blocksize
  SHA1._blocksize = 16;

  SHA1._digestsize = 20;
})();
</script>

<!-- HMAC -->
<script type="text/javascript">
//Added to make PKBDF2 work
/*
 * Crypto-JS v2.5.4
 * http://code.google.com/p/crypto-js/
 * (c) 2009-2012 by Jeff Mott. All rights reserved.
 * http://code.google.com/p/crypto-js/wiki/License
 */
(function() {
  // Shortcuts
  var C = Crypto,
    util = C.util,
    charenc = C.charenc,
    UTF8 = charenc.UTF8,
    Binary = charenc.Binary;

  C.HMAC = function(hasher, message, key, options) {
    // Convert to byte arrays
    if (message.constructor == String)
      message = UTF8.stringToBytes(message);
    if (key.constructor == String) key = UTF8.stringToBytes(key);
    /* else, assume byte arrays already */

    // Allow arbitrary length keys
    if (key.length > hasher._blocksize * 4)
      key = hasher(key, {
        asBytes: true
      });

    // XOR keys with pad constants
    var okey = key.slice(0),
      ikey = key.slice(0);
    for (var i = 0; i < hasher._blocksize * 4; i++) {
      okey[i] ^= 0x5c;
      ikey[i] ^= 0x36;
    }

    var hmacbytes = hasher(
      okey.concat(
        hasher(ikey.concat(message), {
          asBytes: true
        })
      ),
      {
        asBytes: true
      }
    );

    return options && options.asBytes
      ? hmacbytes
      : options && options.asString
      ? Binary.bytesToString(hmacbytes)
      : util.bytesToHex(hmacbytes);
  };
})();
</script>

<script type="text/javascript">
/*!
 * Crypto-JS v2.5.4 SHA256.js
 * http://code.google.com/p/crypto-js/
 * Copyright (c) 2009-2013, Jeff Mott. All rights reserved.
 * http://code.google.com/p/crypto-js/wiki/License
 */
(function() {
  // Shortcuts
  var C = Crypto,
    util = C.util,
    charenc = C.charenc,
    UTF8 = charenc.UTF8,
    Binary = charenc.Binary;

  // Constants
  var K = [
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
  ];

  // Public API
  var SHA256 = (C.SHA256 = function(message, options) {
    var digestbytes = util.wordsToBytes(SHA256._sha256(message));
    return options && options.asBytes
      ? digestbytes
      : options && options.asString
      ? Binary.bytesToString(digestbytes)
      : util.bytesToHex(digestbytes);
  });

  // The core
  SHA256._sha256 = function(message) {
    // Convert to byte array
    if (message.constructor == String)
      message = UTF8.stringToBytes(message);
    /* else, assume byte array already */

    var m = util.bytesToWords(message),
      l = message.length * 8,
      H = [
        0x6a09e667,
        0xbb67ae85,
        0x3c6ef372,
        0xa54ff53a,
        0x510e527f,
        0x9b05688c,
        0x1f83d9ab,
        0x5be0cd19
      ],
      w = [],
      a,
      b,
      c,
      d,
      e,
      f,
      g,
      h,
      i,
      j,
      t1,
      t2;

    // Padding
    m[l >> 5] |= 0x80 << (24 - (l % 32));
    m[(((l + 64) >> 9) << 4) + 15] = l;

    for (var i = 0; i < m.length; i += 16) {
      a = H[0];
      b = H[1];
      c = H[2];
      d = H[3];
      e = H[4];
      f = H[5];
      g = H[6];
      h = H[7];

      for (var j = 0; j < 64; j++) {
        if (j < 16) w[j] = m[j + i];
        else {
          var gamma0x = w[j - 15],
            gamma1x = w[j - 2],
            gamma0 =
              ((gamma0x << 25) | (gamma0x >>> 7)) ^
              ((gamma0x << 14) | (gamma0x >>> 18)) ^
              (gamma0x >>> 3),
            gamma1 =
              ((gamma1x << 15) | (gamma1x >>> 17)) ^
              ((gamma1x << 13) | (gamma1x >>> 19)) ^
              (gamma1x >>> 10);

          w[j] = gamma0 + (w[j - 7] >>> 0) + gamma1 + (w[j - 16] >>> 0);
        }

        var ch = (e & f) ^ (~e & g),
          maj = (a & b) ^ (a & c) ^ (b & c),
          sigma0 =
            ((a << 30) | (a >>> 2)) ^
            ((a << 19) | (a >>> 13)) ^
            ((a << 10) | (a >>> 22)),
          sigma1 =
            ((e << 26) | (e >>> 6)) ^
            ((e << 21) | (e >>> 11)) ^
            ((e << 7) | (e >>> 25));

        t1 = (h >>> 0) + sigma1 + ch + K[j] + (w[j] >>> 0);
        t2 = sigma0 + maj;

        h = g;
        g = f;
        f = e;
        e = (d + t1) >>> 0;
        d = c;
        c = b;
        b = a;
        a = (t1 + t2) >>> 0;
      }

      H[0] += a;
      H[1] += b;
      H[2] += c;
      H[3] += d;
      H[4] += e;
      H[5] += f;
      H[6] += g;
      H[7] += h;
    }

    return H;
  };

  // Package private blocksize
  SHA256._blocksize = 16;

  SHA256._digestsize = 32;
})();
</script>
<script type="text/javascript">
/*!
 * Crypto-JS v2.5.4 PBKDF2.js
 * http://code.google.com/p/crypto-js/
 * Copyright (c) 2009-2013, Jeff Mott. All rights reserved.
 * http://code.google.com/p/crypto-js/wiki/License
 */
(function() {
  // Shortcuts
  var C = Crypto,
    util = C.util,
    charenc = C.charenc,
    UTF8 = charenc.UTF8,
    Binary = charenc.Binary;

  C.PBKDF2 = function(password, salt, keylen, options) {
    // Convert to byte arrays
    if (password.constructor == String)
      password = UTF8.stringToBytes(password);
    if (salt.constructor == String) salt = UTF8.stringToBytes(salt);
    /* else, assume byte arrays already */

    // Defaults
    var hasher = (options && options.hasher) || C.SHA1,
      iterations = (options && options.iterations) || 1;

    // Pseudo-random function
    function PRF(password, salt) {
      return C.HMAC(hasher, salt, password, {
        asBytes: true
      });
    }

    // Generate key
    var derivedKeyBytes = [],
      blockindex = 1;
    while (derivedKeyBytes.length < keylen) {
      var block = PRF(
        password,
        salt.concat(util.wordsToBytes([blockindex]))
      );
      for (var u = block, i = 1; i < iterations; i++) {
        u = PRF(password, u);
        for (var j = 0; j < block.length; j++) block[j] ^= u[j];
      }
      derivedKeyBytes = derivedKeyBytes.concat(block);
      blockindex++;
    }

    // Truncate excess bytes
    derivedKeyBytes.length = keylen;

    return options && options.asBytes
      ? derivedKeyBytes
      : options && options.asString
      ? Binary.bytesToString(derivedKeyBytes)
      : util.bytesToHex(derivedKeyBytes);
  };
})();
</script>
<script type="text/javascript">
/*!
 * Crypto-JS v2.5.4 HMAC.js
 * http://code.google.com/p/crypto-js/
 * Copyright (c) 2009-2013, Jeff Mott. All rights reserved.
 * http://code.google.com/p/crypto-js/wiki/License
 */
(function() {
  // Shortcuts
  var C = Crypto,
    util = C.util,
    charenc = C.charenc,
    UTF8 = charenc.UTF8,
    Binary = charenc.Binary;

  C.HMAC = function(hasher, message, key, options) {
    // Convert to byte arrays
    if (message.constructor == String)
      message = UTF8.stringToBytes(message);
    if (key.constructor == String) key = UTF8.stringToBytes(key);
    /* else, assume byte arrays already */

    // Allow arbitrary length keys
    if (key.length > hasher._blocksize * 4)
      key = hasher(key, {
        asBytes: true
      });

    // XOR keys with pad constants
    var okey = key.slice(0),
      ikey = key.slice(0);
    for (var i = 0; i < hasher._blocksize * 4; i++) {
      okey[i] ^= 0x5c;
      ikey[i] ^= 0x36;
    }

    var hmacbytes = hasher(
      okey.concat(
        hasher(ikey.concat(message), {
          asBytes: true
        })
      ),
      {
        asBytes: true
      }
    );

    return options && options.asBytes
      ? hmacbytes
      : options && options.asString
      ? Binary.bytesToString(hmacbytes)
      : util.bytesToHex(hmacbytes);
  };
})();
</script>
<script type="text/javascript">
/*!
 * Crypto-JS v2.5.4 AES.js
 * http://code.google.com/p/crypto-js/
 * Copyright (c) 2009-2013, Jeff Mott. All rights reserved.
 * http://code.google.com/p/crypto-js/wiki/License
 */
(function() {
  // Shortcuts
  var C = Crypto,
    util = C.util,
    charenc = C.charenc,
    UTF8 = charenc.UTF8;

  // Precomputed SBOX
  var SBOX = [
    0x63,
    0x7c,
    0x77,
    0x7b,
    0xf2,
    0x6b,
    0x6f,
    0xc5,
    0x30,
    0x01,
    0x67,
    0x2b,
    0xfe,
    0xd7,
    0xab,
    0x76,
    0xca,
    0x82,
    0xc9,
    0x7d,
    0xfa,
    0x59,
    0x47,
    0xf0,
    0xad,
    0xd4,
    0xa2,
    0xaf,
    0x9c,
    0xa4,
    0x72,
    0xc0,
    0xb7,
    0xfd,
    0x93,
    0x26,
    0x36,
    0x3f,
    0xf7,
    0xcc,
    0x34,
    0xa5,
    0xe5,
    0xf1,
    0x71,
    0xd8,
    0x31,
    0x15,
    0x04,
    0xc7,
    0x23,
    0xc3,
    0x18,
    0x96,
    0x05,
    0x9a,
    0x07,
    0x12,
    0x80,
    0xe2,
    0xeb,
    0x27,
    0xb2,
    0x75,
    0x09,
    0x83,
    0x2c,
    0x1a,
    0x1b,
    0x6e,
    0x5a,
    0xa0,
    0x52,
    0x3b,
    0xd6,
    0xb3,
    0x29,
    0xe3,
    0x2f,
    0x84,
    0x53,
    0xd1,
    0x00,
    0xed,
    0x20,
    0xfc,
    0xb1,
    0x5b,
    0x6a,
    0xcb,
    0xbe,
    0x39,
    0x4a,
    0x4c,
    0x58,
    0xcf,
    0xd0,
    0xef,
    0xaa,
    0xfb,
    0x43,
    0x4d,
    0x33,
    0x85,
    0x45,
    0xf9,
    0x02,
    0x7f,
    0x50,
    0x3c,
    0x9f,
    0xa8,
    0x51,
    0xa3,
    0x40,
    0x8f,
    0x92,
    0x9d,
    0x38,
    0xf5,
    0xbc,
    0xb6,
    0xda,
    0x21,
    0x10,
    0xff,
    0xf3,
    0xd2,
    0xcd,
    0x0c,
    0x13,
    0xec,
    0x5f,
    0x97,
    0x44,
    0x17,
    0xc4,
    0xa7,
    0x7e,
    0x3d,
    0x64,
    0x5d,
    0x19,
    0x73,
    0x60,
    0x81,
    0x4f,
    0xdc,
    0x22,
    0x2a,
    0x90,
    0x88,
    0x46,
    0xee,
    0xb8,
    0x14,
    0xde,
    0x5e,
    0x0b,
    0xdb,
    0xe0,
    0x32,
    0x3a,
    0x0a,
    0x49,
    0x06,
    0x24,
    0x5c,
    0xc2,
    0xd3,
    0xac,
    0x62,
    0x91,
    0x95,
    0xe4,
    0x79,
    0xe7,
    0xc8,
    0x37,
    0x6d,
    0x8d,
    0xd5,
    0x4e,
    0xa9,
    0x6c,
    0x56,
    0xf4,
    0xea,
    0x65,
    0x7a,
    0xae,
    0x08,
    0xba,
    0x78,
    0x25,
    0x2e,
    0x1c,
    0xa6,
    0xb4,
    0xc6,
    0xe8,
    0xdd,
    0x74,
    0x1f,
    0x4b,
    0xbd,
    0x8b,
    0x8a,
    0x70,
    0x3e,
    0xb5,
    0x66,
    0x48,
    0x03,
    0xf6,
    0x0e,
    0x61,
    0x35,
    0x57,
    0xb9,
    0x86,
    0xc1,
    0x1d,
    0x9e,
    0xe1,
    0xf8,
    0x98,
    0x11,
    0x69,
    0xd9,
    0x8e,
    0x94,
    0x9b,
    0x1e,
    0x87,
    0xe9,
    0xce,
    0x55,
    0x28,
    0xdf,
    0x8c,
    0xa1,
    0x89,
    0x0d,
    0xbf,
    0xe6,
    0x42,
    0x68,
    0x41,
    0x99,
    0x2d,
    0x0f,
    0xb0,
    0x54,
    0xbb,
    0x16
  ];

  // Compute inverse SBOX lookup table
  for (var INVSBOX = [], i = 0; i < 256; i++) INVSBOX[SBOX[i]] = i;

  // Compute multiplication in GF(2^8) lookup tables
  var MULT2 = [],
    MULT3 = [],
    MULT9 = [],
    MULTB = [],
    MULTD = [],
    MULTE = [];

  function xtime(a, b) {
    for (var result = 0, i = 0; i < 8; i++) {
      if (b & 1) result ^= a;
      var hiBitSet = a & 0x80;
      a = (a << 1) & 0xff;
      if (hiBitSet) a ^= 0x1b;
      b >>>= 1;
    }
    return result;
  }

  for (var i = 0; i < 256; i++) {
    MULT2[i] = xtime(i, 2);
    MULT3[i] = xtime(i, 3);
    MULT9[i] = xtime(i, 9);
    MULTB[i] = xtime(i, 0xb);
    MULTD[i] = xtime(i, 0xd);
    MULTE[i] = xtime(i, 0xe);
  }

  // Precomputed RCon lookup
  var RCON = [
    0x00,
    0x01,
    0x02,
    0x04,
    0x08,
    0x10,
    0x20,
    0x40,
    0x80,
    0x1b,
    0x36
  ];

  // Inner state
  var state = [[], [], [], []],
    keylength,
    nrounds,
    keyschedule;

  var AES = (C.AES = {
    /**
     * Public API
     */

    encrypt: function(message, password, options) {
      options = options || {};

      // Determine mode
      var mode = options.mode || new C.mode.OFB();

      // Allow mode to override options
      if (mode.fixOptions) mode.fixOptions(options);

      var // Convert to bytes if message is a string
        m =
          message.constructor == String
            ? UTF8.stringToBytes(message)
            : message,
        // Generate random IV
        iv = options.iv || util.randomBytes(AES._blocksize * 4),
        // Generate key
        k =
          password.constructor == String
            ? // Derive key from pass-phrase
              C.PBKDF2(password, iv, 32, {
                asBytes: true
              })
            : // else, assume byte array representing cryptographic key
              password;

      // Encrypt
      AES._init(k);
      mode.encrypt(AES, m, iv);

      // Return ciphertext
      m = options.iv ? m : iv.concat(m);
      return options && options.asBytes ? m : util.bytesToBase64(m);
    },

    decrypt: function(ciphertext, password, options) {
      options = options || {};

      // Determine mode
      var mode = options.mode || new C.mode.OFB();

      // Allow mode to override options
      if (mode.fixOptions) mode.fixOptions(options);

      var // Convert to bytes if ciphertext is a string
        c =
          ciphertext.constructor == String
            ? util.base64ToBytes(ciphertext)
            : ciphertext,
        // Separate IV and message
        iv = options.iv || c.splice(0, AES._blocksize * 4),
        // Generate key
        k =
          password.constructor == String
            ? // Derive key from pass-phrase
              C.PBKDF2(password, iv, 32, {
                asBytes: true
              })
            : // else, assume byte array representing cryptographic key
              password;

      // Decrypt
      AES._init(k);
      mode.decrypt(AES, c, iv);

      // Return plaintext
      return options && options.asBytes ? c : UTF8.bytesToString(c);
    },

    /**
     * Package private methods and properties
     */

    _blocksize: 4,

    _encryptblock: function(m, offset) {
      // Set input
      for (var row = 0; row < AES._blocksize; row++) {
        for (var col = 0; col < 4; col++)
          state[row][col] = m[offset + col * 4 + row];
      }

      // Add round key
      for (var row = 0; row < 4; row++) {
        for (var col = 0; col < 4; col++)
          state[row][col] ^= keyschedule[col][row];
      }

      for (var round = 1; round < nrounds; round++) {
        // Sub bytes
        for (var row = 0; row < 4; row++) {
          for (var col = 0; col < 4; col++)
            state[row][col] = SBOX[state[row][col]];
        }

        // Shift rows
        state[1].push(state[1].shift());
        state[2].push(state[2].shift());
        state[2].push(state[2].shift());
        state[3].unshift(state[3].pop());

        // Mix columns
        for (var col = 0; col < 4; col++) {
          var s0 = state[0][col],
            s1 = state[1][col],
            s2 = state[2][col],
            s3 = state[3][col];

          state[0][col] = MULT2[s0] ^ MULT3[s1] ^ s2 ^ s3;
          state[1][col] = s0 ^ MULT2[s1] ^ MULT3[s2] ^ s3;
          state[2][col] = s0 ^ s1 ^ MULT2[s2] ^ MULT3[s3];
          state[3][col] = MULT3[s0] ^ s1 ^ s2 ^ MULT2[s3];
        }

        // Add round key
        for (var row = 0; row < 4; row++) {
          for (var col = 0; col < 4; col++)
            state[row][col] ^= keyschedule[round * 4 + col][row];
        }
      }

      // Sub bytes
      for (var row = 0; row < 4; row++) {
        for (var col = 0; col < 4; col++)
          state[row][col] = SBOX[state[row][col]];
      }

      // Shift rows
      state[1].push(state[1].shift());
      state[2].push(state[2].shift());
      state[2].push(state[2].shift());
      state[3].unshift(state[3].pop());

      // Add round key
      for (var row = 0; row < 4; row++) {
        for (var col = 0; col < 4; col++)
          state[row][col] ^= keyschedule[nrounds * 4 + col][row];
      }

      // Set output
      for (var row = 0; row < AES._blocksize; row++) {
        for (var col = 0; col < 4; col++)
          m[offset + col * 4 + row] = state[row][col];
      }
    },

    _decryptblock: function(c, offset) {
      // Set input
      for (var row = 0; row < AES._blocksize; row++) {
        for (var col = 0; col < 4; col++)
          state[row][col] = c[offset + col * 4 + row];
      }

      // Add round key
      for (var row = 0; row < 4; row++) {
        for (var col = 0; col < 4; col++)
          state[row][col] ^= keyschedule[nrounds * 4 + col][row];
      }

      for (var round = 1; round < nrounds; round++) {
        // Inv shift rows
        state[1].unshift(state[1].pop());
        state[2].push(state[2].shift());
        state[2].push(state[2].shift());
        state[3].push(state[3].shift());

        // Inv sub bytes
        for (var row = 0; row < 4; row++) {
          for (var col = 0; col < 4; col++)
            state[row][col] = INVSBOX[state[row][col]];
        }

        // Add round key
        for (var row = 0; row < 4; row++) {
          for (var col = 0; col < 4; col++)
            state[row][col] ^=
              keyschedule[(nrounds - round) * 4 + col][row];
        }

        // Inv mix columns
        for (var col = 0; col < 4; col++) {
          var s0 = state[0][col],
            s1 = state[1][col],
            s2 = state[2][col],
            s3 = state[3][col];

          state[0][col] = MULTE[s0] ^ MULTB[s1] ^ MULTD[s2] ^ MULT9[s3];
          state[1][col] = MULT9[s0] ^ MULTE[s1] ^ MULTB[s2] ^ MULTD[s3];
          state[2][col] = MULTD[s0] ^ MULT9[s1] ^ MULTE[s2] ^ MULTB[s3];
          state[3][col] = MULTB[s0] ^ MULTD[s1] ^ MULT9[s2] ^ MULTE[s3];
        }
      }

      // Inv shift rows
      state[1].unshift(state[1].pop());
      state[2].push(state[2].shift());
      state[2].push(state[2].shift());
      state[3].push(state[3].shift());

      // Inv sub bytes
      for (var row = 0; row < 4; row++) {
        for (var col = 0; col < 4; col++)
          state[row][col] = INVSBOX[state[row][col]];
      }

      // Add round key
      for (var row = 0; row < 4; row++) {
        for (var col = 0; col < 4; col++)
          state[row][col] ^= keyschedule[col][row];
      }

      // Set output
      for (var row = 0; row < AES._blocksize; row++) {
        for (var col = 0; col < 4; col++)
          c[offset + col * 4 + row] = state[row][col];
      }
    },

    /**
     * Private methods
     */

    _init: function(k) {
      keylength = k.length / 4;
      nrounds = keylength + 6;
      AES._keyexpansion(k);
    },

    // Generate a key schedule
    _keyexpansion: function(k) {
      keyschedule = [];

      for (var row = 0; row < keylength; row++) {
        keyschedule[row] = [
          k[row * 4],
          k[row * 4 + 1],
          k[row * 4 + 2],
          k[row * 4 + 3]
        ];
      }

      for (
        var row = keylength;
        row < AES._blocksize * (nrounds + 1);
        row++
      ) {
        var temp = [
          keyschedule[row - 1][0],
          keyschedule[row - 1][1],
          keyschedule[row - 1][2],
          keyschedule[row - 1][3]
        ];

        if (row % keylength == 0) {
          // Rot word
          temp.push(temp.shift());

          // Sub word
          temp[0] = SBOX[temp[0]];
          temp[1] = SBOX[temp[1]];
          temp[2] = SBOX[temp[2]];
          temp[3] = SBOX[temp[3]];

          temp[0] ^= RCON[row / keylength];
        } else if (keylength > 6 && row % keylength == 4) {
          // Sub word
          temp[0] = SBOX[temp[0]];
          temp[1] = SBOX[temp[1]];
          temp[2] = SBOX[temp[2]];
          temp[3] = SBOX[temp[3]];
        }

        keyschedule[row] = [
          keyschedule[row - keylength][0] ^ temp[0],
          keyschedule[row - keylength][1] ^ temp[1],
          keyschedule[row - keylength][2] ^ temp[2],
          keyschedule[row - keylength][3] ^ temp[3]
        ];
      }
    }
  });
})();
</script>
<script type="text/javascript">
/*!
 * Crypto-JS 2.5.4 BlockModes.js
 * contribution from Simon Greatrix
 */

(function(C) {
  // Create pad namespace
  var C_pad = (C.pad = {});

  // Calculate the number of padding bytes required.
  function _requiredPadding(cipher, message) {
    var blockSizeInBytes = cipher._blocksize * 4;
    var reqd = blockSizeInBytes - (message.length % blockSizeInBytes);
    return reqd;
  }

  // Remove padding when the final byte gives the number of padding bytes.
  var _unpadLength = function(cipher, message, alg, padding) {
    var pad = message.pop();
    if (pad == 0) {
      throw new Error(
        "Invalid zero-length padding specified for " +
          alg +
          ". Wrong cipher specification or key used?"
      );
    }
    var maxPad = cipher._blocksize * 4;
    if (pad > maxPad) {
      throw new Error(
        "Invalid padding length of " +
          pad +
          " specified for " +
          alg +
          ". Wrong cipher specification or key used?"
      );
    }
    for (var i = 1; i < pad; i++) {
      var b = message.pop();
      if (padding != undefined && padding != b) {
        throw new Error(
          "Invalid padding byte of 0x" +
            b.toString(16) +
            " specified for " +
            alg +
            ". Wrong cipher specification or key used?"
        );
      }
    }
  };

  // No-operation padding, used for stream ciphers
  C_pad.NoPadding = {
    pad: function(cipher, message) {},
    unpad: function(cipher, message) {}
  };

  // Zero Padding.
  //
  // If the message is not an exact number of blocks, the final block is
  // completed with 0x00 bytes. There is no unpadding.
  C_pad.ZeroPadding = {
    pad: function(cipher, message) {
      var blockSizeInBytes = cipher._blocksize * 4;
      var reqd = message.length % blockSizeInBytes;
      if (reqd != 0) {
        for (reqd = blockSizeInBytes - reqd; reqd > 0; reqd--) {
          message.push(0x00);
        }
      }
    },

    unpad: function(cipher, message) {
      while (message[message.length - 1] == 0) {
        message.pop();
      }
    }
  };

  // ISO/IEC 7816-4 padding.
  //
  // Pads the plain text with an 0x80 byte followed by as many 0x00
  // bytes are required to complete the block.
  C_pad.iso7816 = {
    pad: function(cipher, message) {
      var reqd = _requiredPadding(cipher, message);
      message.push(0x80);
      for (; reqd > 1; reqd--) {
        message.push(0x00);
      }
    },

    unpad: function(cipher, message) {
      var padLength;
      for (
        padLength = cipher._blocksize * 4;
        padLength > 0;
        padLength--
      ) {
        var b = message.pop();
        if (b == 0x80) return;
        if (b != 0x00) {
          throw new Error(
            "ISO-7816 padding byte must be 0, not 0x" +
              b.toString(16) +
              ". Wrong cipher specification or key used?"
          );
        }
      }
      throw new Error(
        "ISO-7816 padded beyond cipher block size. Wrong cipher specification or key used?"
      );
    }
  };

  // ANSI X.923 padding
  //
  // The final block is padded with zeros except for the last byte of the
  // last block which contains the number of padding bytes.
  C_pad.ansix923 = {
    pad: function(cipher, message) {
      var reqd = _requiredPadding(cipher, message);
      for (var i = 1; i < reqd; i++) {
        message.push(0x00);
      }
      message.push(reqd);
    },

    unpad: function(cipher, message) {
      _unpadLength(cipher, message, "ANSI X.923", 0);
    }
  };

  // ISO 10126
  //
  // The final block is padded with random bytes except for the last
  // byte of the last block which contains the number of padding bytes.
  C_pad.iso10126 = {
    pad: function(cipher, message) {
      var reqd = _requiredPadding(cipher, message);
      for (var i = 1; i < reqd; i++) {
        message.push(Math.floor(Math.random() * 256));
      }
      message.push(reqd);
    },

    unpad: function(cipher, message) {
      _unpadLength(cipher, message, "ISO 10126", undefined);
    }
  };

  // PKCS7 padding
  //
  // PKCS7 is described in RFC 5652. Padding is in whole bytes. The
  // value of each added byte is the number of bytes that are added,
  // i.e. N bytes, each of value N are added.
  C_pad.pkcs7 = {
    pad: function(cipher, message) {
      var reqd = _requiredPadding(cipher, message);
      for (var i = 0; i < reqd; i++) {
        message.push(reqd);
      }
    },

    unpad: function(cipher, message) {
      _unpadLength(
        cipher,
        message,
        "PKCS 7",
        message[message.length - 1]
      );
    }
  };

  // Create mode namespace
  var C_mode = (C.mode = {});

  /**
   * Mode base "class".
   */
  var Mode = (C_mode.Mode = function(padding) {
    if (padding) {
      this._padding = padding;
    }
  });

  Mode.prototype = {
    encrypt: function(cipher, m, iv) {
      this._padding.pad(cipher, m);
      this._doEncrypt(cipher, m, iv);
    },

    decrypt: function(cipher, m, iv) {
      this._doDecrypt(cipher, m, iv);
      this._padding.unpad(cipher, m);
    },

    // Default padding
    _padding: C_pad.iso7816
  };

  /**
   * Electronic Code Book mode.
   *
   * ECB applies the cipher directly against each block of the input.
   *
   * ECB does not require an initialization vector.
   */
  var ECB = (C_mode.ECB = function() {
    // Call parent constructor
    Mode.apply(this, arguments);
  });

  // Inherit from Mode
  var ECB_prototype = (ECB.prototype = new Mode());

  // Concrete steps for Mode template
  ECB_prototype._doEncrypt = function(cipher, m, iv) {
    var blockSizeInBytes = cipher._blocksize * 4;
    // Encrypt each block
    for (var offset = 0; offset < m.length; offset += blockSizeInBytes) {
      cipher._encryptblock(m, offset);
    }
  };
  ECB_prototype._doDecrypt = function(cipher, c, iv) {
    var blockSizeInBytes = cipher._blocksize * 4;
    // Decrypt each block
    for (var offset = 0; offset < c.length; offset += blockSizeInBytes) {
      cipher._decryptblock(c, offset);
    }
  };

  // ECB never uses an IV
  ECB_prototype.fixOptions = function(options) {
    options.iv = [];
  };

  /**
   * Cipher block chaining
   *
   * The first block is XORed with the IV. Subsequent blocks are XOR with the
   * previous cipher output.
   */
  var CBC = (C_mode.CBC = function() {
    // Call parent constructor
    Mode.apply(this, arguments);
  });

  // Inherit from Mode
  var CBC_prototype = (CBC.prototype = new Mode());

  // Concrete steps for Mode template
  CBC_prototype._doEncrypt = function(cipher, m, iv) {
    var blockSizeInBytes = cipher._blocksize * 4;

    // Encrypt each block
    for (var offset = 0; offset < m.length; offset += blockSizeInBytes) {
      if (offset == 0) {
        // XOR first block using IV
        for (var i = 0; i < blockSizeInBytes; i++) m[i] ^= iv[i];
      } else {
        // XOR this block using previous crypted block
        for (var i = 0; i < blockSizeInBytes; i++)
          m[offset + i] ^= m[offset + i - blockSizeInBytes];
      }
      // Encrypt block
      cipher._encryptblock(m, offset);
    }
  };
  CBC_prototype._doDecrypt = function(cipher, c, iv) {
    var blockSizeInBytes = cipher._blocksize * 4;

    // At the start, the previously crypted block is the IV
    var prevCryptedBlock = iv;

    // Decrypt each block
    for (var offset = 0; offset < c.length; offset += blockSizeInBytes) {
      // Save this crypted block
      var thisCryptedBlock = c.slice(offset, offset + blockSizeInBytes);
      // Decrypt block
      cipher._decryptblock(c, offset);
      // XOR decrypted block using previous crypted block
      for (var i = 0; i < blockSizeInBytes; i++) {
        c[offset + i] ^= prevCryptedBlock[i];
      }
      prevCryptedBlock = thisCryptedBlock;
    }
  };

  /**
   * Cipher feed back
   *
   * The cipher output is XORed with the plain text to produce the cipher output,
   * which is then fed back into the cipher to produce a bit pattern to XOR the
   * next block with.
   *
   * This is a stream cipher mode and does not require padding.
   */
  var CFB = (C_mode.CFB = function() {
    // Call parent constructor
    Mode.apply(this, arguments);
  });

  // Inherit from Mode
  var CFB_prototype = (CFB.prototype = new Mode());

  // Override padding
  CFB_prototype._padding = C_pad.NoPadding;

  // Concrete steps for Mode template
  CFB_prototype._doEncrypt = function(cipher, m, iv) {
    var blockSizeInBytes = cipher._blocksize * 4,
      keystream = iv.slice(0);

    // Encrypt each byte
    for (var i = 0; i < m.length; i++) {
      var j = i % blockSizeInBytes;
      if (j == 0) cipher._encryptblock(keystream, 0);

      m[i] ^= keystream[j];
      keystream[j] = m[i];
    }
  };
  CFB_prototype._doDecrypt = function(cipher, c, iv) {
    var blockSizeInBytes = cipher._blocksize * 4,
      keystream = iv.slice(0);

    // Encrypt each byte
    for (var i = 0; i < c.length; i++) {
      var j = i % blockSizeInBytes;
      if (j == 0) cipher._encryptblock(keystream, 0);

      var b = c[i];
      c[i] ^= keystream[j];
      keystream[j] = b;
    }
  };

  /**
   * Output feed back
   *
   * The cipher repeatedly encrypts its own output. The output is XORed with the
   * plain text to produce the cipher text.
   *
   * This is a stream cipher mode and does not require padding.
   */
  var OFB = (C_mode.OFB = function() {
    // Call parent constructor
    Mode.apply(this, arguments);
  });

  // Inherit from Mode
  var OFB_prototype = (OFB.prototype = new Mode());

  // Override padding
  OFB_prototype._padding = C_pad.NoPadding;

  // Concrete steps for Mode template
  OFB_prototype._doEncrypt = function(cipher, m, iv) {
    var blockSizeInBytes = cipher._blocksize * 4,
      keystream = iv.slice(0);

    // Encrypt each byte
    for (var i = 0; i < m.length; i++) {
      // Generate keystream
      if (i % blockSizeInBytes == 0) cipher._encryptblock(keystream, 0);

      // Encrypt byte
      m[i] ^= keystream[i % blockSizeInBytes];
    }
  };
  OFB_prototype._doDecrypt = OFB_prototype._doEncrypt;

  /**
   * Counter
   * @author Gergely Risko
   *
   * After every block the last 4 bytes of the IV is increased by one
   * with carry and that IV is used for the next block.
   *
   * This is a stream cipher mode and does not require padding.
   */
  var CTR = (C_mode.CTR = function() {
    // Call parent constructor
    Mode.apply(this, arguments);
  });

  // Inherit from Mode
  var CTR_prototype = (CTR.prototype = new Mode());

  // Override padding
  CTR_prototype._padding = C_pad.NoPadding;

  CTR_prototype._doEncrypt = function(cipher, m, iv) {
    var blockSizeInBytes = cipher._blocksize * 4;
    var counter = iv.slice(0);

    for (var i = 0; i < m.length; ) {
      // do not lose iv
      var keystream = counter.slice(0);

      // Generate keystream for next block
      cipher._encryptblock(keystream, 0);

      // XOR keystream with block
      for (var j = 0; i < m.length && j < blockSizeInBytes; j++, i++) {
        m[i] ^= keystream[j];
      }

      // Increase counter
      if (++counter[blockSizeInBytes - 1] == 256) {
        counter[blockSizeInBytes - 1] = 0;
        if (++counter[blockSizeInBytes - 2] == 256) {
          counter[blockSizeInBytes - 2] = 0;
          if (++counter[blockSizeInBytes - 3] == 256) {
            counter[blockSizeInBytes - 3] = 0;
            ++counter[blockSizeInBytes - 4];
          }
        }
      }
    }
  };
  CTR_prototype._doDecrypt = CTR_prototype._doEncrypt;
})(Crypto);
</script>
<script type="text/javascript">
/*!
 * Crypto-JS v2.0.0  RIPEMD-160
 * http://code.google.com/p/crypto-js/
 * Copyright (c) 2009, Jeff Mott. All rights reserved.
 * http://code.google.com/p/crypto-js/wiki/License
 *
 * A JavaScript implementation of the RIPEMD-160 Algorithm
 * Version 2.2 Copyright Jeremy Lin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 * Also http://www.ocf.berkeley.edu/~jjlin/jsotp/
 * Ported to Crypto-JS by Stefan Thomas.
 */

(function() {
  // Shortcuts
  var C = Crypto,
    util = C.util,
    charenc = C.charenc,
    UTF8 = charenc.UTF8,
    Binary = charenc.Binary;

  // Convert a byte array to little-endian 32-bit words
  util.bytesToLWords = function(bytes) {
    var output = Array(bytes.length >> 2);
    for (var i = 0; i < output.length; i++) output[i] = 0;
    for (var i = 0; i < bytes.length * 8; i += 8)
      output[i >> 5] |= (bytes[i / 8] & 0xff) << i % 32;
    return output;
  };

  // Convert little-endian 32-bit words to a byte array
  util.lWordsToBytes = function(words) {
    var output = [];
    for (var i = 0; i < words.length * 32; i += 8)
      output.push((words[i >> 5] >>> i % 32) & 0xff);
    return output;
  };

  // Public API
  var RIPEMD160 = (C.RIPEMD160 = function(message, options) {
    var digestbytes = util.lWordsToBytes(RIPEMD160._rmd160(message));
    return options && options.asBytes
      ? digestbytes
      : options && options.asString
      ? Binary.bytesToString(digestbytes)
      : util.bytesToHex(digestbytes);
  });

  // The core
  RIPEMD160._rmd160 = function(message) {
    // Convert to byte array
    if (message.constructor == String)
      message = UTF8.stringToBytes(message);

    var x = util.bytesToLWords(message),
      len = message.length * 8;

    /* append padding */
    x[len >> 5] |= 0x80 << len % 32;
    x[(((len + 64) >>> 9) << 4) + 14] = len;

    var h0 = 0x67452301;
    var h1 = 0xefcdab89;
    var h2 = 0x98badcfe;
    var h3 = 0x10325476;
    var h4 = 0xc3d2e1f0;

    for (var i = 0; i < x.length; i += 16) {
      var T;
      var A1 = h0,
        B1 = h1,
        C1 = h2,
        D1 = h3,
        E1 = h4;
      var A2 = h0,
        B2 = h1,
        C2 = h2,
        D2 = h3,
        E2 = h4;
      for (var j = 0; j <= 79; ++j) {
        T = safe_add(A1, rmd160_f(j, B1, C1, D1));
        T = safe_add(T, x[i + rmd160_r1[j]]);
        T = safe_add(T, rmd160_K1(j));
        T = safe_add(bit_rol(T, rmd160_s1[j]), E1);
        A1 = E1;
        E1 = D1;
        D1 = bit_rol(C1, 10);
        C1 = B1;
        B1 = T;
        T = safe_add(A2, rmd160_f(79 - j, B2, C2, D2));
        T = safe_add(T, x[i + rmd160_r2[j]]);
        T = safe_add(T, rmd160_K2(j));
        T = safe_add(bit_rol(T, rmd160_s2[j]), E2);
        A2 = E2;
        E2 = D2;
        D2 = bit_rol(C2, 10);
        C2 = B2;
        B2 = T;
      }
      T = safe_add(h1, safe_add(C1, D2));
      h1 = safe_add(h2, safe_add(D1, E2));
      h2 = safe_add(h3, safe_add(E1, A2));
      h3 = safe_add(h4, safe_add(A1, B2));
      h4 = safe_add(h0, safe_add(B1, C2));
      h0 = T;
    }
    return [h0, h1, h2, h3, h4];
  };

  function rmd160_f(j, x, y, z) {
    return 0 <= j && j <= 15
      ? x ^ y ^ z
      : 16 <= j && j <= 31
      ? (x & y) | (~x & z)
      : 32 <= j && j <= 47
      ? (x | ~y) ^ z
      : 48 <= j && j <= 63
      ? (x & z) | (y & ~z)
      : 64 <= j && j <= 79
      ? x ^ (y | ~z)
      : "rmd160_f: j out of range";
  }

  function rmd160_K1(j) {
    return 0 <= j && j <= 15
      ? 0x00000000
      : 16 <= j && j <= 31
      ? 0x5a827999
      : 32 <= j && j <= 47
      ? 0x6ed9eba1
      : 48 <= j && j <= 63
      ? 0x8f1bbcdc
      : 64 <= j && j <= 79
      ? 0xa953fd4e
      : "rmd160_K1: j out of range";
  }

  function rmd160_K2(j) {
    return 0 <= j && j <= 15
      ? 0x50a28be6
      : 16 <= j && j <= 31
      ? 0x5c4dd124
      : 32 <= j && j <= 47
      ? 0x6d703ef3
      : 48 <= j && j <= 63
      ? 0x7a6d76e9
      : 64 <= j && j <= 79
      ? 0x00000000
      : "rmd160_K2: j out of range";
  }
  var rmd160_r1 = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
  ];
  var rmd160_r2 = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
  ];
  var rmd160_s1 = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
  ];
  var rmd160_s2 = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
  ];

  /*
   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
   * to work around bugs in some JS interpreters.
   */
  function safe_add(x, y) {
    var lsw = (x & 0xffff) + (y & 0xffff);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return (msw << 16) | (lsw & 0xffff);
  }

  /*
   * Bitwise rotate a 32-bit number to the left.
   */
  function bit_rol(num, cnt) {
    return (num << cnt) | (num >>> (32 - cnt));
  }
})();
</script>
<script type="text/javascript">
/*!
 * Random number generator with ArcFour PRNG
 *
 * NOTE: For best results, put code like
 * <body onclick='SecureRandom.seedTime();' onkeypress='SecureRandom.seedTime();'>
 * in your main HTML document.
 *
 * Copyright Tom Wu, bitaddress.org  BSD License.
 * http://www-cs-students.stanford.edu/~tjw/jsbn/LICENSE
 */
(function() {
  // Constructor function of Global SecureRandom object
  var sr = (window.SecureRandom = function() {});

  // Properties
  sr.state;
  sr.pool;
  sr.pptr;
  sr.poolCopyOnInit;

  // Pool size must be a multiple of 4 and greater than 32.
  // An array of bytes the size of the pool will be passed to init()
  sr.poolSize = 256;

  // --- object methods ---

  // public method
  // ba: byte array
  sr.prototype.nextBytes = function(ba) {
    var i;
    if (
      window.crypto &&
      window.crypto.getRandomValues &&
      window.Uint8Array
    ) {
      try {
        var rvBytes = new Uint8Array(ba.length);
        window.crypto.getRandomValues(rvBytes);
        for (i = 0; i < ba.length; ++i) ba[i] = sr.getByte() ^ rvBytes[i];
        return;
      } catch (e) {
        alert(e);
      }
    }
    for (i = 0; i < ba.length; ++i) ba[i] = sr.getByte();
  };

  // --- static methods ---

  // Mix in the current time (w/milliseconds) into the pool
  // NOTE: this method should be called from body click/keypress event handlers to increase entropy
  sr.seedTime = function() {
    sr.seedInt(new Date().getTime());
  };

  sr.getByte = function() {
    if (sr.state == null) {
      sr.seedTime();
      sr.state = sr.ArcFour(); // Plug in your RNG constructor here
      sr.state.init(sr.pool);
      sr.poolCopyOnInit = [];
      for (sr.pptr = 0; sr.pptr < sr.pool.length; ++sr.pptr)
        sr.poolCopyOnInit[sr.pptr] = sr.pool[sr.pptr];
      sr.pptr = 0;
    }
    // TODO: allow reseeding after first request
    return sr.state.next();
  };

  // Mix in a 32-bit integer into the pool
  sr.seedInt = function(x) {
    sr.seedInt8(x);
    sr.seedInt8(x >> 8);
    sr.seedInt8(x >> 16);
    sr.seedInt8(x >> 24);
  };

  // Mix in a 16-bit integer into the pool
  sr.seedInt16 = function(x) {
    sr.seedInt8(x);
    sr.seedInt8(x >> 8);
  };

  // Mix in a 8-bit integer into the pool
  sr.seedInt8 = function(x) {
    sr.pool[sr.pptr++] ^= x & 255;
    if (sr.pptr >= sr.poolSize) sr.pptr -= sr.poolSize;
  };

  // Arcfour is a PRNG
  sr.ArcFour = function() {
    function Arcfour() {
      this.i = 0;
      this.j = 0;
      this.S = new Array();
    }

    // Initialize arcfour context from key, an array of ints, each from [0..255]
    function ARC4init(key) {
      var i, j, t;
      for (i = 0; i < 256; ++i) this.S[i] = i;
      j = 0;
      for (i = 0; i < 256; ++i) {
        j = (j + this.S[i] + key[i % key.length]) & 255;
        t = this.S[i];
        this.S[i] = this.S[j];
        this.S[j] = t;
      }
      this.i = 0;
      this.j = 0;
    }

    function ARC4next() {
      var t;
      this.i = (this.i + 1) & 255;
      this.j = (this.j + this.S[this.i]) & 255;
      t = this.S[this.i];
      this.S[this.i] = this.S[this.j];
      this.S[this.j] = t;
      return this.S[(t + this.S[this.i]) & 255];
    }

    Arcfour.prototype.init = ARC4init;
    Arcfour.prototype.next = ARC4next;

    return new Arcfour();
  };

  // Initialize the pool with junk if needed.
  if (sr.pool == null) {
    sr.pool = new Array();
    sr.pptr = 0;
    var t;
    if (
      window.crypto &&
      window.crypto.getRandomValues &&
      window.Uint8Array
    ) {
      try {
        // Use webcrypto if available
        var ua = new Uint8Array(sr.poolSize);
        window.crypto.getRandomValues(ua);
        for (t = 0; t < sr.poolSize; ++t) sr.pool[sr.pptr++] = ua[t];
      } catch (e) {
        alert(e);
      }
    }
    while (sr.pptr < sr.poolSize) {
      // extract some randomness from Math.random()
      t = Math.floor(65536 * Math.random());
      sr.pool[sr.pptr++] = t >>> 8;
      sr.pool[sr.pptr++] = t & 255;
    }
    sr.pptr = Math.floor(sr.poolSize * Math.random());
    sr.seedTime();
    // entropy
    var entropyStr = "";
    // screen size and color depth: ~4.8 to ~5.4 bits
    entropyStr +=
      window.screen.height *
      window.screen.width *
      window.screen.colorDepth;
    entropyStr +=
      window.screen.availHeight *
      window.screen.availWidth *
      window.screen.pixelDepth;
    // time zone offset: ~4 bits
    var dateObj = new Date();
    var timeZoneOffset = dateObj.getTimezoneOffset();
    entropyStr += timeZoneOffset;
    // user agent: ~8.3 to ~11.6 bits
    entropyStr += navigator.userAgent;
    // browser plugin details: ~16.2 to ~21.8 bits
    var pluginsStr = "";
    for (var i = 0; i < navigator.plugins.length; i++) {
      pluginsStr +=
        navigator.plugins[i].name +
        " " +
        navigator.plugins[i].filename +
        " " +
        navigator.plugins[i].description +
        " " +
        navigator.plugins[i].version +
        ", ";
    }
    var mimeTypesStr = "";
    for (var i = 0; i < navigator.mimeTypes.length; i++) {
      mimeTypesStr +=
        navigator.mimeTypes[i].description +
        " " +
        navigator.mimeTypes[i].type +
        " " +
        navigator.mimeTypes[i].suffixes +
        ", ";
    }
    entropyStr += pluginsStr + mimeTypesStr;
    // cookies and storage: 1 bit
    entropyStr +=
      navigator.cookieEnabled +
      typeof sessionStorage +
      typeof localStorage;
    // language: ~7 bit
    entropyStr += navigator.language;
    // history: ~2 bit
    entropyStr += window.history.length;
    // location
    entropyStr += window.location;

    var entropyBytes = Crypto.SHA256(entropyStr, {
      asBytes: true
    });
    for (var i = 0; i < entropyBytes.length; i++) {
      sr.seedInt8(entropyBytes[i]);
    }
  }
})();
</script>
<script type="text/javascript">
//https://raw.github.com/bitcoinjs/bitcoinjs-lib/faa10f0f6a1fff0b9a99fffb9bc30cee33b17212/src/ecdsa.js
/*!
 * Basic Javascript Elliptic Curve implementation
 * Ported loosely from BouncyCastle's Java EC code
 * Only Fp curves implemented for now
 *
 * Copyright Tom Wu, bitaddress.org  BSD License.
 * http://www-cs-students.stanford.edu/~tjw/jsbn/LICENSE
 */
(function() {
  // Constructor function of Global EllipticCurve object
  var ec = (window.EllipticCurve = function() {});

  // ----------------
  // ECFieldElementFp constructor
  // q instanceof BigInteger
  // x instanceof BigInteger
  ec.FieldElementFp = function(q, x) {
    this.x = x;
    // TODO if(x.compareTo(q) >= 0) error
    this.q = q;
  };

  ec.FieldElementFp.prototype.equals = function(other) {
    if (other == this) return true;
    return this.q.equals(other.q) && this.x.equals(other.x);
  };

  ec.FieldElementFp.prototype.toBigInteger = function() {
    return this.x;
  };

  ec.FieldElementFp.prototype.negate = function() {
    return new ec.FieldElementFp(this.q, this.x.negate().mod(this.q));
  };

  ec.FieldElementFp.prototype.add = function(b) {
    return new ec.FieldElementFp(
      this.q,
      this.x.add(b.toBigInteger()).mod(this.q)
    );
  };

  ec.FieldElementFp.prototype.subtract = function(b) {
    return new ec.FieldElementFp(
      this.q,
      this.x.subtract(b.toBigInteger()).mod(this.q)
    );
  };

  ec.FieldElementFp.prototype.multiply = function(b) {
    return new ec.FieldElementFp(
      this.q,
      this.x.multiply(b.toBigInteger()).mod(this.q)
    );
  };

  ec.FieldElementFp.prototype.square = function() {
    return new ec.FieldElementFp(this.q, this.x.square().mod(this.q));
  };

  ec.FieldElementFp.prototype.divide = function(b) {
    return new ec.FieldElementFp(
      this.q,
      this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q)
    );
  };

  ec.FieldElementFp.prototype.getByteLength = function() {
    return Math.floor((this.toBigInteger().bitLength() + 7) / 8);
  };

  // D.1.4 91
  /**
   * return a sqrt root - the routine verifies that the calculation
   * returns the right value - if none exists it returns null.
   *
   * Copyright (c) 2000 - 2011 The Legion Of The Bouncy Castle (http://www.bouncycastle.org)
   * Ported to JavaScript by bitaddress.org
   */
  ec.FieldElementFp.prototype.sqrt = function() {
    if (!this.q.testBit(0)) throw new Error("even value of q");

    // p mod 4 == 3
    if (this.q.testBit(1)) {
      // z = g^(u+1) + p, p = 4u + 3
      var z = new ec.FieldElementFp(
        this.q,
        this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE), this.q)
      );
      return z.square().equals(this) ? z : null;
    }

    // p mod 4 == 1
    var qMinusOne = this.q.subtract(BigInteger.ONE);
    var legendreExponent = qMinusOne.shiftRight(1);
    if (!this.x.modPow(legendreExponent, this.q).equals(BigInteger.ONE))
      return null;
    var u = qMinusOne.shiftRight(2);
    var k = u.shiftLeft(1).add(BigInteger.ONE);
    var Q = this.x;
    var fourQ = Q.shiftLeft(2).mod(this.q);
    var U, V;

    do {
      var rand = new SecureRandom();
      var P;
      do {
        P = new BigInteger(this.q.bitLength(), rand);
      } while (
        P.compareTo(this.q) >= 0 ||
        !P.multiply(P)
          .subtract(fourQ)
          .modPow(legendreExponent, this.q)
          .equals(qMinusOne)
      );

      var result = ec.FieldElementFp.fastLucasSequence(this.q, P, Q, k);

      U = result[0];
      V = result[1];
      if (
        V.multiply(V)
          .mod(this.q)
          .equals(fourQ)
      ) {
        // Integer division by 2, mod q
        if (V.testBit(0)) {
          V = V.add(this.q);
        }
        V = V.shiftRight(1);
        return new ec.FieldElementFp(this.q, V);
      }
    } while (U.equals(BigInteger.ONE) || U.equals(qMinusOne));

    return null;
  };

  /*
   * Copyright (c) 2000 - 2011 The Legion Of The Bouncy Castle (http://www.bouncycastle.org)
   * Ported to JavaScript by bitaddress.org
   */
  ec.FieldElementFp.fastLucasSequence = function(p, P, Q, k) {
    // TODO Research and apply "common-multiplicand multiplication here"

    var n = k.bitLength();
    var s = k.getLowestSetBit();
    var Uh = BigInteger.ONE;
    var Vl = BigInteger.TWO;
    var Vh = P;
    var Ql = BigInteger.ONE;
    var Qh = BigInteger.ONE;

    for (var j = n - 1; j >= s + 1; --j) {
      Ql = Ql.multiply(Qh).mod(p);
      if (k.testBit(j)) {
        Qh = Ql.multiply(Q).mod(p);
        Uh = Uh.multiply(Vh).mod(p);
        Vl = Vh.multiply(Vl)
          .subtract(P.multiply(Ql))
          .mod(p);
        Vh = Vh.multiply(Vh)
          .subtract(Qh.shiftLeft(1))
          .mod(p);
      } else {
        Qh = Ql;
        Uh = Uh.multiply(Vl)
          .subtract(Ql)
          .mod(p);
        Vh = Vh.multiply(Vl)
          .subtract(P.multiply(Ql))
          .mod(p);
        Vl = Vl.multiply(Vl)
          .subtract(Ql.shiftLeft(1))
          .mod(p);
      }
    }

    Ql = Ql.multiply(Qh).mod(p);
    Qh = Ql.multiply(Q).mod(p);
    Uh = Uh.multiply(Vl)
      .subtract(Ql)
      .mod(p);
    Vl = Vh.multiply(Vl)
      .subtract(P.multiply(Ql))
      .mod(p);
    Ql = Ql.multiply(Qh).mod(p);

    for (var j = 1; j <= s; ++j) {
      Uh = Uh.multiply(Vl).mod(p);
      Vl = Vl.multiply(Vl)
        .subtract(Ql.shiftLeft(1))
        .mod(p);
      Ql = Ql.multiply(Ql).mod(p);
    }

    return [Uh, Vl];
  };

  // ----------------
  // ECPointFp constructor
  ec.PointFp = function(curve, x, y, z, compressed) {
    this.curve = curve;
    this.x = x;
    this.y = y;
    // Projective coordinates: either zinv == null or z * zinv == 1
    // z and zinv are just BigIntegers, not fieldElements
    if (z == null) {
      this.z = BigInteger.ONE;
    } else {
      this.z = z;
    }
    this.zinv = null;
    // compression flag
    this.compressed = !!compressed;
  };

  ec.PointFp.prototype.getX = function() {
    if (this.zinv == null) {
      this.zinv = this.z.modInverse(this.curve.q);
    }
    var r = this.x.toBigInteger().multiply(this.zinv);
    this.curve.reduce(r);
    return this.curve.fromBigInteger(r);
  };

  ec.PointFp.prototype.getY = function() {
    if (this.zinv == null) {
      this.zinv = this.z.modInverse(this.curve.q);
    }
    var r = this.y.toBigInteger().multiply(this.zinv);
    this.curve.reduce(r);
    return this.curve.fromBigInteger(r);
  };

  ec.PointFp.prototype.equals = function(other) {
    if (other == this) return true;
    if (this.isInfinity()) return other.isInfinity();
    if (other.isInfinity()) return this.isInfinity();
    var u, v;
    // u = Y2 * Z1 - Y1 * Z2
    u = other.y
      .toBigInteger()
      .multiply(this.z)
      .subtract(this.y.toBigInteger().multiply(other.z))
      .mod(this.curve.q);
    if (!u.equals(BigInteger.ZERO)) return false;
    // v = X2 * Z1 - X1 * Z2
    v = other.x
      .toBigInteger()
      .multiply(this.z)
      .subtract(this.x.toBigInteger().multiply(other.z))
      .mod(this.curve.q);
    return v.equals(BigInteger.ZERO);
  };

  ec.PointFp.prototype.isInfinity = function() {
    if (this.x == null && this.y == null) return true;
    return (
      this.z.equals(BigInteger.ZERO) &&
      !this.y.toBigInteger().equals(BigInteger.ZERO)
    );
  };

  ec.PointFp.prototype.negate = function() {
    return new ec.PointFp(this.curve, this.x, this.y.negate(), this.z);
  };

  ec.PointFp.prototype.add = function(b) {
    if (this.isInfinity()) return b;
    if (b.isInfinity()) return this;

    // u = Y2 * Z1 - Y1 * Z2
    var u = b.y
      .toBigInteger()
      .multiply(this.z)
      .subtract(this.y.toBigInteger().multiply(b.z))
      .mod(this.curve.q);
    // v = X2 * Z1 - X1 * Z2
    var v = b.x
      .toBigInteger()
      .multiply(this.z)
      .subtract(this.x.toBigInteger().multiply(b.z))
      .mod(this.curve.q);

    if (BigInteger.ZERO.equals(v)) {
      if (BigInteger.ZERO.equals(u)) {
        return this.twice(); // this == b, so double
      }
      return this.curve.getInfinity(); // this = -b, so infinity
    }

    var THREE = new BigInteger("3");
    var x1 = this.x.toBigInteger();
    var y1 = this.y.toBigInteger();
    var x2 = b.x.toBigInteger();
    var y2 = b.y.toBigInteger();

    var v2 = v.square();
    var v3 = v2.multiply(v);
    var x1v2 = x1.multiply(v2);
    var zu2 = u.square().multiply(this.z);

    // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)
    var x3 = zu2
      .subtract(x1v2.shiftLeft(1))
      .multiply(b.z)
      .subtract(v3)
      .multiply(v)
      .mod(this.curve.q);
    // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3
    var y3 = x1v2
      .multiply(THREE)
      .multiply(u)
      .subtract(y1.multiply(v3))
      .subtract(zu2.multiply(u))
      .multiply(b.z)
      .add(u.multiply(v3))
      .mod(this.curve.q);
    // z3 = v^3 * z1 * z2
    var z3 = v3
      .multiply(this.z)
      .multiply(b.z)
      .mod(this.curve.q);

    return new ec.PointFp(
      this.curve,
      this.curve.fromBigInteger(x3),
      this.curve.fromBigInteger(y3),
      z3
    );
  };

  ec.PointFp.prototype.twice = function() {
    if (this.isInfinity()) return this;
    if (this.y.toBigInteger().signum() == 0)
      return this.curve.getInfinity();

    // TODO: optimized handling of constants
    var THREE = new BigInteger("3");
    var x1 = this.x.toBigInteger();
    var y1 = this.y.toBigInteger();

    var y1z1 = y1.multiply(this.z);
    var y1sqz1 = y1z1.multiply(y1).mod(this.curve.q);
    var a = this.curve.a.toBigInteger();

    // w = 3 * x1^2 + a * z1^2
    var w = x1.square().multiply(THREE);
    if (!BigInteger.ZERO.equals(a)) {
      w = w.add(this.z.square().multiply(a));
    }
    w = w.mod(this.curve.q);
    //this.curve.reduce(w);
    // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)
    var x3 = w
      .square()
      .subtract(x1.shiftLeft(3).multiply(y1sqz1))
      .shiftLeft(1)
      .multiply(y1z1)
      .mod(this.curve.q);
    // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3
    var y3 = w
      .multiply(THREE)
      .multiply(x1)
      .subtract(y1sqz1.shiftLeft(1))
      .shiftLeft(2)
      .multiply(y1sqz1)
      .subtract(w.square().multiply(w))
      .mod(this.curve.q);
    // z3 = 8 * (y1 * z1)^3
    var z3 = y1z1
      .square()
      .multiply(y1z1)
      .shiftLeft(3)
      .mod(this.curve.q);

    return new ec.PointFp(
      this.curve,
      this.curve.fromBigInteger(x3),
      this.curve.fromBigInteger(y3),
      z3
    );
  };

  // Simple NAF (Non-Adjacent Form) multiplication algorithm
  // TODO: modularize the multiplication algorithm
  ec.PointFp.prototype.multiply = function(k) {
    if (this.isInfinity()) return this;
    if (k.signum() == 0) return this.curve.getInfinity();

    var e = k;
    var h = e.multiply(new BigInteger("3"));

    var neg = this.negate();
    var R = this;

    var i;
    for (i = h.bitLength() - 2; i > 0; --i) {
      R = R.twice();

      var hBit = h.testBit(i);
      var eBit = e.testBit(i);

      if (hBit != eBit) {
        R = R.add(hBit ? this : neg);
      }
    }

    return R;
  };

  // Compute this*j + x*k (simultaneous multiplication)
  ec.PointFp.prototype.multiplyTwo = function(j, x, k) {
    var i;
    if (j.bitLength() > k.bitLength()) i = j.bitLength() - 1;
    else i = k.bitLength() - 1;

    var R = this.curve.getInfinity();
    var both = this.add(x);
    while (i >= 0) {
      R = R.twice();
      if (j.testBit(i)) {
        if (k.testBit(i)) {
          R = R.add(both);
        } else {
          R = R.add(this);
        }
      } else {
        if (k.testBit(i)) {
          R = R.add(x);
        }
      }
      --i;
    }

    return R;
  };

  // patched by bitaddress.org and Casascius for use with Bitcoin.ECKey
  // patched by coretechs to support compressed public keys
  ec.PointFp.prototype.getEncoded = function(compressed) {
    var x = this.getX().toBigInteger();
    var y = this.getY().toBigInteger();
    var len = 32; // integerToBytes will zero pad if integer is less than 32 bytes. 32 bytes length is required by the Bitcoin protocol.
    var enc = ec.integerToBytes(x, len);

    // when compressed prepend byte depending if y point is even or odd
    if (compressed) {
      if (y.isEven()) {
        enc.unshift(0x02);
      } else {
        enc.unshift(0x03);
      }
    } else {
      enc.unshift(0x04);
      enc = enc.concat(ec.integerToBytes(y, len)); // uncompressed public key appends the bytes of the y point
    }
    return enc;
  };

  ec.PointFp.decodeFrom = function(curve, enc) {
    var type = enc[0];
    var dataLen = enc.length - 1;

    // Extract x and y as byte arrays
    var xBa = enc.slice(1, 1 + dataLen / 2);
    var yBa = enc.slice(1 + dataLen / 2, 1 + dataLen);

    // Prepend zero byte to prevent interpretation as negative integer
    xBa.unshift(0);
    yBa.unshift(0);

    // Convert to BigIntegers
    var x = new BigInteger(xBa);
    var y = new BigInteger(yBa);

    // Return point
    return new ec.PointFp(
      curve,
      curve.fromBigInteger(x),
      curve.fromBigInteger(y)
    );
  };

  ec.PointFp.prototype.add2D = function(b) {
    if (this.isInfinity()) return b;
    if (b.isInfinity()) return this;

    if (this.x.equals(b.x)) {
      if (this.y.equals(b.y)) {
        // this = b, i.e. this must be doubled
        return this.twice();
      }
      // this = -b, i.e. the result is the point at infinity
      return this.curve.getInfinity();
    }

    var x_x = b.x.subtract(this.x);
    var y_y = b.y.subtract(this.y);
    var gamma = y_y.divide(x_x);

    var x3 = gamma
      .square()
      .subtract(this.x)
      .subtract(b.x);
    var y3 = gamma.multiply(this.x.subtract(x3)).subtract(this.y);

    return new ec.PointFp(this.curve, x3, y3);
  };

  ec.PointFp.prototype.twice2D = function() {
    if (this.isInfinity()) return this;
    if (this.y.toBigInteger().signum() == 0) {
      // if y1 == 0, then (x1, y1) == (x1, -y1)
      // and hence this = -this and thus 2(x1, y1) == infinity
      return this.curve.getInfinity();
    }

    var TWO = this.curve.fromBigInteger(BigInteger.valueOf(2));
    var THREE = this.curve.fromBigInteger(BigInteger.valueOf(3));
    var gamma = this.x
      .square()
      .multiply(THREE)
      .add(this.curve.a)
      .divide(this.y.multiply(TWO));

    var x3 = gamma.square().subtract(this.x.multiply(TWO));
    var y3 = gamma.multiply(this.x.subtract(x3)).subtract(this.y);

    return new ec.PointFp(this.curve, x3, y3);
  };

  ec.PointFp.prototype.multiply2D = function(k) {
    if (this.isInfinity()) return this;
    if (k.signum() == 0) return this.curve.getInfinity();

    var e = k;
    var h = e.multiply(new BigInteger("3"));

    var neg = this.negate();
    var R = this;

    var i;
    for (i = h.bitLength() - 2; i > 0; --i) {
      R = R.twice();

      var hBit = h.testBit(i);
      var eBit = e.testBit(i);

      if (hBit != eBit) {
        R = R.add2D(hBit ? this : neg);
      }
    }

    return R;
  };

  ec.PointFp.prototype.isOnCurve = function() {
    var x = this.getX().toBigInteger();
    var y = this.getY().toBigInteger();
    var a = this.curve.getA().toBigInteger();
    var b = this.curve.getB().toBigInteger();
    var n = this.curve.getQ();
    var lhs = y.multiply(y).mod(n);
    var rhs = x
      .multiply(x)
      .multiply(x)
      .add(a.multiply(x))
      .add(b)
      .mod(n);
    return lhs.equals(rhs);
  };

  ec.PointFp.prototype.toString = function() {
    return (
      "(" +
      this.getX()
        .toBigInteger()
        .toString() +
      "," +
      this.getY()
        .toBigInteger()
        .toString() +
      ")"
    );
  };

  /**
   * Validate an elliptic curve point.
   *
   * See SEC 1, section 3.2.2.1: Elliptic Curve Public Key Validation Primitive
   */
  ec.PointFp.prototype.validate = function() {
    var n = this.curve.getQ();

    // Check Q != O
    if (this.isInfinity()) {
      throw new Error("Point is at infinity.");
    }

    // Check coordinate bounds
    var x = this.getX().toBigInteger();
    var y = this.getY().toBigInteger();
    if (
      x.compareTo(BigInteger.ONE) < 0 ||
      x.compareTo(n.subtract(BigInteger.ONE)) > 0
    ) {
      throw new Error("x coordinate out of bounds");
    }
    if (
      y.compareTo(BigInteger.ONE) < 0 ||
      y.compareTo(n.subtract(BigInteger.ONE)) > 0
    ) {
      throw new Error("y coordinate out of bounds");
    }

    // Check y^2 = x^3 + ax + b (mod n)
    if (!this.isOnCurve()) {
      throw new Error("Point is not on the curve.");
    }

    // Check nQ = 0 (Q is a scalar multiple of G)
    if (this.multiply(n).isInfinity()) {
      // TODO: This check doesn't work - fix.
      throw new Error("Point is not a scalar multiple of G.");
    }

    return true;
  };

  // ----------------
  // ECCurveFp constructor
  ec.CurveFp = function(q, a, b) {
    this.q = q;
    this.a = this.fromBigInteger(a);
    this.b = this.fromBigInteger(b);
    this.infinity = new ec.PointFp(this, null, null);
    this.reducer = new Barrett(this.q);
  };

  ec.CurveFp.prototype.getQ = function() {
    return this.q;
  };

  ec.CurveFp.prototype.getA = function() {
    return this.a;
  };

  ec.CurveFp.prototype.getB = function() {
    return this.b;
  };

  ec.CurveFp.prototype.equals = function(other) {
    if (other == this) return true;
    return (
      this.q.equals(other.q) &&
      this.a.equals(other.a) &&
      this.b.equals(other.b)
    );
  };

  ec.CurveFp.prototype.getInfinity = function() {
    return this.infinity;
  };

  ec.CurveFp.prototype.fromBigInteger = function(x) {
    return new ec.FieldElementFp(this.q, x);
  };

  ec.CurveFp.prototype.reduce = function(x) {
    this.reducer.reduce(x);
  };

  // for now, work with hex strings because they're easier in JS
  // compressed support added by bitaddress.org
  ec.CurveFp.prototype.decodePointHex = function(s) {
    var firstByte = parseInt(s.substr(0, 2), 16);
    switch (
      firstByte // first byte
    ) {
      case 0:
        return this.infinity;
      case 2: // compressed
      case 3: // compressed
        var yTilde = firstByte & 1;
        var xHex = s.substr(2, s.length - 2);
        var X1 = new BigInteger(xHex, 16);
        return this.decompressPoint(yTilde, X1);
      case 4: // uncompressed
      case 6: // hybrid
      case 7: // hybrid
        var len = (s.length - 2) / 2;
        var xHex = s.substr(2, len);
        var yHex = s.substr(len + 2, len);

        return new ec.PointFp(
          this,
          this.fromBigInteger(new BigInteger(xHex, 16)),
          this.fromBigInteger(new BigInteger(yHex, 16))
        );

      default:
        // unsupported
        return null;
    }
  };

  ec.CurveFp.prototype.encodePointHex = function(p) {
    if (p.isInfinity()) return "00";
    var xHex = p
      .getX()
      .toBigInteger()
      .toString(16);
    var yHex = p
      .getY()
      .toBigInteger()
      .toString(16);
    var oLen = this.getQ().toString(16).length;
    if (oLen % 2 != 0) oLen++;
    while (xHex.length < oLen) {
      xHex = "0" + xHex;
    }
    while (yHex.length < oLen) {
      yHex = "0" + yHex;
    }
    return "04" + xHex + yHex;
  };

  /*
   * Copyright (c) 2000 - 2011 The Legion Of The Bouncy Castle (http://www.bouncycastle.org)
   * Ported to JavaScript by bitaddress.org
   *
   * Number yTilde
   * BigInteger X1
   */
  ec.CurveFp.prototype.decompressPoint = function(yTilde, X1) {
    var x = this.fromBigInteger(X1);
    var alpha = x.multiply(x.square().add(this.getA())).add(this.getB());
    var beta = alpha.sqrt();
    // if we can't find a sqrt we haven't got a point on the curve - run!
    if (beta == null) throw new Error("Invalid point compression");
    var betaValue = beta.toBigInteger();
    var bit0 = betaValue.testBit(0) ? 1 : 0;
    if (bit0 != yTilde) {
      // Use the other root
      beta = this.fromBigInteger(this.getQ().subtract(betaValue));
    }
    return new ec.PointFp(this, x, beta, null, true);
  };

  ec.fromHex = function(s) {
    return new BigInteger(s, 16);
  };

  ec.integerToBytes = function(i, len) {
    var bytes = i.toByteArrayUnsigned();
    if (len < bytes.length) {
      bytes = bytes.slice(bytes.length - len);
    } else
      while (len > bytes.length) {
        bytes.unshift(0);
      }
    return bytes;
  };

  // Named EC curves
  // ----------------
  // X9ECParameters constructor
  ec.X9Parameters = function(curve, g, n, h) {
    this.curve = curve;
    this.g = g;
    this.n = n;
    this.h = h;
  };
  ec.X9Parameters.prototype.getCurve = function() {
    return this.curve;
  };
  ec.X9Parameters.prototype.getG = function() {
    return this.g;
  };
  ec.X9Parameters.prototype.getN = function() {
    return this.n;
  };
  ec.X9Parameters.prototype.getH = function() {
    return this.h;
  };

  // secp256k1 is the Curve used by Bitcoin
  ec.secNamedCurves = {
    // used by Bitcoin
    secp256k1: function() {
      // p = 2^256 - 2^32 - 2^9 - 2^8 - 2^7 - 2^6 - 2^4 - 1
      var p = ec.fromHex(
        "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F"
      );
      var a = BigInteger.ZERO;
      var b = ec.fromHex("7");
      var n = ec.fromHex(
        "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141"
      );
      var h = BigInteger.ONE;
      var curve = new ec.CurveFp(p, a, b);
      var G = curve.decodePointHex(
        "04" +
          "79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798" +
          "483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8"
      );
      return new ec.X9Parameters(curve, G, n, h);
    }
  };

  // secp256k1 called by Bitcoin's ECKEY
  ec.getSECCurveByName = function(name) {
    if (ec.secNamedCurves[name] == undefined) return null;
    return ec.secNamedCurves[name]();
  };
})();
</script>
<script type="text/javascript">
// secrets.js - by Alexander Stetsyuk - released under MIT License -- Implementation of Shamir Secret Sharing Scheme
(function(exports, global) {
  var defaults = {
    bits: 8, // default number of bits
    radix: 16, // work with HEX by default
    minBits: 3,
    maxBits: 20, // this permits 1,048,575 shares, though going this high is NOT recommended in JS!

    bytesPerChar: 2,
    maxBytesPerChar: 6, // Math.pow(256,7) > Math.pow(2,53)

    // Primitive polynomials (in decimal form) for Galois Fields GF(2^n), for 2 <= n <= 30
    // The index of each term in the array corresponds to the n for that polynomial
    // i.e. to get the polynomial for n=16, use primitivePolynomials[16]
    primitivePolynomials: [
      null,
      null,
      1,
      3,
      3,
      5,
      3,
      3,
      29,
      17,
      9,
      5,
      83,
      27,
      43,
      3,
      45,
      9,
      39,
      39,
      9,
      5,
      3,
      33,
      27,
      9,
      71,
      39,
      9,
      5,
      83
    ],

    // warning for insecure PRNG
    warning:
      "WARNING:\nA secure random number generator was not found.\nUsing Math.random(), which is NOT cryptographically strong!"
  };

  // Protected settings object
  var config = {};

  /** @expose **/
  exports.getConfig = function() {
    return {
      bits: config.bits,
      unsafePRNG: config.unsafePRNG
    };
  };

  function init(bits) {
    if (
      bits &&
      (typeof bits !== "number" ||
        bits % 1 !== 0 ||
        bits < defaults.minBits ||
        bits > defaults.maxBits)
    ) {
      throw new Error(
        "Number of bits must be an integer between " +
          defaults.minBits +
          " and " +
          defaults.maxBits +
          ", inclusive."
      );
    }

    config.radix = defaults.radix;
    config.bits = bits || defaults.bits;
    config.size = Math.pow(2, config.bits);
    config.max = config.size - 1;

    // Construct the exp and log tables for multiplication.
    var logs = [],
      exps = [],
      x = 1,
      primitive = defaults.primitivePolynomials[config.bits];
    for (var i = 0; i < config.size; i++) {
      exps[i] = x;
      logs[x] = i;
      x <<= 1;
      if (x >= config.size) {
        x ^= primitive;
        x &= config.max;
      }
    }

    config.logs = logs;
    config.exps = exps;
  }

  /** @expose **/
  exports.init = init;

  function isInited() {
    if (
      !config.bits ||
      !config.size ||
      !config.max ||
      !config.logs ||
      !config.exps ||
      config.logs.length !== config.size ||
      config.exps.length !== config.size
    ) {
      return false;
    }
    return true;
  }

  // Returns a pseudo-random number generator of the form function(bits){}
  // which should output a random string of 1's and 0's of length `bits`
  function getRNG() {
    var randomBits, crypto;

    function construct(bits, arr, radix, size) {
      var str = "",
        i = 0,
        len = arr.length - 1;
      while (i < len || str.length < bits) {
        str += padLeft(parseInt(arr[i], radix).toString(2), size);
        i++;
      }
      str = str.substr(-bits);
      if ((str.match(/0/g) || []).length === str.length) {
        // all zeros?
        return null;
      } else {
        return str;
      }
    }

    // node.js crypto.randomBytes()
    if (
      typeof require === "function" &&
      (crypto = require("crypto")) &&
      (randomBits = crypto["randomBytes"])
    ) {
      return function(bits) {
        var bytes = Math.ceil(bits / 8),
          str = null;

        while (str === null) {
          str = construct(bits, randomBits(bytes).toString("hex"), 16, 4);
        }
        return str;
      };
    }

    // browsers with window.crypto.getRandomValues()
    if (
      global["crypto"] &&
      typeof global["crypto"]["getRandomValues"] === "function" &&
      typeof global["Uint32Array"] === "function"
    ) {
      crypto = global["crypto"];
      return function(bits) {
        var elems = Math.ceil(bits / 32),
          str = null,
          arr = new global["Uint32Array"](elems);

        while (str === null) {
          crypto["getRandomValues"](arr);
          str = construct(bits, arr, 10, 32);
        }

        return str;
      };
    }

    // A totally insecure RNG!!! (except in Safari)
    // Will produce a warning every time it is called.
    config.unsafePRNG = true;
    warn();

    var bitsPerNum = 32;
    var max = Math.pow(2, bitsPerNum) - 1;
    return function(bits) {
      var elems = Math.ceil(bits / bitsPerNum);
      var arr = [],
        str = null;
      while (str === null) {
        for (var i = 0; i < elems; i++) {
          arr[i] = Math.floor(Math.random() * max + 1);
        }
        str = construct(bits, arr, 10, bitsPerNum);
      }
      return str;
    };
  }

  // Warn about using insecure rng.
  // Called when Math.random() is being used.
  function warn() {
    global["console"]["warn"](defaults.warning);
    if (typeof global["alert"] === "function" && config.alert) {
      global["alert"](defaults.warning);
    }
  }

  // Set the PRNG to use. If no RNG function is supplied, pick a default using getRNG()
  /** @expose **/
  exports.setRNG = function(rng, alert) {
    if (!isInited()) {
      this.init();
    }
    config.unsafePRNG = false;
    rng = rng || getRNG();

    // test the RNG (5 times)
    if (
      typeof rng !== "function" ||
      typeof rng(config.bits) !== "string" ||
      !parseInt(rng(config.bits), 2) ||
      rng(config.bits).length > config.bits ||
      rng(config.bits).length < config.bits
    ) {
      throw new Error(
        "Random number generator is invalid. Supply an RNG of the form function(bits){} that returns a string containing 'bits' number of random 1's and 0's."
      );
    } else {
      config.rng = rng;
    }
    config.alert = !!alert;

    return !!config.unsafePRNG;
  };

  function isSetRNG() {
    return typeof config.rng === "function";
  }

  // Generates a random bits-length number string using the PRNG
  /** @expose **/
  exports.random = function(bits) {
    if (!isSetRNG()) {
      this.setRNG();
    }

    if (typeof bits !== "number" || bits % 1 !== 0 || bits < 2) {
      throw new Error(
        "Number of bits must be an integer greater than 1."
      );
    }

    if (config.unsafePRNG) {
      warn();
    }
    return bin2hex(config.rng(bits));
  };

  // Divides a `secret` number String str expressed in radix `inputRadix` (optional, default 16)
  // into `numShares` shares, each expressed in radix `outputRadix` (optional, default to `inputRadix`),
  // requiring `threshold` number of shares to reconstruct the secret.
  // Optionally, zero-pads the secret to a length that is a multiple of padLength before sharing.
  /** @expose **/
  exports.share = function(
    secret,
    numShares,
    threshold,
    padLength,
    withoutPrefix
  ) {
    if (!isInited()) {
      this.init();
    }
    if (!isSetRNG()) {
      this.setRNG();
    }

    padLength = padLength || 0;

    if (typeof secret !== "string") {
      throw new Error("Secret must be a string.");
    }
    if (
      typeof numShares !== "number" ||
      numShares % 1 !== 0 ||
      numShares < 2
    ) {
      throw new Error(
        "Number of shares must be an integer between 2 and 2^bits-1 (" +
          config.max +
          "), inclusive."
      );
    }
    if (numShares > config.max) {
      var neededBits = Math.ceil(Math.log(numShares + 1) / Math.LN2);
      throw new Error(
        "Number of shares must be an integer between 2 and 2^bits-1 (" +
          config.max +
          "), inclusive. To create " +
          numShares +
          " shares, use at least " +
          neededBits +
          " bits."
      );
    }
    if (
      typeof threshold !== "number" ||
      threshold % 1 !== 0 ||
      threshold < 2
    ) {
      throw new Error(
        "Threshold number of shares must be an integer between 2 and 2^bits-1 (" +
          config.max +
          "), inclusive."
      );
    }
    if (threshold > config.max) {
      var neededBits = Math.ceil(Math.log(threshold + 1) / Math.LN2);
      throw new Error(
        "Threshold number of shares must be an integer between 2 and 2^bits-1 (" +
          config.max +
          "), inclusive.  To use a threshold of " +
          threshold +
          ", use at least " +
          neededBits +
          " bits."
      );
    }
    if (typeof padLength !== "number" || padLength % 1 !== 0) {
      throw new Error(
        "Zero-pad length must be an integer greater than 1."
      );
    }

    if (config.unsafePRNG) {
      warn();
    }

    secret = "1" + hex2bin(secret); // append a 1 so that we can preserve the correct number of leading zeros in our secret
    secret = split(secret, padLength);
    var x = new Array(numShares),
      y = new Array(numShares);
    for (var i = 0, len = secret.length; i < len; i++) {
      var subShares = this._getShares(secret[i], numShares, threshold);
      for (var j = 0; j < numShares; j++) {
        x[j] = x[j] || subShares[j].x.toString(config.radix);
        y[j] = padLeft(subShares[j].y.toString(2)) + (y[j] ? y[j] : "");
      }
    }
    var padding = config.max.toString(config.radix).length;
    if (withoutPrefix) {
      for (var i = 0; i < numShares; i++) {
        x[i] = bin2hex(y[i]);
      }
    } else {
      for (var i = 0; i < numShares; i++) {
        x[i] =
          config.bits.toString(36).toUpperCase() +
          padLeft(x[i], padding) +
          bin2hex(y[i]);
      }
    }

    return x;
  };

  // This is the basic polynomial generation and evaluation function
  // for a `config.bits`-length secret (NOT an arbitrary length)
  // Note: no error-checking at this stage! If `secrets` is NOT
  // a NUMBER less than 2^bits-1, the output will be incorrect!
  /** @expose **/
  exports._getShares = function(secret, numShares, threshold) {
    var shares = [];
    var coeffs = [secret];

    for (var i = 1; i < threshold; i++) {
      coeffs[i] = parseInt(config.rng(config.bits), 2);
    }
    for (var i = 1, len = numShares + 1; i < len; i++) {
      shares[i - 1] = {
        x: i,
        y: horner(i, coeffs)
      };
    }
    return shares;
  };

  // Polynomial evaluation at `x` using Horner's Method
  // TODO: this can possibly be sped up using other methods
  // NOTE: fx=fx * x + coeff[i] ->  exp(log(fx) + log(x)) + coeff[i],
  //       so if fx===0, just set fx to coeff[i] because
  //       using the exp/log form will result in incorrect value
  function horner(x, coeffs) {
    var logx = config.logs[x];
    var fx = 0;
    for (var i = coeffs.length - 1; i >= 0; i--) {
      if (fx === 0) {
        fx = coeffs[i];
        continue;
      }
      fx = config.exps[(logx + config.logs[fx]) % config.max] ^ coeffs[i];
    }
    return fx;
  }

  function inArray(arr, val) {
    for (var i = 0, len = arr.length; i < len; i++) {
      if (arr[i] === val) {
        return true;
      }
    }
    return false;
  }

  function processShare(share) {
    var bits = parseInt(share[0], 36);
    if (
      bits &&
      (typeof bits !== "number" ||
        bits % 1 !== 0 ||
        bits < defaults.minBits ||
        bits > defaults.maxBits)
    ) {
      throw new Error(
        "Number of bits must be an integer between " +
          defaults.minBits +
          " and " +
          defaults.maxBits +
          ", inclusive."
      );
    }

    var max = Math.pow(2, bits) - 1;
    var idLength = max.toString(config.radix).length;

    var id = parseInt(share.substr(1, idLength), config.radix);
    if (typeof id !== "number" || id % 1 !== 0 || id < 1 || id > max) {
      throw new Error(
        "Share id must be an integer between 1 and " +
          config.max +
          ", inclusive."
      );
    }
    share = share.substr(idLength + 1);
    if (!share.length) {
      throw new Error("Invalid share: zero-length share.");
    }
    return {
      bits: bits,
      id: id,
      value: share
    };
  }

  /** @expose **/
  exports._processShare = processShare;

  // Protected method that evaluates the Lagrange interpolation
  // polynomial at x=`at` for individual config.bits-length
  // segments of each share in the `shares` Array.
  // Each share is expressed in base `inputRadix`. The output
  // is expressed in base `outputRadix'
  function combine(at, shares) {
    var setBits,
      share,
      x = [],
      y = [],
      result = "",
      idx;

    for (var i = 0, len = shares.length; i < len; i++) {
      share = processShare(shares[i]);
      if (typeof setBits === "undefined") {
        setBits = share["bits"];
      } else if (share["bits"] !== setBits) {
        throw new Error("Mismatched shares: Different bit settings.");
      }

      if (config.bits !== setBits) {
        init(setBits);
      }

      if (inArray(x, share["id"])) {
        // repeated x value?
        continue;
      }

      idx = x.push(share["id"]) - 1;
      share = split(hex2bin(share["value"]));
      for (var j = 0, len2 = share.length; j < len2; j++) {
        y[j] = y[j] || [];
        y[j][idx] = share[j];
      }
    }

    for (var i = 0, len = y.length; i < len; i++) {
      result = padLeft(lagrange(at, x, y[i]).toString(2)) + result;
    }

    if (at === 0) {
      // reconstructing the secret
      var idx = result.indexOf("1"); //find the first 1
      return bin2hex(result.slice(idx + 1));
    } else {
      // generating a new share
      return bin2hex(result);
    }
  }

  // Combine `shares` Array into the original secret
  /** @expose **/
  exports.combine = function(shares) {
    return combine(0, shares);
  };

  // Generate a new share with id `id` (a number between 1 and 2^bits-1)
  // `id` can be a Number or a String in the default radix (16)
  /** @expose **/
  exports.newShare = function(id, shares) {
    if (typeof id === "string") {
      id = parseInt(id, config.radix);
    }

    var share = processShare(shares[0]);
    var max = Math.pow(2, share["bits"]) - 1;

    if (typeof id !== "number" || id % 1 !== 0 || id < 1 || id > max) {
      throw new Error(
        "Share id must be an integer between 1 and " +
          config.max +
          ", inclusive."
      );
    }

    var padding = max.toString(config.radix).length;
    return (
      config.bits.toString(36).toUpperCase() +
      padLeft(id.toString(config.radix), padding) +
      combine(id, shares)
    );
  };

  // Evaluate the Lagrange interpolation polynomial at x = `at`
  // using x and y Arrays that are of the same length, with
  // corresponding elements constituting points on the polynomial.
  function lagrange(at, x, y) {
    var sum = 0,
      product,
      i,
      j;

    for (var i = 0, len = x.length; i < len; i++) {
      if (!y[i]) {
        continue;
      }

      product = config.logs[y[i]];
      for (var j = 0; j < len; j++) {
        if (i === j) {
          continue;
        }
        if (at === x[j]) {
          // happens when computing a share that is in the list of shares used to compute it
          product = -1; // fix for a zero product term, after which the sum should be sum^0 = sum, not sum^1
          break;
        }
        product =
          (product +
            config.logs[at ^ x[j]] -
            config.logs[x[i] ^ x[j]] +
            config.max) /* to make sure it's not negative */ %
          config.max;
      }

      sum = product === -1 ? sum : sum ^ config.exps[product]; // though exps[-1]= undefined and undefined ^ anything = anything in chrome, this behavior may not hold everywhere, so do the check
    }
    return sum;
  }

  /** @expose **/
  exports._lagrange = lagrange;

  // Splits a number string `bits`-length segments, after first
  // optionally zero-padding it to a length that is a multiple of `padLength.
  // Returns array of integers (each less than 2^bits-1), with each element
  // representing a `bits`-length segment of the input string from right to left,
  // i.e. parts[0] represents the right-most `bits`-length segment of the input string.
  function split(str, padLength) {
    if (padLength) {
      str = padLeft(str, padLength);
    }
    var parts = [];
    for (var i = str.length; i > config.bits; i -= config.bits) {
      parts.push(parseInt(str.slice(i - config.bits, i), 2));
    }
    parts.push(parseInt(str.slice(0, i), 2));
    return parts;
  }

  // Pads a string `str` with zeros on the left so that its length is a multiple of `bits`
  function padLeft(str, bits) {
    bits = bits || config.bits;
    var missing = str.length % bits;
    return (missing ? new Array(bits - missing + 1).join("0") : "") + str;
  }

  function hex2bin(str) {
    var bin = "",
      num;
    for (var i = str.length - 1; i >= 0; i--) {
      num = parseInt(str[i], 16);
      if (isNaN(num)) {
        throw new Error("Invalid hex character.");
      }
      bin = padLeft(num.toString(2), 4) + bin;
    }
    return bin;
  }

  function bin2hex(str) {
    var hex = "",
      num;
    str = padLeft(str, 4);
    for (var i = str.length; i >= 4; i -= 4) {
      num = parseInt(str.slice(i - 4, i), 2);
      if (isNaN(num)) {
        throw new Error("Invalid binary character.");
      }
      hex = num.toString(16) + hex;
    }
    return hex;
  }

  // Converts a given UTF16 character string to the HEX representation.
  // Each character of the input string is represented by
  // `bytesPerChar` bytes in the output string.
  /** @expose **/
  exports.str2hex = function(str, bytesPerChar) {
    if (typeof str !== "string") {
      throw new Error("Input must be a character string.");
    }
    bytesPerChar = bytesPerChar || defaults.bytesPerChar;

    if (
      typeof bytesPerChar !== "number" ||
      bytesPerChar % 1 !== 0 ||
      bytesPerChar < 1 ||
      bytesPerChar > defaults.maxBytesPerChar
    ) {
      throw new Error(
        "Bytes per character must be an integer between 1 and " +
          defaults.maxBytesPerChar +
          ", inclusive."
      );
    }

    var hexChars = 2 * bytesPerChar;
    var max = Math.pow(16, hexChars) - 1;
    var out = "",
      num;
    for (var i = 0, len = str.length; i < len; i++) {
      num = str[i].charCodeAt();
      if (isNaN(num)) {
        throw new Error("Invalid character: " + str[i]);
      } else if (num > max) {
        var neededBytes = Math.ceil(Math.log(num + 1) / Math.log(256));
        throw new Error(
          "Invalid character code (" +
            num +
            "). Maximum allowable is 256^bytes-1 (" +
            max +
            "). To convert this character, use at least " +
            neededBytes +
            " bytes."
        );
      } else {
        out = padLeft(num.toString(16), hexChars) + out;
      }
    }
    return out;
  };

  // Converts a given HEX number string to a UTF16 character string.
  /** @expose **/
  exports.hex2str = function(str, bytesPerChar) {
    if (typeof str !== "string") {
      throw new Error("Input must be a hexadecimal string.");
    }
    bytesPerChar = bytesPerChar || defaults.bytesPerChar;

    if (
      typeof bytesPerChar !== "number" ||
      bytesPerChar % 1 !== 0 ||
      bytesPerChar < 1 ||
      bytesPerChar > defaults.maxBytesPerChar
    ) {
      throw new Error(
        "Bytes per character must be an integer between 1 and " +
          defaults.maxBytesPerChar +
          ", inclusive."
      );
    }

    var hexChars = 2 * bytesPerChar;
    var out = "";
    str = padLeft(str, hexChars);
    for (var i = 0, len = str.length; i < len; i += hexChars) {
      out =
        String.fromCharCode(parseInt(str.slice(i, i + hexChars), 16)) +
        out;
    }
    return out;
  };

  // by default, initialize without an RNG
  exports.init();
})(
  typeof module !== "undefined" && module["exports"]
    ? module["exports"]
    : (window["secrets"] = {}),
  typeof GLOBAL !== "undefined" ? GLOBAL : window
);
</script>
<script type="text/javascript">
// Upstream 'BigInteger' here:
// Original Author: http://www-cs-students.stanford.edu/~tjw/jsbn/
// Follows 'jsbn' on Github: https://github.com/jasondavies/jsbn
// Review and Testing: https://github.com/cryptocoinjs/bigi/
/*!
 * Basic JavaScript BN library - subset useful for RSA encryption. v1.4
 *
 * Copyright (c) 2005  Tom Wu
 * All Rights Reserved.
 * BSD License
 * http://www-cs-students.stanford.edu/~tjw/jsbn/LICENSE
 *
 * Copyright Stephan Thomas
 * Copyright pointbiz
 */

(function() {
  // (public) Constructor function of Global BigInteger object
  var BigInteger = (window.BigInteger = function BigInteger(a, b, c) {
    if (!(this instanceof BigInteger)) return new BigInteger(a, b, c);

    if (a != null)
      if ("number" == typeof a) this.fromNumber(a, b, c);
      else if (b == null && "string" != typeof a) this.fromString(a, 256);
      else this.fromString(a, b);
  });

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = (canary & 0xffffff) == 0xefcafe;

  // return new, unset BigInteger
  function nbi() {
    return new BigInteger(null);
  }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i, x, w, j, c, n) {
    while (--n >= 0) {
      var v = x * this[i++] + w[j] + c;
      c = Math.floor(v / 0x4000000);
      w[j++] = v & 0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i, x, w, j, c, n) {
    var xl = x & 0x7fff,
      xh = x >> 15;
    while (--n >= 0) {
      var l = this[i] & 0x7fff;
      var h = this[i++] >> 15;
      var m = xh * l + h * xl;
      l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);
      c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
      w[j++] = l & 0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i, x, w, j, c, n) {
    var xl = x & 0x3fff,
      xh = x >> 14;
    while (--n >= 0) {
      var l = this[i] & 0x3fff;
      var h = this[i++] >> 14;
      var m = xh * l + h * xl;
      l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
      c = (l >> 28) + (m >> 14) + xh * h;
      w[j++] = l & 0xfffffff;
    }
    return c;
  }
  if (j_lm && navigator.appName == "Microsoft Internet Explorer") {
    BigInteger.prototype.am = am2;
    dbits = 30;
  } else if (j_lm && navigator.appName != "Netscape") {
    BigInteger.prototype.am = am1;
    dbits = 26;
  } else {
    // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = (1 << dbits) - 1;
  BigInteger.prototype.DV = 1 << dbits;

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2, BI_FP);
  BigInteger.prototype.F1 = BI_FP - dbits;
  BigInteger.prototype.F2 = 2 * dbits - BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr, vv;
  rr = "0".charCodeAt(0);
  for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) {
    return BI_RM.charAt(n);
  }

  function intAt(s, i) {
    var c = BI_RC[s.charCodeAt(i)];
    return c == null ? -1 : c;
  }

  // return bigint initialized to value
  function nbv(i) {
    var r = nbi();
    r.fromInt(i);
    return r;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1,
      t;
    if ((t = x >>> 16) != 0) {
      x = t;
      r += 16;
    }
    if ((t = x >> 8) != 0) {
      x = t;
      r += 8;
    }
    if ((t = x >> 4) != 0) {
      x = t;
      r += 4;
    }
    if ((t = x >> 2) != 0) {
      x = t;
      r += 2;
    }
    if ((t = x >> 1) != 0) {
      x = t;
      r += 1;
    }
    return r;
  }

  // (protected) copy this to r
  BigInteger.prototype.copyTo = function(r) {
    for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  };

  // (protected) set from integer value x, -DV <= x < DV
  BigInteger.prototype.fromInt = function(x) {
    this.t = 1;
    this.s = x < 0 ? -1 : 0;
    if (x > 0) this[0] = x;
    else if (x < -1) this[0] = x + this.DV;
    else this.t = 0;
  };

  // (protected) set from string and radix
  BigInteger.prototype.fromString = function(s, b) {
    var k;
    if (b == 16) k = 4;
    else if (b == 8) k = 3;
    else if (b == 256) k = 8;
    // byte array
    else if (b == 2) k = 1;
    else if (b == 32) k = 5;
    else if (b == 4) k = 2;
    else {
      this.fromRadix(s, b);
      return;
    }
    this.t = 0;
    this.s = 0;
    var i = s.length,
      mi = false,
      sh = 0;
    while (--i >= 0) {
      var x = k == 8 ? s[i] & 0xff : intAt(s, i);
      if (x < 0) {
        if (s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if (sh == 0) this[this.t++] = x;
      else if (sh + k > this.DB) {
        this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;
        this[this.t++] = x >> (this.DB - sh);
      } else this[this.t - 1] |= x << sh;
      sh += k;
      if (sh >= this.DB) sh -= this.DB;
    }
    if (k == 8 && (s[0] & 0x80) != 0) {
      this.s = -1;
      if (sh > 0) this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;
    }
    this.clamp();
    if (mi) BigInteger.ZERO.subTo(this, this);
  };

  // (protected) clamp off excess high words
  BigInteger.prototype.clamp = function() {
    var c = this.s & this.DM;
    while (this.t > 0 && this[this.t - 1] == c) --this.t;
  };

  // (protected) r = this << n*DB
  BigInteger.prototype.dlShiftTo = function(n, r) {
    var i;
    for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];
    for (i = n - 1; i >= 0; --i) r[i] = 0;
    r.t = this.t + n;
    r.s = this.s;
  };

  // (protected) r = this >> n*DB
  BigInteger.prototype.drShiftTo = function(n, r) {
    for (var i = n; i < this.t; ++i) r[i - n] = this[i];
    r.t = Math.max(this.t - n, 0);
    r.s = this.s;
  };

  // (protected) r = this << n
  BigInteger.prototype.lShiftTo = function(n, r) {
    var bs = n % this.DB;
    var cbs = this.DB - bs;
    var bm = (1 << cbs) - 1;
    var ds = Math.floor(n / this.DB),
      c = (this.s << bs) & this.DM,
      i;
    for (i = this.t - 1; i >= 0; --i) {
      r[i + ds + 1] = (this[i] >> cbs) | c;
      c = (this[i] & bm) << bs;
    }
    for (i = ds - 1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t + ds + 1;
    r.s = this.s;
    r.clamp();
  };

  // (protected) r = this >> n
  BigInteger.prototype.rShiftTo = function(n, r) {
    r.s = this.s;
    var ds = Math.floor(n / this.DB);
    if (ds >= this.t) {
      r.t = 0;
      return;
    }
    var bs = n % this.DB;
    var cbs = this.DB - bs;
    var bm = (1 << bs) - 1;
    r[0] = this[ds] >> bs;
    for (var i = ds + 1; i < this.t; ++i) {
      r[i - ds - 1] |= (this[i] & bm) << cbs;
      r[i - ds] = this[i] >> bs;
    }
    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
    r.t = this.t - ds;
    r.clamp();
  };

  // (protected) r = this - a
  BigInteger.prototype.subTo = function(a, r) {
    var i = 0,
      c = 0,
      m = Math.min(a.t, this.t);
    while (i < m) {
      c += this[i] - a[i];
      r[i++] = c & this.DM;
      c >>= this.DB;
    }
    if (a.t < this.t) {
      c -= a.s;
      while (i < this.t) {
        c += this[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }
      c += this.s;
    } else {
      c += this.s;
      while (i < a.t) {
        c -= a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = c < 0 ? -1 : 0;
    if (c < -1) r[i++] = this.DV + c;
    else if (c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  };

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  BigInteger.prototype.multiplyTo = function(a, r) {
    var x = this.abs(),
      y = a.abs();
    var i = x.t;
    r.t = i + y.t;
    while (--i >= 0) r[i] = 0;
    for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
    r.s = 0;
    r.clamp();
    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
  };

  // (protected) r = this^2, r != this (HAC 14.16)
  BigInteger.prototype.squareTo = function(r) {
    var x = this.abs();
    var i = (r.t = 2 * x.t);
    while (--i >= 0) r[i] = 0;
    for (i = 0; i < x.t - 1; ++i) {
      var c = x.am(i, x[i], r, 2 * i, 0, 1);
      if (
        (r[i + x.t] += x.am(
          i + 1,
          2 * x[i],
          r,
          2 * i + 1,
          c,
          x.t - i - 1
        )) >= x.DV
      ) {
        r[i + x.t] -= x.DV;
        r[i + x.t + 1] = 1;
      }
    }
    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
    r.s = 0;
    r.clamp();
  };

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  BigInteger.prototype.divRemTo = function(m, q, r) {
    var pm = m.abs();
    if (pm.t <= 0) return;
    var pt = this.abs();
    if (pt.t < pm.t) {
      if (q != null) q.fromInt(0);
      if (r != null) this.copyTo(r);
      return;
    }
    if (r == null) r = nbi();
    var y = nbi(),
      ts = this.s,
      ms = m.s;
    var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus
    if (nsh > 0) {
      pm.lShiftTo(nsh, y);
      pt.lShiftTo(nsh, r);
    } else {
      pm.copyTo(y);
      pt.copyTo(r);
    }
    var ys = y.t;
    var y0 = y[ys - 1];
    if (y0 == 0) return;
    var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
    var d1 = this.FV / yt,
      d2 = (1 << this.F1) / yt,
      e = 1 << this.F2;
    var i = r.t,
      j = i - ys,
      t = q == null ? nbi() : q;
    y.dlShiftTo(j, t);
    if (r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t, r);
    }
    BigInteger.ONE.dlShiftTo(ys, t);
    t.subTo(y, y); // "negative" y so we can replace sub with am later
    while (y.t < ys) y[y.t++] = 0;
    while (--j >= 0) {
      // Estimate quotient digit
      var qd =
        r[--i] == y0
          ? this.DM
          : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
      if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
        // Try it out
        y.dlShiftTo(j, t);
        r.subTo(t, r);
        while (r[i] < --qd) r.subTo(t, r);
      }
    }
    if (q != null) {
      r.drShiftTo(ys, q);
      if (ts != ms) BigInteger.ZERO.subTo(q, q);
    }
    r.t = ys;
    r.clamp();
    if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder
    if (ts < 0) BigInteger.ZERO.subTo(r, r);
  };

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  BigInteger.prototype.invDigit = function() {
    if (this.t < 1) return 0;
    var x = this[0];
    if ((x & 1) == 0) return 0;
    var y = x & 3; // y == 1/x mod 2^2
    y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4
    y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8
    y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y * (2 - ((x * y) % this.DV))) % this.DV; // y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return y > 0 ? this.DV - y : -y;
  };

  // (protected) true iff this is even
  BigInteger.prototype.isEven = function() {
    return (this.t > 0 ? this[0] & 1 : this.s) == 0;
  };

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  BigInteger.prototype.exp = function(e, z) {
    if (e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(),
      r2 = nbi(),
      g = z.convert(this),
      i = nbits(e) - 1;
    g.copyTo(r);
    while (--i >= 0) {
      z.sqrTo(r, r2);
      if ((e & (1 << i)) > 0) z.mulTo(r2, g, r);
      else {
        var t = r;
        r = r2;
        r2 = t;
      }
    }
    return z.revert(r);
  };

  // (public) return string representation in given radix
  BigInteger.prototype.toString = function(b) {
    if (this.s < 0) return "-" + this.negate().toString(b);
    var k;
    if (b == 16) k = 4;
    else if (b == 8) k = 3;
    else if (b == 2) k = 1;
    else if (b == 32) k = 5;
    else if (b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1 << k) - 1,
      d,
      m = false,
      r = "",
      i = this.t;
    var p = this.DB - ((i * this.DB) % k);
    if (i-- > 0) {
      if (p < this.DB && (d = this[i] >> p) > 0) {
        m = true;
        r = int2char(d);
      }
      while (i >= 0) {
        if (p < k) {
          d = (this[i] & ((1 << p) - 1)) << (k - p);
          d |= this[--i] >> (p += this.DB - k);
        } else {
          d = (this[i] >> (p -= k)) & km;
          if (p <= 0) {
            p += this.DB;
            --i;
          }
        }
        if (d > 0) m = true;
        if (m) r += int2char(d);
      }
    }
    return m ? r : "0";
  };

  // (public) -this
  BigInteger.prototype.negate = function() {
    var r = nbi();
    BigInteger.ZERO.subTo(this, r);
    return r;
  };

  // (public) |this|
  BigInteger.prototype.abs = function() {
    return this.s < 0 ? this.negate() : this;
  };

  // (public) return + if this > a, - if this < a, 0 if equal
  BigInteger.prototype.compareTo = function(a) {
    var r = this.s - a.s;
    if (r != 0) return r;
    var i = this.t;
    r = i - a.t;
    if (r != 0) return this.s < 0 ? -r : r;
    while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;
    return 0;
  };

  // (public) return the number of bits in "this"
  BigInteger.prototype.bitLength = function() {
    if (this.t <= 0) return 0;
    return (
      this.DB * (this.t - 1) +
      nbits(this[this.t - 1] ^ (this.s & this.DM))
    );
  };

  // (public) this mod a
  BigInteger.prototype.mod = function(a) {
    var r = nbi();
    this.abs().divRemTo(a, null, r);
    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
    return r;
  };

  // (public) this^e % m, 0 <= e < 2^32
  BigInteger.prototype.modPowInt = function(e, m) {
    var z;
    if (e < 256 || m.isEven()) z = new Classic(m);
    else z = new Montgomery(m);
    return this.exp(e, z);
  };

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // Copyright (c) 2005-2009  Tom Wu
  // All Rights Reserved.
  // See "LICENSE" for details.
  // Extended JavaScript BN functions, required for RSA private ops.
  // Version 1.1: new BigInteger("0", 10) returns "proper" zero
  // Version 1.2: square() API, isProbablePrime fix

  // return index of lowest 1-bit in x, x < 2^31
  function lbit(x) {
    if (x == 0) return -1;
    var r = 0;
    if ((x & 0xffff) == 0) {
      x >>= 16;
      r += 16;
    }
    if ((x & 0xff) == 0) {
      x >>= 8;
      r += 8;
    }
    if ((x & 0xf) == 0) {
      x >>= 4;
      r += 4;
    }
    if ((x & 3) == 0) {
      x >>= 2;
      r += 2;
    }
    if ((x & 1) == 0) ++r;
    return r;
  }

  // return number of 1 bits in x
  function cbit(x) {
    var r = 0;
    while (x != 0) {
      x &= x - 1;
      ++r;
    }
    return r;
  }

  var lowprimes = [
    2,
    3,
    5,
    7,
    11,
    13,
    17,
    19,
    23,
    29,
    31,
    37,
    41,
    43,
    47,
    53,
    59,
    61,
    67,
    71,
    73,
    79,
    83,
    89,
    97,
    101,
    103,
    107,
    109,
    113,
    127,
    131,
    137,
    139,
    149,
    151,
    157,
    163,
    167,
    173,
    179,
    181,
    191,
    193,
    197,
    199,
    211,
    223,
    227,
    229,
    233,
    239,
    241,
    251,
    257,
    263,
    269,
    271,
    277,
    281,
    283,
    293,
    307,
    311,
    313,
    317,
    331,
    337,
    347,
    349,
    353,
    359,
    367,
    373,
    379,
    383,
    389,
    397,
    401,
    409,
    419,
    421,
    431,
    433,
    439,
    443,
    449,
    457,
    461,
    463,
    467,
    479,
    487,
    491,
    499,
    503,
    509,
    521,
    523,
    541,
    547,
    557,
    563,
    569,
    571,
    577,
    587,
    593,
    599,
    601,
    607,
    613,
    617,
    619,
    631,
    641,
    643,
    647,
    653,
    659,
    661,
    673,
    677,
    683,
    691,
    701,
    709,
    719,
    727,
    733,
    739,
    743,
    751,
    757,
    761,
    769,
    773,
    787,
    797,
    809,
    811,
    821,
    823,
    827,
    829,
    839,
    853,
    857,
    859,
    863,
    877,
    881,
    883,
    887,
    907,
    911,
    919,
    929,
    937,
    941,
    947,
    953,
    967,
    971,
    977,
    983,
    991,
    997
  ];
  var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];

  // (protected) return x s.t. r^x < DV
  BigInteger.prototype.chunkSize = function(r) {
    return Math.floor((Math.LN2 * this.DB) / Math.log(r));
  };

  // (protected) convert to radix string
  BigInteger.prototype.toRadix = function(b) {
    if (b == null) b = 10;
    if (this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b, cs);
    var d = nbv(a),
      y = nbi(),
      z = nbi(),
      r = "";
    this.divRemTo(d, y, z);
    while (y.signum() > 0) {
      r = (a + z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d, y, z);
    }
    return z.intValue().toString(b) + r;
  };

  // (protected) convert from radix string
  BigInteger.prototype.fromRadix = function(s, b) {
    this.fromInt(0);
    if (b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b, cs),
      mi = false,
      j = 0,
      w = 0;
    for (var i = 0; i < s.length; ++i) {
      var x = intAt(s, i);
      if (x < 0) {
        if (s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b * w + x;
      if (++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w, 0);
        j = 0;
        w = 0;
      }
    }
    if (j > 0) {
      this.dMultiply(Math.pow(b, j));
      this.dAddOffset(w, 0);
    }
    if (mi) BigInteger.ZERO.subTo(this, this);
  };

  // (protected) alternate constructor
  BigInteger.prototype.fromNumber = function(a, b, c) {
    if ("number" == typeof b) {
      // new BigInteger(int,int,RNG)
      if (a < 2) this.fromInt(1);
      else {
        this.fromNumber(a, c);
        if (!this.testBit(a - 1))
          // force MSB set
          this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);
        if (this.isEven()) this.dAddOffset(1, 0); // force odd
        while (!this.isProbablePrime(b)) {
          this.dAddOffset(2, 0);
          if (this.bitLength() > a)
            this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);
        }
      }
    } else {
      // new BigInteger(int,RNG)
      var x = new Array(),
        t = a & 7;
      x.length = (a >> 3) + 1;
      b.nextBytes(x);
      if (t > 0) x[0] &= (1 << t) - 1;
      else x[0] = 0;
      this.fromString(x, 256);
    }
  };

  // (protected) r = this op a (bitwise)
  BigInteger.prototype.bitwiseTo = function(a, op, r) {
    var i,
      f,
      m = Math.min(a.t, this.t);
    for (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);
    if (a.t < this.t) {
      f = a.s & this.DM;
      for (i = m; i < this.t; ++i) r[i] = op(this[i], f);
      r.t = this.t;
    } else {
      f = this.s & this.DM;
      for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);
      r.t = a.t;
    }
    r.s = op(this.s, a.s);
    r.clamp();
  };

  // (protected) this op (1<<n)
  BigInteger.prototype.changeBit = function(n, op) {
    var r = BigInteger.ONE.shiftLeft(n);
    this.bitwiseTo(r, op, r);
    return r;
  };

  // (protected) r = this + a
  BigInteger.prototype.addTo = function(a, r) {
    var i = 0,
      c = 0,
      m = Math.min(a.t, this.t);
    while (i < m) {
      c += this[i] + a[i];
      r[i++] = c & this.DM;
      c >>= this.DB;
    }
    if (a.t < this.t) {
      c += a.s;
      while (i < this.t) {
        c += this[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }
      c += this.s;
    } else {
      c += this.s;
      while (i < a.t) {
        c += a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = c < 0 ? -1 : 0;
    if (c > 0) r[i++] = c;
    else if (c < -1) r[i++] = this.DV + c;
    r.t = i;
    r.clamp();
  };

  // (protected) this *= n, this >= 0, 1 < n < DV
  BigInteger.prototype.dMultiply = function(n) {
    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
    ++this.t;
    this.clamp();
  };

  // (protected) this += n << w words, this >= 0
  BigInteger.prototype.dAddOffset = function(n, w) {
    if (n == 0) return;
    while (this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while (this[w] >= this.DV) {
      this[w] -= this.DV;
      if (++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  };

  // (protected) r = lower n words of "this * a", a.t <= n
  // "this" should be the larger one if appropriate.
  BigInteger.prototype.multiplyLowerTo = function(a, n, r) {
    var i = Math.min(this.t + a.t, n);
    r.s = 0; // assumes a,this >= 0
    r.t = i;
    while (i > 0) r[--i] = 0;
    var j;
    for (j = r.t - this.t; i < j; ++i)
      r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);
    for (j = Math.min(a.t, n); i < j; ++i)
      this.am(0, a[i], r, i, 0, n - i);
    r.clamp();
  };

  // (protected) r = "this * a" without lower n words, n > 0
  // "this" should be the larger one if appropriate.
  BigInteger.prototype.multiplyUpperTo = function(a, n, r) {
    --n;
    var i = (r.t = this.t + a.t - n);
    r.s = 0; // assumes a,this >= 0
    while (--i >= 0) r[i] = 0;
    for (i = Math.max(n - this.t, 0); i < a.t; ++i)
      r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);
    r.clamp();
    r.drShiftTo(1, r);
  };

  // (protected) this % n, n < 2^26
  BigInteger.prototype.modInt = function(n) {
    if (n <= 0) return 0;
    var d = this.DV % n,
      r = this.s < 0 ? n - 1 : 0;
    if (this.t > 0)
      if (d == 0) r = this[0] % n;
      else
        for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;
    return r;
  };

  // (protected) true if probably prime (HAC 4.24, Miller-Rabin)
  BigInteger.prototype.millerRabin = function(t) {
    var n1 = this.subtract(BigInteger.ONE);
    var k = n1.getLowestSetBit();
    if (k <= 0) return false;
    var r = n1.shiftRight(k);
    t = (t + 1) >> 1;
    if (t > lowprimes.length) t = lowprimes.length;
    var a = nbi();
    for (var i = 0; i < t; ++i) {
      //Pick bases at random, instead of starting at 2
      a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);
      var y = a.modPow(r, this);
      if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
        var j = 1;
        while (j++ < k && y.compareTo(n1) != 0) {
          y = y.modPowInt(2, this);
          if (y.compareTo(BigInteger.ONE) == 0) return false;
        }
        if (y.compareTo(n1) != 0) return false;
      }
    }
    return true;
  };

  // (public)
  BigInteger.prototype.clone = function() {
    var r = nbi();
    this.copyTo(r);
    return r;
  };

  // (public) return value as integer
  BigInteger.prototype.intValue = function() {
    if (this.s < 0) {
      if (this.t == 1) return this[0] - this.DV;
      else if (this.t == 0) return -1;
    } else if (this.t == 1) return this[0];
    else if (this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];
  };

  // (public) return value as byte
  BigInteger.prototype.byteValue = function() {
    return this.t == 0 ? this.s : (this[0] << 24) >> 24;
  };

  // (public) return value as short (assumes DB>=16)
  BigInteger.prototype.shortValue = function() {
    return this.t == 0 ? this.s : (this[0] << 16) >> 16;
  };

  // (public) 0 if this == 0, 1 if this > 0
  BigInteger.prototype.signum = function() {
    if (this.s < 0) return -1;
    else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  };

  // (public) convert to bigendian byte array
  BigInteger.prototype.toByteArray = function() {
    var i = this.t,
      r = new Array();
    r[0] = this.s;
    var p = this.DB - ((i * this.DB) % 8),
      d,
      k = 0;
    if (i-- > 0) {
      if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p)
        r[k++] = d | (this.s << (this.DB - p));
      while (i >= 0) {
        if (p < 8) {
          d = (this[i] & ((1 << p) - 1)) << (8 - p);
          d |= this[--i] >> (p += this.DB - 8);
        } else {
          d = (this[i] >> (p -= 8)) & 0xff;
          if (p <= 0) {
            p += this.DB;
            --i;
          }
        }
        if ((d & 0x80) != 0) d |= -256;
        if (k == 0 && (this.s & 0x80) != (d & 0x80)) ++k;
        if (k > 0 || d != this.s) r[k++] = d;
      }
    }
    return r;
  };

  BigInteger.prototype.equals = function(a) {
    return this.compareTo(a) == 0;
  };
  BigInteger.prototype.min = function(a) {
    return this.compareTo(a) < 0 ? this : a;
  };
  BigInteger.prototype.max = function(a) {
    return this.compareTo(a) > 0 ? this : a;
  };

  // (public) this & a
  function op_and(x, y) {
    return x & y;
  }
  BigInteger.prototype.and = function(a) {
    var r = nbi();
    this.bitwiseTo(a, op_and, r);
    return r;
  };

  // (public) this | a
  function op_or(x, y) {
    return x | y;
  }
  BigInteger.prototype.or = function(a) {
    var r = nbi();
    this.bitwiseTo(a, op_or, r);
    return r;
  };

  // (public) this ^ a
  function op_xor(x, y) {
    return x ^ y;
  }
  BigInteger.prototype.xor = function(a) {
    var r = nbi();
    this.bitwiseTo(a, op_xor, r);
    return r;
  };

  // (public) this & ~a
  function op_andnot(x, y) {
    return x & ~y;
  }
  BigInteger.prototype.andNot = function(a) {
    var r = nbi();
    this.bitwiseTo(a, op_andnot, r);
    return r;
  };

  // (public) ~this
  BigInteger.prototype.not = function() {
    var r = nbi();
    for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];
    r.t = this.t;
    r.s = ~this.s;
    return r;
  };

  // (public) this << n
  BigInteger.prototype.shiftLeft = function(n) {
    var r = nbi();
    if (n < 0) this.rShiftTo(-n, r);
    else this.lShiftTo(n, r);
    return r;
  };

  // (public) this >> n
  BigInteger.prototype.shiftRight = function(n) {
    var r = nbi();
    if (n < 0) this.lShiftTo(-n, r);
    else this.rShiftTo(n, r);
    return r;
  };

  // (public) returns index of lowest 1-bit (or -1 if none)
  BigInteger.prototype.getLowestSetBit = function() {
    for (var i = 0; i < this.t; ++i)
      if (this[i] != 0) return i * this.DB + lbit(this[i]);
    if (this.s < 0) return this.t * this.DB;
    return -1;
  };

  // (public) return number of set bits
  BigInteger.prototype.bitCount = function() {
    var r = 0,
      x = this.s & this.DM;
    for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);
    return r;
  };

  // (public) true iff nth bit is set
  BigInteger.prototype.testBit = function(n) {
    var j = Math.floor(n / this.DB);
    if (j >= this.t) return this.s != 0;
    return (this[j] & (1 << n % this.DB)) != 0;
  };

  // (public) this | (1<<n)
  BigInteger.prototype.setBit = function(n) {
    return this.changeBit(n, op_or);
  };
  // (public) this & ~(1<<n)
  BigInteger.prototype.clearBit = function(n) {
    return this.changeBit(n, op_andnot);
  };
  // (public) this ^ (1<<n)
  BigInteger.prototype.flipBit = function(n) {
    return this.changeBit(n, op_xor);
  };
  // (public) this + a
  BigInteger.prototype.add = function(a) {
    var r = nbi();
    this.addTo(a, r);
    return r;
  };
  // (public) this - a
  BigInteger.prototype.subtract = function(a) {
    var r = nbi();
    this.subTo(a, r);
    return r;
  };
  // (public) this * a
  BigInteger.prototype.multiply = function(a) {
    var r = nbi();
    this.multiplyTo(a, r);
    return r;
  };
  // (public) this / a
  BigInteger.prototype.divide = function(a) {
    var r = nbi();
    this.divRemTo(a, r, null);
    return r;
  };
  // (public) this % a
  BigInteger.prototype.remainder = function(a) {
    var r = nbi();
    this.divRemTo(a, null, r);
    return r;
  };
  // (public) [this/a,this%a]
  BigInteger.prototype.divideAndRemainder = function(a) {
    var q = nbi(),
      r = nbi();
    this.divRemTo(a, q, r);
    return new Array(q, r);
  };

  // (public) this^e % m (HAC 14.85)
  BigInteger.prototype.modPow = function(e, m) {
    var i = e.bitLength(),
      k,
      r = nbv(1),
      z;
    if (i <= 0) return r;
    else if (i < 18) k = 1;
    else if (i < 48) k = 3;
    else if (i < 144) k = 4;
    else if (i < 768) k = 5;
    else k = 6;
    if (i < 8) z = new Classic(m);
    else if (m.isEven()) z = new Barrett(m);
    else z = new Montgomery(m);

    // precomputation
    var g = new Array(),
      n = 3,
      k1 = k - 1,
      km = (1 << k) - 1;
    g[1] = z.convert(this);
    if (k > 1) {
      var g2 = nbi();
      z.sqrTo(g[1], g2);
      while (n <= km) {
        g[n] = nbi();
        z.mulTo(g2, g[n - 2], g[n]);
        n += 2;
      }
    }

    var j = e.t - 1,
      w,
      is1 = true,
      r2 = nbi(),
      t;
    i = nbits(e[j]) - 1;
    while (j >= 0) {
      if (i >= k1) w = (e[j] >> (i - k1)) & km;
      else {
        w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);
        if (j > 0) w |= e[j - 1] >> (this.DB + i - k1);
      }

      n = k;
      while ((w & 1) == 0) {
        w >>= 1;
        --n;
      }
      if ((i -= n) < 0) {
        i += this.DB;
        --j;
      }
      if (is1) {
        // ret == 1, don't bother squaring or multiplying it
        g[w].copyTo(r);
        is1 = false;
      } else {
        while (n > 1) {
          z.sqrTo(r, r2);
          z.sqrTo(r2, r);
          n -= 2;
        }
        if (n > 0) z.sqrTo(r, r2);
        else {
          t = r;
          r = r2;
          r2 = t;
        }
        z.mulTo(r2, g[w], r);
      }

      while (j >= 0 && (e[j] & (1 << i)) == 0) {
        z.sqrTo(r, r2);
        t = r;
        r = r2;
        r2 = t;
        if (--i < 0) {
          i = this.DB - 1;
          --j;
        }
      }
    }
    return z.revert(r);
  };

  // (public) 1/this % m (HAC 14.61)
  BigInteger.prototype.modInverse = function(m) {
    var ac = m.isEven();
    if (this.signum() === 0) throw new Error("division by zero");
    if ((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;
    var u = m.clone(),
      v = this.clone();
    var a = nbv(1),
      b = nbv(0),
      c = nbv(0),
      d = nbv(1);
    while (u.signum() != 0) {
      while (u.isEven()) {
        u.rShiftTo(1, u);
        if (ac) {
          if (!a.isEven() || !b.isEven()) {
            a.addTo(this, a);
            b.subTo(m, b);
          }
          a.rShiftTo(1, a);
        } else if (!b.isEven()) b.subTo(m, b);
        b.rShiftTo(1, b);
      }
      while (v.isEven()) {
        v.rShiftTo(1, v);
        if (ac) {
          if (!c.isEven() || !d.isEven()) {
            c.addTo(this, c);
            d.subTo(m, d);
          }
          c.rShiftTo(1, c);
        } else if (!d.isEven()) d.subTo(m, d);
        d.rShiftTo(1, d);
      }
      if (u.compareTo(v) >= 0) {
        u.subTo(v, u);
        if (ac) a.subTo(c, a);
        b.subTo(d, b);
      } else {
        v.subTo(u, v);
        if (ac) c.subTo(a, c);
        d.subTo(b, d);
      }
    }
    if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
    while (d.compareTo(m) >= 0) d.subTo(m, d);
    while (d.signum() < 0) d.addTo(m, d);
    return d;
  };

  // (public) this^e
  BigInteger.prototype.pow = function(e) {
    return this.exp(e, new NullExp());
  };

  // (public) gcd(this,a) (HAC 14.54)
  BigInteger.prototype.gcd = function(a) {
    var x = this.s < 0 ? this.negate() : this.clone();
    var y = a.s < 0 ? a.negate() : a.clone();
    if (x.compareTo(y) < 0) {
      var t = x;
      x = y;
      y = t;
    }
    var i = x.getLowestSetBit(),
      g = y.getLowestSetBit();
    if (g < 0) return x;
    if (i < g) g = i;
    if (g > 0) {
      x.rShiftTo(g, x);
      y.rShiftTo(g, y);
    }
    while (x.signum() > 0) {
      if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);
      if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);
      if (x.compareTo(y) >= 0) {
        x.subTo(y, x);
        x.rShiftTo(1, x);
      } else {
        y.subTo(x, y);
        y.rShiftTo(1, y);
      }
    }
    if (g > 0) y.lShiftTo(g, y);
    return y;
  };

  // (public) test primality with certainty >= 1-.5^t
  BigInteger.prototype.isProbablePrime = function(t) {
    var i,
      x = this.abs();
    if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
      for (i = 0; i < lowprimes.length; ++i)
        if (x[0] == lowprimes[i]) return true;
      return false;
    }
    if (x.isEven()) return false;
    i = 1;
    while (i < lowprimes.length) {
      var m = lowprimes[i],
        j = i + 1;
      while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];
      m = x.modInt(m);
      while (i < j) if (m % lowprimes[i++] == 0) return false;
    }
    return x.millerRabin(t);
  };

  // JSBN-specific extension

  // (public) this^2
  BigInteger.prototype.square = function() {
    var r = nbi();
    this.squareTo(r);
    return r;
  };

  // NOTE: BigInteger interfaces not implemented in jsbn:
  // BigInteger(int signum, byte[] magnitude)
  // double doubleValue()
  // float floatValue()
  // int hashCode()
  // long longValue()
  // static BigInteger valueOf(long val)

  // Copyright Stephan Thomas (start) --- //
  // https://raw.github.com/bitcoinjs/bitcoinjs-lib/07f9d55ccb6abd962efb6befdd37671f85ea4ff9/src/util.js
  // BigInteger monkey patching
  BigInteger.valueOf = nbv;

  /**
   * Returns a byte array representation of the big integer.
   *
   * This returns the absolute of the contained value in big endian
   * form. A value of zero results in an empty array.
   */
  BigInteger.prototype.toByteArrayUnsigned = function() {
    var ba = this.abs().toByteArray();
    if (ba.length) {
      if (ba[0] == 0) {
        ba = ba.slice(1);
      }
      return ba.map(function(v) {
        return v < 0 ? v + 256 : v;
      });
    } else {
      // Empty array, nothing to do
      return ba;
    }
  };

  /**
   * Turns a byte array into a big integer.
   *
   * This function will interpret a byte array as a big integer in big
   * endian notation and ignore leading zeros.
   */
  BigInteger.fromByteArrayUnsigned = function(ba) {
    if (!ba.length) {
      return ba.valueOf(0);
    } else if (ba[0] & 0x80) {
      // Prepend a zero so the BigInteger class doesn't mistake this
      // for a negative integer.
      return new BigInteger([0].concat(ba));
    } else {
      return new BigInteger(ba);
    }
  };

  /**
   * Converts big integer to signed byte representation.
   *
   * The format for this value uses a the most significant bit as a sign
   * bit. If the most significant bit is already occupied by the
   * absolute value, an extra byte is prepended and the sign bit is set
   * there.
   *
   * Examples:
   *
   *      0 =>     0x00
   *      1 =>     0x01
   *     -1 =>     0x81
   *    127 =>     0x7f
   *   -127 =>     0xff
   *    128 =>   0x0080
   *   -128 =>   0x8080
   *    255 =>   0x00ff
   *   -255 =>   0x80ff
   *  16300 =>   0x3fac
   * -16300 =>   0xbfac
   *  62300 => 0x00f35c
   * -62300 => 0x80f35c
   */
  BigInteger.prototype.toByteArraySigned = function() {
    var val = this.abs().toByteArrayUnsigned();
    var neg = this.compareTo(BigInteger.ZERO) < 0;

    if (neg) {
      if (val[0] & 0x80) {
        val.unshift(0x80);
      } else {
        val[0] |= 0x80;
      }
    } else {
      if (val[0] & 0x80) {
        val.unshift(0x00);
      }
    }

    return val;
  };

  /**
   * Parse a signed big integer byte representation.
   *
   * For details on the format please see BigInteger.toByteArraySigned.
   */
  BigInteger.fromByteArraySigned = function(ba) {
    // Check for negative value
    if (ba[0] & 0x80) {
      // Remove sign bit
      ba[0] &= 0x7f;

      return BigInteger.fromByteArrayUnsigned(ba).negate();
    } else {
      return BigInteger.fromByteArrayUnsigned(ba);
    }
  };
  // Copyright Stephan Thomas (end) --- //

  // ****** REDUCTION ******* //

  // Modular reduction using "classic" algorithm
  var Classic = (window.Classic = function Classic(m) {
    this.m = m;
  });
  Classic.prototype.convert = function(x) {
    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  };
  Classic.prototype.revert = function(x) {
    return x;
  };
  Classic.prototype.reduce = function(x) {
    x.divRemTo(this.m, null, x);
  };
  Classic.prototype.mulTo = function(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
  };
  Classic.prototype.sqrTo = function(x, r) {
    x.squareTo(r);
    this.reduce(r);
  };

  // Montgomery reduction
  var Montgomery = (window.Montgomery = function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp & 0x7fff;
    this.mph = this.mp >> 15;
    this.um = (1 << (m.DB - 15)) - 1;
    this.mt2 = 2 * m.t;
  });
  // xR mod m
  Montgomery.prototype.convert = function(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t, r);
    r.divRemTo(this.m, null, r);
    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
    return r;
  };
  // x/R mod m
  Montgomery.prototype.revert = function(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  };
  // x = x/R mod m (HAC 14.32)
  Montgomery.prototype.reduce = function(x) {
    while (
      x.t <= this.mt2 // pad x so am has enough room later
    )
      x[x.t++] = 0;
    for (var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i] & 0x7fff;
      var u0 =
        (j * this.mpl +
          (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) &
        x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i + this.m.t;
      x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
      // propagate carry
      while (x[j] >= x.DV) {
        x[j] -= x.DV;
        x[++j]++;
      }
    }
    x.clamp();
    x.drShiftTo(this.m.t, x);
    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
  };
  // r = "xy/R mod m"; x,y != r
  Montgomery.prototype.mulTo = function(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
  };
  // r = "x^2/R mod m"; x != r
  Montgomery.prototype.sqrTo = function(x, r) {
    x.squareTo(r);
    this.reduce(r);
  };

  // A "null" reducer
  var NullExp = (window.NullExp = function NullExp() {});
  NullExp.prototype.convert = function(x) {
    return x;
  };
  NullExp.prototype.revert = function(x) {
    return x;
  };
  NullExp.prototype.mulTo = function(x, y, r) {
    x.multiplyTo(y, r);
  };
  NullExp.prototype.sqrTo = function(x, r) {
    x.squareTo(r);
  };

  // Barrett modular reduction
  var Barrett = (window.Barrett = function Barrett(m) {
    // setup Barrett
    this.r2 = nbi();
    this.q3 = nbi();
    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
    this.mu = this.r2.divide(m);
    this.m = m;
  });
  Barrett.prototype.convert = function(x) {
    if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);
    else if (x.compareTo(this.m) < 0) return x;
    else {
      var r = nbi();
      x.copyTo(r);
      this.reduce(r);
      return r;
    }
  };
  Barrett.prototype.revert = function(x) {
    return x;
  };
  // x = x mod m (HAC 14.42)
  Barrett.prototype.reduce = function(x) {
    x.drShiftTo(this.m.t - 1, this.r2);
    if (x.t > this.m.t + 1) {
      x.t = this.m.t + 1;
      x.clamp();
    }
    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
    while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);
    x.subTo(this.r2, x);
    while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
  };
  // r = x*y mod m; x,y != r
  Barrett.prototype.mulTo = function(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
  };
  // r = x^2 mod m; x != r
  Barrett.prototype.sqrTo = function(x, r) {
    x.squareTo(r);
    this.reduce(r);
  };
})();
</script>
<script type="text/javascript">
//---------------------------------------------------------------------
// QRCode for JavaScript
//
// Copyright (c) 2009 Kazuhiko Arase
//
// URL: http://www.d-project.com/
//
// Licensed under the MIT license:
//   http://www.opensource.org/licenses/mit-license.php
//
// The word "QR Code" is registered trademark of
// DENSO WAVE INCORPORATED
//   http://www.denso-wave.com/qrcode/faqpatent-e.html
//
//---------------------------------------------------------------------

(function() {
  //---------------------------------------------------------------------
  // QRCode
  //---------------------------------------------------------------------

  var QRCode = (window.QRCode = function(typeNumber, errorCorrectLevel) {
    this.typeNumber = typeNumber;
    this.errorCorrectLevel = errorCorrectLevel;
    this.modules = null;
    this.moduleCount = 0;
    this.dataCache = null;
    this.dataList = new Array();
  });

  QRCode.prototype = {
    addData: function(data) {
      var newData = new QRCode.QR8bitByte(data);
      this.dataList.push(newData);
      this.dataCache = null;
    },

    isDark: function(row, col) {
      if (
        row < 0 ||
        this.moduleCount <= row ||
        col < 0 ||
        this.moduleCount <= col
      ) {
        throw new Error(row + "," + col);
      }
      return this.modules[row][col];
    },

    getModuleCount: function() {
      return this.moduleCount;
    },

    make: function() {
      this.makeImpl(false, this.getBestMaskPattern());
    },

    makeImpl: function(test, maskPattern) {
      this.moduleCount = this.typeNumber * 4 + 17;
      this.modules = new Array(this.moduleCount);

      for (var row = 0; row < this.moduleCount; row++) {
        this.modules[row] = new Array(this.moduleCount);

        for (var col = 0; col < this.moduleCount; col++) {
          this.modules[row][col] = null; //(col + row) % 3;
        }
      }

      this.setupPositionProbePattern(0, 0);
      this.setupPositionProbePattern(this.moduleCount - 7, 0);
      this.setupPositionProbePattern(0, this.moduleCount - 7);
      this.setupPositionAdjustPattern();
      this.setupTimingPattern();
      this.setupTypeInfo(test, maskPattern);

      if (this.typeNumber >= 7) {
        this.setupTypeNumber(test);
      }

      if (this.dataCache == null) {
        this.dataCache = QRCode.createData(
          this.typeNumber,
          this.errorCorrectLevel,
          this.dataList
        );
      }

      this.mapData(this.dataCache, maskPattern);
    },

    setupPositionProbePattern: function(row, col) {
      for (var r = -1; r <= 7; r++) {
        if (row + r <= -1 || this.moduleCount <= row + r) continue;

        for (var c = -1; c <= 7; c++) {
          if (col + c <= -1 || this.moduleCount <= col + c) continue;

          if (
            (0 <= r && r <= 6 && (c == 0 || c == 6)) ||
            (0 <= c && c <= 6 && (r == 0 || r == 6)) ||
            (2 <= r && r <= 4 && 2 <= c && c <= 4)
          ) {
            this.modules[row + r][col + c] = true;
          } else {
            this.modules[row + r][col + c] = false;
          }
        }
      }
    },

    getBestMaskPattern: function() {
      var minLostPoint = 0;
      var pattern = 0;

      for (var i = 0; i < 8; i++) {
        this.makeImpl(true, i);

        var lostPoint = QRCode.Util.getLostPoint(this);

        if (i == 0 || minLostPoint > lostPoint) {
          minLostPoint = lostPoint;
          pattern = i;
        }
      }

      return pattern;
    },

    createMovieClip: function(target_mc, instance_name, depth) {
      var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);
      var cs = 1;

      this.make();

      for (var row = 0; row < this.modules.length; row++) {
        var y = row * cs;

        for (var col = 0; col < this.modules[row].length; col++) {
          var x = col * cs;
          var dark = this.modules[row][col];

          if (dark) {
            qr_mc.beginFill(0, 100);
            qr_mc.moveTo(x, y);
            qr_mc.lineTo(x + cs, y);
            qr_mc.lineTo(x + cs, y + cs);
            qr_mc.lineTo(x, y + cs);
            qr_mc.endFill();
          }
        }
      }

      return qr_mc;
    },

    setupTimingPattern: function() {
      for (var r = 8; r < this.moduleCount - 8; r++) {
        if (this.modules[r][6] != null) {
          continue;
        }
        this.modules[r][6] = r % 2 == 0;
      }

      for (var c = 8; c < this.moduleCount - 8; c++) {
        if (this.modules[6][c] != null) {
          continue;
        }
        this.modules[6][c] = c % 2 == 0;
      }
    },

    setupPositionAdjustPattern: function() {
      var pos = QRCode.Util.getPatternPosition(this.typeNumber);

      for (var i = 0; i < pos.length; i++) {
        for (var j = 0; j < pos.length; j++) {
          var row = pos[i];
          var col = pos[j];

          if (this.modules[row][col] != null) {
            continue;
          }

          for (var r = -2; r <= 2; r++) {
            for (var c = -2; c <= 2; c++) {
              if (
                r == -2 ||
                r == 2 ||
                c == -2 ||
                c == 2 ||
                (r == 0 && c == 0)
              ) {
                this.modules[row + r][col + c] = true;
              } else {
                this.modules[row + r][col + c] = false;
              }
            }
          }
        }
      }
    },

    setupTypeNumber: function(test) {
      var bits = QRCode.Util.getBCHTypeNumber(this.typeNumber);

      for (var i = 0; i < 18; i++) {
        var mod = !test && ((bits >> i) & 1) == 1;
        this.modules[Math.floor(i / 3)][
          (i % 3) + this.moduleCount - 8 - 3
        ] = mod;
      }

      for (var i = 0; i < 18; i++) {
        var mod = !test && ((bits >> i) & 1) == 1;
        this.modules[(i % 3) + this.moduleCount - 8 - 3][
          Math.floor(i / 3)
        ] = mod;
      }
    },

    setupTypeInfo: function(test, maskPattern) {
      var data = (this.errorCorrectLevel << 3) | maskPattern;
      var bits = QRCode.Util.getBCHTypeInfo(data);

      // vertical
      for (var i = 0; i < 15; i++) {
        var mod = !test && ((bits >> i) & 1) == 1;

        if (i < 6) {
          this.modules[i][8] = mod;
        } else if (i < 8) {
          this.modules[i + 1][8] = mod;
        } else {
          this.modules[this.moduleCount - 15 + i][8] = mod;
        }
      }

      // horizontal
      for (var i = 0; i < 15; i++) {
        var mod = !test && ((bits >> i) & 1) == 1;

        if (i < 8) {
          this.modules[8][this.moduleCount - i - 1] = mod;
        } else if (i < 9) {
          this.modules[8][15 - i - 1 + 1] = mod;
        } else {
          this.modules[8][15 - i - 1] = mod;
        }
      }

      // fixed module
      this.modules[this.moduleCount - 8][8] = !test;
    },

    mapData: function(data, maskPattern) {
      var inc = -1;
      var row = this.moduleCount - 1;
      var bitIndex = 7;
      var byteIndex = 0;

      for (var col = this.moduleCount - 1; col > 0; col -= 2) {
        if (col == 6) col--;

        while (true) {
          for (var c = 0; c < 2; c++) {
            if (this.modules[row][col - c] == null) {
              var dark = false;

              if (byteIndex < data.length) {
                dark = ((data[byteIndex] >>> bitIndex) & 1) == 1;
              }

              var mask = QRCode.Util.getMask(maskPattern, row, col - c);

              if (mask) {
                dark = !dark;
              }

              this.modules[row][col - c] = dark;
              bitIndex--;

              if (bitIndex == -1) {
                byteIndex++;
                bitIndex = 7;
              }
            }
          }

          row += inc;

          if (row < 0 || this.moduleCount <= row) {
            row -= inc;
            inc = -inc;
            break;
          }
        }
      }
    }
  };

  QRCode.PAD0 = 0xec;
  QRCode.PAD1 = 0x11;

  QRCode.createData = function(typeNumber, errorCorrectLevel, dataList) {
    var rsBlocks = QRCode.RSBlock.getRSBlocks(
      typeNumber,
      errorCorrectLevel
    );

    var buffer = new QRCode.BitBuffer();

    for (var i = 0; i < dataList.length; i++) {
      var data = dataList[i];
      buffer.put(data.mode, 4);
      buffer.put(
        data.getLength(),
        QRCode.Util.getLengthInBits(data.mode, typeNumber)
      );
      data.write(buffer);
    }

    // calc num max data.
    var totalDataCount = 0;
    for (var i = 0; i < rsBlocks.length; i++) {
      totalDataCount += rsBlocks[i].dataCount;
    }

    if (buffer.getLengthInBits() > totalDataCount * 8) {
      throw new Error(
        "code length overflow. (" +
          buffer.getLengthInBits() +
          ">" +
          totalDataCount * 8 +
          ")"
      );
    }

    // end code
    if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {
      buffer.put(0, 4);
    }

    // padding
    while (buffer.getLengthInBits() % 8 != 0) {
      buffer.putBit(false);
    }

    // padding
    while (true) {
      if (buffer.getLengthInBits() >= totalDataCount * 8) {
        break;
      }
      buffer.put(QRCode.PAD0, 8);

      if (buffer.getLengthInBits() >= totalDataCount * 8) {
        break;
      }
      buffer.put(QRCode.PAD1, 8);
    }

    return QRCode.createBytes(buffer, rsBlocks);
  };

  QRCode.createBytes = function(buffer, rsBlocks) {
    var offset = 0;

    var maxDcCount = 0;
    var maxEcCount = 0;

    var dcdata = new Array(rsBlocks.length);
    var ecdata = new Array(rsBlocks.length);

    for (var r = 0; r < rsBlocks.length; r++) {
      var dcCount = rsBlocks[r].dataCount;
      var ecCount = rsBlocks[r].totalCount - dcCount;

      maxDcCount = Math.max(maxDcCount, dcCount);
      maxEcCount = Math.max(maxEcCount, ecCount);

      dcdata[r] = new Array(dcCount);

      for (var i = 0; i < dcdata[r].length; i++) {
        dcdata[r][i] = 0xff & buffer.buffer[i + offset];
      }
      offset += dcCount;

      var rsPoly = QRCode.Util.getErrorCorrectPolynomial(ecCount);
      var rawPoly = new QRCode.Polynomial(
        dcdata[r],
        rsPoly.getLength() - 1
      );

      var modPoly = rawPoly.mod(rsPoly);
      ecdata[r] = new Array(rsPoly.getLength() - 1);
      for (var i = 0; i < ecdata[r].length; i++) {
        var modIndex = i + modPoly.getLength() - ecdata[r].length;
        ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;
      }
    }

    var totalCodeCount = 0;
    for (var i = 0; i < rsBlocks.length; i++) {
      totalCodeCount += rsBlocks[i].totalCount;
    }

    var data = new Array(totalCodeCount);
    var index = 0;

    for (var i = 0; i < maxDcCount; i++) {
      for (var r = 0; r < rsBlocks.length; r++) {
        if (i < dcdata[r].length) {
          data[index++] = dcdata[r][i];
        }
      }
    }

    for (var i = 0; i < maxEcCount; i++) {
      for (var r = 0; r < rsBlocks.length; r++) {
        if (i < ecdata[r].length) {
          data[index++] = ecdata[r][i];
        }
      }
    }

    return data;
  };

  //---------------------------------------------------------------------
  // QR8bitByte
  //---------------------------------------------------------------------
  QRCode.QR8bitByte = function(data) {
    this.mode = QRCode.Mode.MODE_8BIT_BYTE;
    this.data = data;
  };

  QRCode.QR8bitByte.prototype = {
    getLength: function(buffer) {
      return this.data.length;
    },

    write: function(buffer) {
      for (var i = 0; i < this.data.length; i++) {
        // not JIS ...
        buffer.put(this.data.charCodeAt(i), 8);
      }
    }
  };

  //---------------------------------------------------------------------
  // QRMode
  //---------------------------------------------------------------------
  QRCode.Mode = {
    MODE_NUMBER: 1 << 0,
    MODE_ALPHA_NUM: 1 << 1,
    MODE_8BIT_BYTE: 1 << 2,
    MODE_KANJI: 1 << 3
  };

  //---------------------------------------------------------------------
  // QRErrorCorrectLevel
  //---------------------------------------------------------------------
  QRCode.ErrorCorrectLevel = {
    L: 1,
    M: 0,
    Q: 3,
    H: 2
  };

  //---------------------------------------------------------------------
  // QRMaskPattern
  //---------------------------------------------------------------------
  QRCode.MaskPattern = {
    PATTERN000: 0,
    PATTERN001: 1,
    PATTERN010: 2,
    PATTERN011: 3,
    PATTERN100: 4,
    PATTERN101: 5,
    PATTERN110: 6,
    PATTERN111: 7
  };

  //---------------------------------------------------------------------
  // QRUtil
  //---------------------------------------------------------------------

  QRCode.Util = {
    PATTERN_POSITION_TABLE: [
      [],
      [6, 18],
      [6, 22],
      [6, 26],
      [6, 30],
      [6, 34],
      [6, 22, 38],
      [6, 24, 42],
      [6, 26, 46],
      [6, 28, 50],
      [6, 30, 54],
      [6, 32, 58],
      [6, 34, 62],
      [6, 26, 46, 66],
      [6, 26, 48, 70],
      [6, 26, 50, 74],
      [6, 30, 54, 78],
      [6, 30, 56, 82],
      [6, 30, 58, 86],
      [6, 34, 62, 90],
      [6, 28, 50, 72, 94],
      [6, 26, 50, 74, 98],
      [6, 30, 54, 78, 102],
      [6, 28, 54, 80, 106],
      [6, 32, 58, 84, 110],
      [6, 30, 58, 86, 114],
      [6, 34, 62, 90, 118],
      [6, 26, 50, 74, 98, 122],
      [6, 30, 54, 78, 102, 126],
      [6, 26, 52, 78, 104, 130],
      [6, 30, 56, 82, 108, 134],
      [6, 34, 60, 86, 112, 138],
      [6, 30, 58, 86, 114, 142],
      [6, 34, 62, 90, 118, 146],
      [6, 30, 54, 78, 102, 126, 150],
      [6, 24, 50, 76, 102, 128, 154],
      [6, 28, 54, 80, 106, 132, 158],
      [6, 32, 58, 84, 110, 136, 162],
      [6, 26, 54, 82, 110, 138, 166],
      [6, 30, 58, 86, 114, 142, 170]
    ],

    G15:
      (1 << 10) |
      (1 << 8) |
      (1 << 5) |
      (1 << 4) |
      (1 << 2) |
      (1 << 1) |
      (1 << 0),
    G18:
      (1 << 12) |
      (1 << 11) |
      (1 << 10) |
      (1 << 9) |
      (1 << 8) |
      (1 << 5) |
      (1 << 2) |
      (1 << 0),
    G15_MASK: (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1),

    getBCHTypeInfo: function(data) {
      var d = data << 10;
      while (
        QRCode.Util.getBCHDigit(d) -
          QRCode.Util.getBCHDigit(QRCode.Util.G15) >=
        0
      ) {
        d ^=
          QRCode.Util.G15 <<
          (QRCode.Util.getBCHDigit(d) -
            QRCode.Util.getBCHDigit(QRCode.Util.G15));
      }
      return ((data << 10) | d) ^ QRCode.Util.G15_MASK;
    },

    getBCHTypeNumber: function(data) {
      var d = data << 12;
      while (
        QRCode.Util.getBCHDigit(d) -
          QRCode.Util.getBCHDigit(QRCode.Util.G18) >=
        0
      ) {
        d ^=
          QRCode.Util.G18 <<
          (QRCode.Util.getBCHDigit(d) -
            QRCode.Util.getBCHDigit(QRCode.Util.G18));
      }
      return (data << 12) | d;
    },

    getBCHDigit: function(data) {
      var digit = 0;

      while (data != 0) {
        digit++;
        data >>>= 1;
      }

      return digit;
    },

    getPatternPosition: function(typeNumber) {
      return QRCode.Util.PATTERN_POSITION_TABLE[typeNumber - 1];
    },

    getMask: function(maskPattern, i, j) {
      switch (maskPattern) {
        case QRCode.MaskPattern.PATTERN000:
          return (i + j) % 2 == 0;
        case QRCode.MaskPattern.PATTERN001:
          return i % 2 == 0;
        case QRCode.MaskPattern.PATTERN010:
          return j % 3 == 0;
        case QRCode.MaskPattern.PATTERN011:
          return (i + j) % 3 == 0;
        case QRCode.MaskPattern.PATTERN100:
          return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;
        case QRCode.MaskPattern.PATTERN101:
          return ((i * j) % 2) + ((i * j) % 3) == 0;
        case QRCode.MaskPattern.PATTERN110:
          return (((i * j) % 2) + ((i * j) % 3)) % 2 == 0;
        case QRCode.MaskPattern.PATTERN111:
          return (((i * j) % 3) + ((i + j) % 2)) % 2 == 0;

        default:
          throw new Error("bad maskPattern:" + maskPattern);
      }
    },

    getErrorCorrectPolynomial: function(errorCorrectLength) {
      var a = new QRCode.Polynomial([1], 0);

      for (var i = 0; i < errorCorrectLength; i++) {
        a = a.multiply(
          new QRCode.Polynomial([1, QRCode.Math.gexp(i)], 0)
        );
      }

      return a;
    },

    getLengthInBits: function(mode, type) {
      if (1 <= type && type < 10) {
        // 1 - 9

        switch (mode) {
          case QRCode.Mode.MODE_NUMBER:
            return 10;
          case QRCode.Mode.MODE_ALPHA_NUM:
            return 9;
          case QRCode.Mode.MODE_8BIT_BYTE:
            return 8;
          case QRCode.Mode.MODE_KANJI:
            return 8;
          default:
            throw new Error("mode:" + mode);
        }
      } else if (type < 27) {
        // 10 - 26

        switch (mode) {
          case QRCode.Mode.MODE_NUMBER:
            return 12;
          case QRCode.Mode.MODE_ALPHA_NUM:
            return 11;
          case QRCode.Mode.MODE_8BIT_BYTE:
            return 16;
          case QRCode.Mode.MODE_KANJI:
            return 10;
          default:
            throw new Error("mode:" + mode);
        }
      } else if (type < 41) {
        // 27 - 40

        switch (mode) {
          case QRCode.Mode.MODE_NUMBER:
            return 14;
          case QRCode.Mode.MODE_ALPHA_NUM:
            return 13;
          case QRCode.Mode.MODE_8BIT_BYTE:
            return 16;
          case QRCode.Mode.MODE_KANJI:
            return 12;
          default:
            throw new Error("mode:" + mode);
        }
      } else {
        throw new Error("type:" + type);
      }
    },

    getLostPoint: function(qrCode) {
      var moduleCount = qrCode.getModuleCount();

      var lostPoint = 0;

      // LEVEL1

      for (var row = 0; row < moduleCount; row++) {
        for (var col = 0; col < moduleCount; col++) {
          var sameCount = 0;
          var dark = qrCode.isDark(row, col);

          for (var r = -1; r <= 1; r++) {
            if (row + r < 0 || moduleCount <= row + r) {
              continue;
            }

            for (var c = -1; c <= 1; c++) {
              if (col + c < 0 || moduleCount <= col + c) {
                continue;
              }

              if (r == 0 && c == 0) {
                continue;
              }

              if (dark == qrCode.isDark(row + r, col + c)) {
                sameCount++;
              }
            }
          }

          if (sameCount > 5) {
            lostPoint += 3 + sameCount - 5;
          }
        }
      }

      // LEVEL2

      for (var row = 0; row < moduleCount - 1; row++) {
        for (var col = 0; col < moduleCount - 1; col++) {
          var count = 0;
          if (qrCode.isDark(row, col)) count++;
          if (qrCode.isDark(row + 1, col)) count++;
          if (qrCode.isDark(row, col + 1)) count++;
          if (qrCode.isDark(row + 1, col + 1)) count++;
          if (count == 0 || count == 4) {
            lostPoint += 3;
          }
        }
      }

      // LEVEL3

      for (var row = 0; row < moduleCount; row++) {
        for (var col = 0; col < moduleCount - 6; col++) {
          if (
            qrCode.isDark(row, col) &&
            !qrCode.isDark(row, col + 1) &&
            qrCode.isDark(row, col + 2) &&
            qrCode.isDark(row, col + 3) &&
            qrCode.isDark(row, col + 4) &&
            !qrCode.isDark(row, col + 5) &&
            qrCode.isDark(row, col + 6)
          ) {
            lostPoint += 40;
          }
        }
      }

      for (var col = 0; col < moduleCount; col++) {
        for (var row = 0; row < moduleCount - 6; row++) {
          if (
            qrCode.isDark(row, col) &&
            !qrCode.isDark(row + 1, col) &&
            qrCode.isDark(row + 2, col) &&
            qrCode.isDark(row + 3, col) &&
            qrCode.isDark(row + 4, col) &&
            !qrCode.isDark(row + 5, col) &&
            qrCode.isDark(row + 6, col)
          ) {
            lostPoint += 40;
          }
        }
      }

      // LEVEL4

      var darkCount = 0;

      for (var col = 0; col < moduleCount; col++) {
        for (var row = 0; row < moduleCount; row++) {
          if (qrCode.isDark(row, col)) {
            darkCount++;
          }
        }
      }

      var ratio =
        Math.abs((100 * darkCount) / moduleCount / moduleCount - 50) / 5;
      lostPoint += ratio * 10;

      return lostPoint;
    }
  };

  //---------------------------------------------------------------------
  // QRMath
  //---------------------------------------------------------------------

  QRCode.Math = {
    glog: function(n) {
      if (n < 1) {
        throw new Error("glog(" + n + ")");
      }

      return QRCode.Math.LOG_TABLE[n];
    },

    gexp: function(n) {
      while (n < 0) {
        n += 255;
      }

      while (n >= 256) {
        n -= 255;
      }

      return QRCode.Math.EXP_TABLE[n];
    },

    EXP_TABLE: new Array(256),

    LOG_TABLE: new Array(256)
  };

  for (var i = 0; i < 8; i++) {
    QRCode.Math.EXP_TABLE[i] = 1 << i;
  }
  for (var i = 8; i < 256; i++) {
    QRCode.Math.EXP_TABLE[i] =
      QRCode.Math.EXP_TABLE[i - 4] ^
      QRCode.Math.EXP_TABLE[i - 5] ^
      QRCode.Math.EXP_TABLE[i - 6] ^
      QRCode.Math.EXP_TABLE[i - 8];
  }
  for (var i = 0; i < 255; i++) {
    QRCode.Math.LOG_TABLE[QRCode.Math.EXP_TABLE[i]] = i;
  }

  //---------------------------------------------------------------------
  // QRPolynomial
  //---------------------------------------------------------------------

  QRCode.Polynomial = function(num, shift) {
    if (num.length == undefined) {
      throw new Error(num.length + "/" + shift);
    }

    var offset = 0;

    while (offset < num.length && num[offset] == 0) {
      offset++;
    }

    this.num = new Array(num.length - offset + shift);
    for (var i = 0; i < num.length - offset; i++) {
      this.num[i] = num[i + offset];
    }
  };

  QRCode.Polynomial.prototype = {
    get: function(index) {
      return this.num[index];
    },

    getLength: function() {
      return this.num.length;
    },

    multiply: function(e) {
      var num = new Array(this.getLength() + e.getLength() - 1);

      for (var i = 0; i < this.getLength(); i++) {
        for (var j = 0; j < e.getLength(); j++) {
          num[i + j] ^= QRCode.Math.gexp(
            QRCode.Math.glog(this.get(i)) + QRCode.Math.glog(e.get(j))
          );
        }
      }

      return new QRCode.Polynomial(num, 0);
    },

    mod: function(e) {
      if (this.getLength() - e.getLength() < 0) {
        return this;
      }

      var ratio =
        QRCode.Math.glog(this.get(0)) - QRCode.Math.glog(e.get(0));

      var num = new Array(this.getLength());

      for (var i = 0; i < this.getLength(); i++) {
        num[i] = this.get(i);
      }

      for (var i = 0; i < e.getLength(); i++) {
        num[i] ^= QRCode.Math.gexp(QRCode.Math.glog(e.get(i)) + ratio);
      }

      // recursive call
      return new QRCode.Polynomial(num, 0).mod(e);
    }
  };

  //---------------------------------------------------------------------
  // QRRSBlock
  //---------------------------------------------------------------------

  QRCode.RSBlock = function(totalCount, dataCount) {
    this.totalCount = totalCount;
    this.dataCount = dataCount;
  };

  QRCode.RSBlock.RS_BLOCK_TABLE = [
    // L
    // M
    // Q
    // H

    // 1
    [1, 26, 19],
    [1, 26, 16],
    [1, 26, 13],
    [1, 26, 9],

    // 2
    [1, 44, 34],
    [1, 44, 28],
    [1, 44, 22],
    [1, 44, 16],

    // 3
    [1, 70, 55],
    [1, 70, 44],
    [2, 35, 17],
    [2, 35, 13],

    // 4
    [1, 100, 80],
    [2, 50, 32],
    [2, 50, 24],
    [4, 25, 9],

    // 5
    [1, 134, 108],
    [2, 67, 43],
    [2, 33, 15, 2, 34, 16],
    [2, 33, 11, 2, 34, 12],

    // 6
    [2, 86, 68],
    [4, 43, 27],
    [4, 43, 19],
    [4, 43, 15],

    // 7
    [2, 98, 78],
    [4, 49, 31],
    [2, 32, 14, 4, 33, 15],
    [4, 39, 13, 1, 40, 14],

    // 8
    [2, 121, 97],
    [2, 60, 38, 2, 61, 39],
    [4, 40, 18, 2, 41, 19],
    [4, 40, 14, 2, 41, 15],

    // 9
    [2, 146, 116],
    [3, 58, 36, 2, 59, 37],
    [4, 36, 16, 4, 37, 17],
    [4, 36, 12, 4, 37, 13],

    // 10
    [2, 86, 68, 2, 87, 69],
    [4, 69, 43, 1, 70, 44],
    [6, 43, 19, 2, 44, 20],
    [6, 43, 15, 2, 44, 16]
  ];

  QRCode.RSBlock.getRSBlocks = function(typeNumber, errorCorrectLevel) {
    var rsBlock = QRCode.RSBlock.getRsBlockTable(
      typeNumber,
      errorCorrectLevel
    );

    if (rsBlock == undefined) {
      throw new Error(
        "bad rs block @ typeNumber:" +
          typeNumber +
          "/errorCorrectLevel:" +
          errorCorrectLevel
      );
    }

    var length = rsBlock.length / 3;

    var list = new Array();

    for (var i = 0; i < length; i++) {
      var count = rsBlock[i * 3 + 0];
      var totalCount = rsBlock[i * 3 + 1];
      var dataCount = rsBlock[i * 3 + 2];

      for (var j = 0; j < count; j++) {
        list.push(new QRCode.RSBlock(totalCount, dataCount));
      }
    }

    return list;
  };

  QRCode.RSBlock.getRsBlockTable = function(
    typeNumber,
    errorCorrectLevel
  ) {
    switch (errorCorrectLevel) {
      case QRCode.ErrorCorrectLevel.L:
        return QRCode.RSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];
      case QRCode.ErrorCorrectLevel.M:
        return QRCode.RSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];
      case QRCode.ErrorCorrectLevel.Q:
        return QRCode.RSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];
      case QRCode.ErrorCorrectLevel.H:
        return QRCode.RSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];
      default:
        return undefined;
    }
  };

  //---------------------------------------------------------------------
  // QRBitBuffer
  //---------------------------------------------------------------------

  QRCode.BitBuffer = function() {
    this.buffer = new Array();
    this.length = 0;
  };

  QRCode.BitBuffer.prototype = {
    get: function(index) {
      var bufIndex = Math.floor(index / 8);
      return ((this.buffer[bufIndex] >>> (7 - (index % 8))) & 1) == 1;
    },

    put: function(num, length) {
      for (var i = 0; i < length; i++) {
        this.putBit(((num >>> (length - i - 1)) & 1) == 1);
      }
    },

    getLengthInBits: function() {
      return this.length;
    },

    putBit: function(bit) {
      var bufIndex = Math.floor(this.length / 8);
      if (this.buffer.length <= bufIndex) {
        this.buffer.push(0);
      }

      if (bit) {
        this.buffer[bufIndex] |= 0x80 >>> this.length % 8;
      }

      this.length++;
    }
  };
})();
</script>
<script type="text/javascript">
/*
      Copyright (c) 2011 Stefan Thomas
      
      Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
      
      The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
      
      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
      */

//https://raw.github.com/bitcoinjs/bitcoinjs-lib/1a7fc9d063f864058809d06ef4542af40be3558f/src/bitcoin.js
(function(exports) {
  var Bitcoin = exports;
})("object" === typeof module ? module.exports : (window.Bitcoin = {}));
</script>
<script type="text/javascript">
//https://raw.github.com/bitcoinjs/bitcoinjs-lib/c952aaeb3ee472e3776655b8ea07299ebed702c7/src/base58.js
(function(Bitcoin) {
  Bitcoin.Base58 = {
    alphabet:
      "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
    validRegex: /^[1-9A-HJ-NP-Za-km-z]+$/,
    base: BigInteger.valueOf(58),

    /**
     * Convert a byte array to a base58-encoded string.
     *
     * Written by Mike Hearn for BitcoinJ.
     *   Copyright (c) 2011 Google Inc.
     *
     * Ported to JavaScript by Stefan Thomas.
     */
    encode: function(input) {
      var bi = BigInteger.fromByteArrayUnsigned(input);
      var chars = [];

      while (bi.compareTo(B58.base) >= 0) {
        var mod = bi.mod(B58.base);
        chars.unshift(B58.alphabet[mod.intValue()]);
        bi = bi.subtract(mod).divide(B58.base);
      }
      chars.unshift(B58.alphabet[bi.intValue()]);

      // Convert leading zeros too.
      for (var i = 0; i < input.length; i++) {
        if (input[i] == 0x00) {
          chars.unshift(B58.alphabet[0]);
        } else break;
      }

      return chars.join("");
    },

    /**
     * Convert a base58-encoded string to a byte array.
     *
     * Written by Mike Hearn for BitcoinJ.
     *   Copyright (c) 2011 Google Inc.
     *
     * Ported to JavaScript by Stefan Thomas.
     */
    decode: function(input) {
      var bi = BigInteger.valueOf(0);
      var leadingZerosNum = 0;
      for (var i = input.length - 1; i >= 0; i--) {
        var alphaIndex = B58.alphabet.indexOf(input[i]);
        if (alphaIndex < 0) {
          throw "Invalid character";
        }
        bi = bi.add(
          BigInteger.valueOf(alphaIndex).multiply(
            B58.base.pow(input.length - 1 - i)
          )
        );

        // This counts leading zero bytes
        if (input[i] == "1") leadingZerosNum++;
        else leadingZerosNum = 0;
      }
      var bytes = bi.toByteArrayUnsigned();

      // Add leading zeros
      while (leadingZerosNum-- > 0) bytes.unshift(0);

      return bytes;
    }
  };

  var B58 = Bitcoin.Base58;
})("undefined" != typeof Bitcoin ? Bitcoin : module.exports);
</script>
<script type="text/javascript">
//https://raw.github.com/bitcoinjs/bitcoinjs-lib/09e8c6e184d6501a0c2c59d73ca64db5c0d3eb95/src/address.js
Bitcoin.Address = function(bytes, networkVersion) {
  if ("string" == typeof bytes) {
    bytes = Bitcoin.Address.decodeString(bytes);
  }
  this.hash = bytes;
  // changesMadeByAbhishek: add networkVersion dynamically
  //this.version = Bitcoin.Address.networkVersion;
  this.version = networkVersion;
};

//Bitcoin.Address.networkVersion = 0x23; // (FLO mainnet 0x23, 35D), (Bitcoin Mainnet, 0x00, 0D)
//Bitcoin.Address.networkVersion = 0x73; // (FLO mainnet 0x23, 35D), (Bitcoin Mainnet, 0x00, 0D)

/**
 * Serialize this object as a standard Bitcoin address.
 *
 * Returns the address as a base58-encoded string in the standardized format.
 */
Bitcoin.Address.prototype.toString = function() {
  // Get a copy of the hash
  var hash = this.hash.slice(0);

  // Version
  hash.unshift(this.version);
  var checksum = Crypto.SHA256(
    Crypto.SHA256(hash, {
      asBytes: true
    }),
    {
      asBytes: true
    }
  );
  var bytes = hash.concat(checksum.slice(0, 4));
  return Bitcoin.Base58.encode(bytes);
};

Bitcoin.Address.prototype.getHashBase64 = function() {
  return Crypto.util.bytesToBase64(this.hash);
};

/**
 * Parse a Bitcoin address contained in a string.
 */
Bitcoin.Address.decodeString = function(string) {
  var bytes = Bitcoin.Base58.decode(string);
  var hash = bytes.slice(0, 21);
  var checksum = Crypto.SHA256(
    Crypto.SHA256(hash, {
      asBytes: true
    }),
    {
      asBytes: true
    }
  );

  if (
    checksum[0] != bytes[21] ||
    checksum[1] != bytes[22] ||
    checksum[2] != bytes[23] ||
    checksum[3] != bytes[24]
  ) {
    throw "Checksum validation failed!";
  }

  var version = hash.shift();

  if (version != 0) {
    throw "Version " + version + " not supported!";
  }

  return hash;
};
</script>
<script type="text/javascript">
//https://raw.github.com/bitcoinjs/bitcoinjs-lib/e90780d3d3b8fc0d027d2bcb38b80479902f223e/src/ecdsa.js
Bitcoin.ECDSA = (function() {
  var ecparams = EllipticCurve.getSECCurveByName("secp256k1");
  var rng = new SecureRandom();

  var P_OVER_FOUR = null;

  function implShamirsTrick(P, k, Q, l) {
    var m = Math.max(k.bitLength(), l.bitLength());
    var Z = P.add2D(Q);
    var R = P.curve.getInfinity();

    for (var i = m - 1; i >= 0; --i) {
      R = R.twice2D();

      R.z = BigInteger.ONE;

      if (k.testBit(i)) {
        if (l.testBit(i)) {
          R = R.add2D(Z);
        } else {
          R = R.add2D(P);
        }
      } else {
        if (l.testBit(i)) {
          R = R.add2D(Q);
        }
      }
    }

    return R;
  }

  var ECDSA = {
    getBigRandom: function(limit) {
      return new BigInteger(limit.bitLength(), rng)
        .mod(limit.subtract(BigInteger.ONE))
        .add(BigInteger.ONE);
    },
    sign: function(hash, priv) {
      var d = priv;
      var n = ecparams.getN();
      var e = BigInteger.fromByteArrayUnsigned(hash);

      do {
        var k = ECDSA.getBigRandom(n);
        var G = ecparams.getG();
        var Q = G.multiply(k);
        var r = Q.getX()
          .toBigInteger()
          .mod(n);
      } while (r.compareTo(BigInteger.ZERO) <= 0);

      var s = k
        .modInverse(n)
        .multiply(e.add(d.multiply(r)))
        .mod(n);

      return ECDSA.serializeSig(r, s);
    },

    verify: function(hash, sig, pubkey) {
      var r, s;
      if (Bitcoin.Util.isArray(sig)) {
        var obj = ECDSA.parseSig(sig);
        r = obj.r;
        s = obj.s;
      } else if ("object" === typeof sig && sig.r && sig.s) {
        r = sig.r;
        s = sig.s;
      } else {
        throw "Invalid value for signature";
      }

      var Q;
      if (pubkey instanceof ec.PointFp) {
        Q = pubkey;
      } else if (Bitcoin.Util.isArray(pubkey)) {
        Q = EllipticCurve.PointFp.decodeFrom(ecparams.getCurve(), pubkey);
      } else {
        throw "Invalid format for pubkey value, must be byte array or ec.PointFp";
      }
      var e = BigInteger.fromByteArrayUnsigned(hash);

      return ECDSA.verifyRaw(e, r, s, Q);
    },

    verifyRaw: function(e, r, s, Q) {
      var n = ecparams.getN();
      var G = ecparams.getG();

      if (r.compareTo(BigInteger.ONE) < 0 || r.compareTo(n) >= 0)
        return false;

      if (s.compareTo(BigInteger.ONE) < 0 || s.compareTo(n) >= 0)
        return false;

      var c = s.modInverse(n);

      var u1 = e.multiply(c).mod(n);
      var u2 = r.multiply(c).mod(n);

      // TODO(!!!): For some reason Shamir's trick isn't working with
      // signed message verification!? Probably an implementation
      // error!
      //var point = implShamirsTrick(G, u1, Q, u2);
      var point = G.multiply(u1).add(Q.multiply(u2));

      var v = point
        .getX()
        .toBigInteger()
        .mod(n);

      return v.equals(r);
    },

    /**
     * Serialize a signature into DER format.
     *
     * Takes two BigIntegers representing r and s and returns a byte array.
     */
    serializeSig: function(r, s) {
      var rBa = r.toByteArraySigned();
      var sBa = s.toByteArraySigned();

      var sequence = [];
      sequence.push(0x02); // INTEGER
      sequence.push(rBa.length);
      sequence = sequence.concat(rBa);

      sequence.push(0x02); // INTEGER
      sequence.push(sBa.length);
      sequence = sequence.concat(sBa);

      sequence.unshift(sequence.length);
      sequence.unshift(0x30); // SEQUENCE

      return sequence;
    },

    /**
     * Parses a byte array containing a DER-encoded signature.
     *
     * This function will return an object of the form:
     *
     * {
     *   r: BigInteger,
     *   s: BigInteger
     * }
     */
    parseSig: function(sig) {
      var cursor;
      if (sig[0] != 0x30)
        throw new Error("Signature not a valid DERSequence");

      cursor = 2;
      if (sig[cursor] != 0x02)
        throw new Error(
          "First element in signature must be a DERInteger"
        );
      var rBa = sig.slice(cursor + 2, cursor + 2 + sig[cursor + 1]);

      cursor += 2 + sig[cursor + 1];
      if (sig[cursor] != 0x02)
        throw new Error(
          "Second element in signature must be a DERInteger"
        );
      var sBa = sig.slice(cursor + 2, cursor + 2 + sig[cursor + 1]);

      cursor += 2 + sig[cursor + 1];

      //if (cursor != sig.length)
      //  throw new Error("Extra bytes in signature");

      var r = BigInteger.fromByteArrayUnsigned(rBa);
      var s = BigInteger.fromByteArrayUnsigned(sBa);

      return {
        r: r,
        s: s
      };
    },

    parseSigCompact: function(sig) {
      if (sig.length !== 65) {
        throw "Signature has the wrong length";
      }

      // Signature is prefixed with a type byte storing three bits of
      // information.
      var i = sig[0] - 27;
      if (i < 0 || i > 7) {
        throw "Invalid signature type";
      }

      var n = ecparams.getN();
      var r = BigInteger.fromByteArrayUnsigned(sig.slice(1, 33)).mod(n);
      var s = BigInteger.fromByteArrayUnsigned(sig.slice(33, 65)).mod(n);

      return {
        r: r,
        s: s,
        i: i
      };
    },

    /**
     * Recover a public key from a signature.
     *
     * See SEC 1: Elliptic Curve Cryptography, section 4.1.6, "Public
     * Key Recovery Operation".
     *
     * http://www.secg.org/download/aid-780/sec1-v2.pdf
     */
    recoverPubKey: function(r, s, hash, i) {
      // The recovery parameter i has two bits.
      i = i & 3;

      // The less significant bit specifies whether the y coordinate
      // of the compressed point is even or not.
      var isYEven = i & 1;

      // The more significant bit specifies whether we should use the
      // first or second candidate key.
      var isSecondKey = i >> 1;

      var n = ecparams.getN();
      var G = ecparams.getG();
      var curve = ecparams.getCurve();
      var p = curve.getQ();
      var a = curve.getA().toBigInteger();
      var b = curve.getB().toBigInteger();

      // We precalculate (p + 1) / 4 where p is if the field order
      if (!P_OVER_FOUR) {
        P_OVER_FOUR = p.add(BigInteger.ONE).divide(BigInteger.valueOf(4));
      }

      // 1.1 Compute x
      var x = isSecondKey ? r.add(n) : r;

      // 1.3 Convert x to point
      var alpha = x
        .multiply(x)
        .multiply(x)
        .add(a.multiply(x))
        .add(b)
        .mod(p);
      var beta = alpha.modPow(P_OVER_FOUR, p);

      var xorOdd = beta.isEven() ? i % 2 : (i + 1) % 2;
      // If beta is even, but y isn't or vice versa, then convert it,
      // otherwise we're done and y == beta.
      var y = (beta.isEven()
      ? !isYEven
      : isYEven)
        ? beta
        : p.subtract(beta);

      // 1.4 Check that nR is at infinity
      var R = new EllipticCurve.PointFp(
        curve,
        curve.fromBigInteger(x),
        curve.fromBigInteger(y)
      );
      R.validate();

      // 1.5 Compute e from M
      var e = BigInteger.fromByteArrayUnsigned(hash);
      var eNeg = BigInteger.ZERO.subtract(e).mod(n);

      // 1.6 Compute Q = r^-1 (sR - eG)
      var rInv = r.modInverse(n);
      var Q = implShamirsTrick(R, s, G, eNeg).multiply(rInv);

      Q.validate();
      if (!ECDSA.verifyRaw(e, r, s, Q)) {
        throw "Pubkey recovery unsuccessful";
      }

      var pubKey = new Bitcoin.ECKey();
      pubKey.pub = Q;
      return pubKey;
    },

    /**
     * Calculate pubkey extraction parameter.
     *
     * When extracting a pubkey from a signature, we have to
     * distinguish four different cases. Rather than putting this
     * burden on the verifier, Bitcoin includes a 2-bit value with the
     * signature.
     *
     * This function simply tries all four cases and returns the value
     * that resulted in a successful pubkey recovery.
     */
    calcPubkeyRecoveryParam: function(address, r, s, hash) {
      for (var i = 0; i < 4; i++) {
        try {
          var pubkey = Bitcoin.ECDSA.recoverPubKey(r, s, hash, i);
          if (pubkey.getBitcoinAddress().toString() == address) {
            return i;
          }
        } catch (e) {}
      }
      throw "Unable to find valid recovery factor";
    }
  };

  return ECDSA;
})();
</script>
<script type="text/javascript">
Bitcoin.KeyPool = (function() {
  var KeyPool = function() {
    this.keyArray = [];

    this.push = function(item) {
      if (item == null || item.priv == null) return;
      var doAdd = true;
      // prevent duplicates from being added to the array
      for (var index in this.keyArray) {
        var currentItem = this.keyArray[index];
        if (
          currentItem != null &&
          currentItem.priv != null &&
          item.getBitcoinAddress() == currentItem.getBitcoinAddress()
        ) {
          doAdd = false;
          break;
        }
      }
      if (doAdd) this.keyArray.push(item);
    };

    this.reset = function() {
      this.keyArray = [];
    };

    this.getArray = function() {
      // copy array
      return this.keyArray.slice(0);
    };

    this.setArray = function(ka) {
      this.keyArray = ka;
    };

    this.length = function() {
      return this.keyArray.length;
    };

    this.toString = function() {
      var keyPoolString = "# = " + this.length() + "\n";
      var pool = this.getArray();
      for (var index in pool) {
        var item = pool[index];
        if (
          Bitcoin.Util.hasMethods(item, "getBitcoinAddress", "toString")
        ) {
          if (item != null) {
            keyPoolString +=
              '"' +
              item.getBitcoinAddress() +
              '"' +
              ', "' +
              item.toString("wif") +
              '"\n';
          }
        }
      }

      return keyPoolString;
    };

    return this;
  };

  return new KeyPool();
})();

Bitcoin.Bip38Key = (function() {
  var Bip38 = function(address, encryptedKey) {
    this.address = address;
    this.priv = encryptedKey;
  };

  Bip38.prototype.getBitcoinAddress = function() {
    return this.address;
  };

  Bip38.prototype.toString = function() {
    return this.priv;
  };

  return Bip38;
})();

//https://raw.github.com/pointbiz/bitcoinjs-lib/9b2f94a028a7bc9bed94e0722563e9ff1d8e8db8/src/eckey.js
Bitcoin.ECKey = (function() {
  var ECDSA = Bitcoin.ECDSA;
  var KeyPool = Bitcoin.KeyPool;
  var ecparams = EllipticCurve.getSECCurveByName("secp256k1");

  var ECKey = function(input) {
    if (!input) {
      // Generate new key
      var n = ecparams.getN();
      this.priv = ECDSA.getBigRandom(n);
    } else if (input instanceof BigInteger) {
      // Input is a private key value
      this.priv = input;
    } else if (Bitcoin.Util.isArray(input)) {
      // Prepend zero byte to prevent interpretation as negative integer
      this.priv = BigInteger.fromByteArrayUnsigned(input);
    } else if ("string" == typeof input) {
      var bytes = null;
      try {
        if (ECKey.isWalletImportFormat(input)) {
          bytes = ECKey.decodeWalletImportFormat(input);
        } else if (ECKey.isCompressedWalletImportFormat(input)) {
          bytes = ECKey.decodeCompressedWalletImportFormat(input);
          this.compressed = true;
        } else if (ECKey.isMiniFormat(input)) {
          bytes = Crypto.SHA256(input, {
            asBytes: true
          });
        } else if (ECKey.isHexFormat(input)) {
          bytes = Crypto.util.hexToBytes(input);
        } else if (ECKey.isBase64Format(input)) {
          bytes = Crypto.util.base64ToBytes(input);
        } else {
          bytes = ECKey.decodeCompressedWalletImportFormat(input);
          this.compressed = true;
        }
      } catch (exc1) {
        this.setError(exc1);
      }

      if (ECKey.isBase6Format(input)) {
        this.priv = new BigInteger(input, 6);
      } else if (bytes == null || bytes.length != 32) {
        this.priv = null;
      } else {
        // Prepend zero byte to prevent interpretation as negative integer
        this.priv = BigInteger.fromByteArrayUnsigned(bytes);
      }
    }

    this.compressed =
      this.compressed == undefined
        ? !!ECKey.compressByDefault
        : this.compressed;
    try {
      // check not zero
      if (this.priv != null && BigInteger.ZERO.compareTo(this.priv) == 0)
        this.setError("Error: BigInteger equal to zero.");
      // valid range [0x1, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364140])
      var hexKeyRangeLimit =
        "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364140";
      var rangeLimitBytes = Crypto.util.hexToBytes(hexKeyRangeLimit);
      var limitBigInt = BigInteger.fromByteArrayUnsigned(rangeLimitBytes);
      if (this.priv != null && limitBigInt.compareTo(this.priv) < 0)
        this.setError("Error: BigInteger outside of curve range.");

      if (this.priv != null) {
        KeyPool.push(this);
      }
    } catch (exc2) {
      this.setError(exc2);
    }
  };

  //FLO Mainnet (0xA3) --- FLO Testnet (0xEF)
  // changesMadeByAbhishek: Change below line to flo mainnet (0xA3) when deploying
  ECKey.privateKeyPrefix = 0xef; //(Bitcoin mainnet 0x80    testnet 0xEF) (FLO mainnet 0xA3 163 D)

  /**
   * Whether public keys should be returned compressed by default.
   */
  ECKey.compressByDefault = false;

  /**
   * Set whether the public key should be returned compressed or not.
   */
  ECKey.prototype.setError = function(err) {
    this.error = err;
    this.priv = null;
    return this;
  };

  /**
   * Set whether the public key should be returned compressed or not.
   */
  ECKey.prototype.setCompressed = function(v) {
    this.compressed = !!v;
    if (this.pubPoint) this.pubPoint.compressed = this.compressed;
    return this;
  };

  /*
   * Return public key as a byte array in DER encoding
   */
  ECKey.prototype.getPub = function() {
    if (this.compressed) {
      if (this.pubComp) return this.pubComp;
      return (this.pubComp = this.getPubPoint().getEncoded(1));
    } else {
      if (this.pubUncomp) return this.pubUncomp;
      return (this.pubUncomp = this.getPubPoint().getEncoded(0));
    }
  };

  /**
   * Return public point as ECPoint object.
   */
  ECKey.prototype.getPubPoint = function() {
    if (!this.pubPoint) {
      this.pubPoint = ecparams.getG().multiply(this.priv);
      this.pubPoint.compressed = this.compressed;
    }
    return this.pubPoint;
  };

  ECKey.prototype.getPubKeyHex = function() {
    if (this.compressed) {
      if (this.pubKeyHexComp) return this.pubKeyHexComp;
      return (this.pubKeyHexComp = Crypto.util
        .bytesToHex(this.getPub())
        .toString()
        .toUpperCase());
    } else {
      if (this.pubKeyHexUncomp) return this.pubKeyHexUncomp;
      return (this.pubKeyHexUncomp = Crypto.util
        .bytesToHex(this.getPub())
        .toString()
        .toUpperCase());
    }
  };

  /**
   * Get the pubKeyHash for this key.
   *
   * This is calculated as RIPE160(SHA256([encoded pubkey])) and returned as
   * a byte array.
   */
  ECKey.prototype.getPubKeyHash = function() {
    if (this.compressed) {
      if (this.pubKeyHashComp) return this.pubKeyHashComp;
      return (this.pubKeyHashComp = Bitcoin.Util.sha256ripe160(
        this.getPub()
      ));
    } else {
      if (this.pubKeyHashUncomp) return this.pubKeyHashUncomp;
      return (this.pubKeyHashUncomp = Bitcoin.Util.sha256ripe160(
        this.getPub()
      ));
    }
  };

  ECKey.prototype.getBitcoinAddress = function(networkVersion) {
    var hash = this.getPubKeyHash();
    var addr = new Bitcoin.Address(hash, networkVersion);
    return addr.toString();
  };

  /*
   * Takes a public point as a hex string or byte array
   */
  ECKey.prototype.setPub = function(pub) {
    // byte array
    if (Bitcoin.Util.isArray(pub)) {
      pub = Crypto.util
        .bytesToHex(pub)
        .toString()
        .toUpperCase();
    }
    var ecPoint = ecparams.getCurve().decodePointHex(pub);
    this.setCompressed(ecPoint.compressed);
    this.pubPoint = ecPoint;
    return this;
  };

  // Sipa Private Key Wallet Import Format
  ECKey.prototype.getBitcoinWalletImportFormat = function() {
    var bytes = this.getBitcoinPrivateKeyByteArray();
    if (bytes == null) return "";
    bytes.unshift(ECKey.privateKeyPrefix); // prepend 0x80 byte
    if (this.compressed) bytes.push(0x01); // append 0x01 byte for compressed format
    var checksum = Crypto.SHA256(
      Crypto.SHA256(bytes, {
        asBytes: true
      }),
      {
        asBytes: true
      }
    );
    bytes = bytes.concat(checksum.slice(0, 4));
    var privWif = Bitcoin.Base58.encode(bytes);
    return privWif;
  };

  // Private Key Hex Format
  ECKey.prototype.getBitcoinHexFormat = function() {
    return Crypto.util
      .bytesToHex(this.getBitcoinPrivateKeyByteArray())
      .toString()
      .toUpperCase();
  };

  // Private Key Base64 Format
  ECKey.prototype.getBitcoinBase64Format = function() {
    return Crypto.util.bytesToBase64(
      this.getBitcoinPrivateKeyByteArray()
    );
  };

  ECKey.prototype.getBitcoinPrivateKeyByteArray = function() {
    if (this.priv == null) return null;
    // Get a copy of private key as a byte array
    var bytes = this.priv.toByteArrayUnsigned();
    // zero pad if private key is less than 32 bytes
    while (bytes.length < 32) bytes.unshift(0x00);
    return bytes;
  };

  ECKey.prototype.toString = function(format) {
    format = format || "";
    if (
      format.toString().toLowerCase() == "base64" ||
      format.toString().toLowerCase() == "b64"
    ) {
      return this.getBitcoinBase64Format();
    }
    // Wallet Import Format
    else if (format.toString().toLowerCase() == "wif") {
      return this.getBitcoinWalletImportFormat();
    } else {
      return this.getBitcoinHexFormat();
    }
  };

  ECKey.prototype.sign = function(hash) {
    return ECDSA.sign(hash, this.priv);
  };

  ECKey.prototype.verify = function(hash, sig) {
    return ECDSA.verify(hash, sig, this.getPub());
  };

  /**
   * Parse a wallet import format private key contained in a string.
   */
  ECKey.decodeWalletImportFormat = function(privStr) {
    var bytes = Bitcoin.Base58.decode(privStr);
    var hash = bytes.slice(0, 33);
    var checksum = Crypto.SHA256(
      Crypto.SHA256(hash, {
        asBytes: true
      }),
      {
        asBytes: true
      }
    );
    if (
      checksum[0] != bytes[33] ||
      checksum[1] != bytes[34] ||
      checksum[2] != bytes[35] ||
      checksum[3] != bytes[36]
    ) {
      throw "Checksum validation failed!";
    }
    var version = hash.shift();
    if (version != ECKey.privateKeyPrefix) {
      throw "Version " + version + " not supported!";
    }
    return hash;
  };

  /**
   * Parse a compressed wallet import format private key contained in a string.
   */
  ECKey.decodeCompressedWalletImportFormat = function(privStr) {
    var bytes = Bitcoin.Base58.decode(privStr);
    var hash = bytes.slice(0, 34);
    var checksum = Crypto.SHA256(
      Crypto.SHA256(hash, {
        asBytes: true
      }),
      {
        asBytes: true
      }
    );
    if (
      checksum[0] != bytes[34] ||
      checksum[1] != bytes[35] ||
      checksum[2] != bytes[36] ||
      checksum[3] != bytes[37]
    ) {
      throw "Checksum validation failed!";
    }
    var version = hash.shift();
    if (version != ECKey.privateKeyPrefix) {
      throw "Version " + version + " not supported!";
    }
    hash.pop();
    return hash;
  };

  // 64 characters [0-9A-F]
  ECKey.isHexFormat = function(key) {
    key = key.toString();
    return /^[A-Fa-f0-9]{64}$/.test(key);
  };

  // 51 characters base58, always starts with a '5'
  ECKey.isWalletImportFormat = function(key) {
    key = key.toString();
    return ECKey.privateKeyPrefix == 0x80
      ? /^5[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{50}$/.test(
          key
        )
      : /^9[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{50}$/.test(
          key
        );
  };

  // 52 characters base58
  ECKey.isCompressedWalletImportFormat = function(key) {
    key = key.toString();

    switch (ECKey.currentBlockchain) {
        case "BTC":
            return /^[LK][123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{51}$/.test(
                  key
              )
            break;              
        case "BTC_TEST":
            return /^c[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{51}$/.test(
                  key
              );   
            break;
        case "FLO":
            return /^R[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{51}$/.test(key);
            break;              
        case "FLO_TEST":
            return /^c[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{51}$/.test(key);
            break;
    
        default:
            break;
    }

  };

  // 44 characters
  ECKey.isBase64Format = function(key) {
    key = key.toString();
    return /^[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789=+\/]{44}$/.test(
      key
    );
  };

  // 99 characters, 1=1, if using dice convert 6 to 0
  ECKey.isBase6Format = function(key) {
    key = key.toString();
    return /^[012345]{99}$/.test(key);
  };

  // 22, 26 or 30 characters, always starts with an 'S'
  ECKey.isMiniFormat = function(key) {
    key = key.toString();
    var validChars22 = /^S[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21}$/.test(
      key
    );
    var validChars26 = /^S[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{25}$/.test(
      key
    );
    var validChars30 = /^S[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{29}$/.test(
      key
    );
    var testBytes = Crypto.SHA256(key + "?", {
      asBytes: true
    });

    return (
      (testBytes[0] === 0x00 || testBytes[0] === 0x01) &&
      (validChars22 || validChars26 || validChars30)
    );
  };

  return ECKey;
})();
</script>
<script type="text/javascript">
//https://raw.github.com/bitcoinjs/bitcoinjs-lib/09e8c6e184d6501a0c2c59d73ca64db5c0d3eb95/src/util.js
// Bitcoin utility functions
Bitcoin.Util = {
  /**
   * Cross-browser compatibility version of Array.isArray.
   */
  isArray:
    Array.isArray ||
    function(o) {
      return Object.prototype.toString.call(o) === "[object Array]";
    },
  /**
   * Create an array of a certain length filled with a specific value.
   */
  makeFilledArray: function(len, val) {
    var array = [];
    var i = 0;
    while (i < len) {
      array[i++] = val;
    }
    return array;
  },
  /**
   * Turn an integer into a "var_int".
   *
   * "var_int" is a variable length integer used by Bitcoin's binary format.
   *
   * Returns a byte array.
   */
  numToVarInt: function(i) {
    if (i < 0xfd) {
      // unsigned char
      return [i];
    } else if (i <= 1 << 16) {
      // unsigned short (LE)
      return [0xfd, i >>> 8, i & 255];
    } else if (i <= 1 << 32) {
      // unsigned int (LE)
      return [0xfe].concat(Crypto.util.wordsToBytes([i]));
    } else {
      // unsigned long long (LE)
      return [0xff].concat(Crypto.util.wordsToBytes([i >>> 32, i]));
    }
  },
  /**
   * Parse a Bitcoin value byte array, returning a BigInteger.
   */
  valueToBigInt: function(valueBuffer) {
    if (valueBuffer instanceof BigInteger) return valueBuffer;

    // Prepend zero byte to prevent interpretation as negative integer
    return BigInteger.fromByteArrayUnsigned(valueBuffer);
  },
  /**
   * Format a Bitcoin value as a string.
   *
   * Takes a BigInteger or byte-array and returns that amount of Bitcoins in a
   * nice standard formatting.
   *
   * Examples:
   * 12.3555
   * 0.1234
   * 900.99998888
   * 34.00
   */
  formatValue: function(valueBuffer) {
    var value = this.valueToBigInt(valueBuffer).toString();
    var integerPart =
      value.length > 8 ? value.substr(0, value.length - 8) : "0";
    var decimalPart =
      value.length > 8 ? value.substr(value.length - 8) : value;
    while (decimalPart.length < 8) decimalPart = "0" + decimalPart;
    decimalPart = decimalPart.replace(/0*$/, "");
    while (decimalPart.length < 2) decimalPart += "0";
    return integerPart + "." + decimalPart;
  },
  /**
   * Parse a floating point string as a Bitcoin value.
   *
   * Keep in mind that parsing user input is messy. You should always display
   * the parsed value back to the user to make sure we understood his input
   * correctly.
   */
  parseValue: function(valueString) {
    // TODO: Detect other number formats (e.g. comma as decimal separator)
    var valueComp = valueString.split(".");
    var integralPart = valueComp[0];
    var fractionalPart = valueComp[1] || "0";
    while (fractionalPart.length < 8) fractionalPart += "0";
    fractionalPart = fractionalPart.replace(/^0+/g, "");
    var value = BigInteger.valueOf(parseInt(integralPart));
    value = value.multiply(BigInteger.valueOf(100000000));
    value = value.add(BigInteger.valueOf(parseInt(fractionalPart)));
    return value;
  },
  /**
   * Calculate RIPEMD160(SHA256(data)).
   *
   * Takes an arbitrary byte array as inputs and returns the hash as a byte
   * array.
   */
  sha256ripe160: function(data) {
    return Crypto.RIPEMD160(
      Crypto.SHA256(data, {
        asBytes: true
      }),
      {
        asBytes: true
      }
    );
  },
  // double sha256
  dsha256: function(data) {
    return Crypto.SHA256(
      Crypto.SHA256(data, {
        asBytes: true
      }),
      {
        asBytes: true
      }
    );
  },
  // duck typing method
  hasMethods: function(obj /*, method list as strings */) {
    var i = 1,
      methodName;
    while ((methodName = arguments[i++])) {
      if (typeof obj[methodName] != "function") {
        return false;
      }
    }
    return true;
  }
};
</script>
<script type="text/javascript">
/*
 * Copyright (c) 2010-2011 Intalio Pte, All Rights Reserved
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
// https://github.com/cheongwy/node-scrypt-js
(function() {
  var MAX_VALUE = 2147483647;
  var workerUrl = null;

  //function scrypt(byte[] passwd, byte[] salt, int N, int r, int p, int dkLen)
  /*
   * N = Cpu cost
   * r = Memory cost
   * p = parallelization cost
   *
   */
  window.Crypto_scrypt = function(
    passwd,
    salt,
    N,
    r,
    p,
    dkLen,
    callback
  ) {
    if (N == 0 || (N & (N - 1)) != 0)
      throw Error("N must be > 0 and a power of 2");

    if (N > MAX_VALUE / 128 / r) throw Error("Parameter N is too large");
    if (r > MAX_VALUE / 128 / p) throw Error("Parameter r is too large");

    var PBKDF2_opts = {
      iterations: 1,
      hasher: Crypto.SHA256,
      asBytes: true
    };

    var B = Crypto.PBKDF2(passwd, salt, p * 128 * r, PBKDF2_opts);

    try {
      var i = 0;
      var worksDone = 0;
      var makeWorker = function() {
        if (!workerUrl) {
          var code = "(" + scryptCore.toString() + ")()";
          var blob;
          try {
            blob = new Blob([code], {
              type: "text/javascript"
            });
          } catch (e) {
            window.BlobBuilder =
              window.BlobBuilder ||
              window.WebKitBlobBuilder ||
              window.MozBlobBuilder ||
              window.MSBlobBuilder;
            blob = new BlobBuilder();
            blob.append(code);
            blob = blob.getBlob("text/javascript");
          }
          workerUrl = URL.createObjectURL(blob);
        }
        var worker = new Worker(workerUrl);
        worker.onmessage = function(event) {
          var Bi = event.data[0],
            Bslice = event.data[1];
          worksDone++;

          if (i < p) {
            worker.postMessage([N, r, p, B, i++]);
          }

          var length = Bslice.length,
            destPos = Bi * 128 * r,
            srcPos = 0;
          while (length--) {
            B[destPos++] = Bslice[srcPos++];
          }

          if (worksDone == p) {
            callback(Crypto.PBKDF2(passwd, B, dkLen, PBKDF2_opts));
          }
        };
        return worker;
      };
      var workers = [makeWorker(), makeWorker()];
      workers[0].postMessage([N, r, p, B, i++]);
      if (p > 1) {
        workers[1].postMessage([N, r, p, B, i++]);
      }
    } catch (e) {
      window.setTimeout(function() {
        scryptCore();
        callback(Crypto.PBKDF2(passwd, B, dkLen, PBKDF2_opts));
      }, 0);
    }

    // using this function to enclose everything needed to create a worker (but also invokable directly for synchronous use)
    function scryptCore() {
      var XY = [],
        V = [];

      if (typeof B === "undefined") {
        onmessage = function(event) {
          var data = event.data;
          var N = data[0],
            r = data[1],
            p = data[2],
            B = data[3],
            i = data[4];

          var Bslice = [];
          arraycopy32(B, i * 128 * r, Bslice, 0, 128 * r);
          smix(Bslice, 0, r, N, V, XY);

          postMessage([i, Bslice]);
        };
      } else {
        for (var i = 0; i < p; i++) {
          smix(B, i * 128 * r, r, N, V, XY);
        }
      }

      function smix(B, Bi, r, N, V, XY) {
        var Xi = 0;
        var Yi = 128 * r;
        var i;

        arraycopy32(B, Bi, XY, Xi, Yi);

        for (i = 0; i < N; i++) {
          arraycopy32(XY, Xi, V, i * Yi, Yi);
          blockmix_salsa8(XY, Xi, Yi, r);
        }

        for (i = 0; i < N; i++) {
          var j = integerify(XY, Xi, r) & (N - 1);
          blockxor(V, j * Yi, XY, Xi, Yi);
          blockmix_salsa8(XY, Xi, Yi, r);
        }

        arraycopy32(XY, Xi, B, Bi, Yi);
      }

      function blockmix_salsa8(BY, Bi, Yi, r) {
        var X = [];
        var i;

        arraycopy32(BY, Bi + (2 * r - 1) * 64, X, 0, 64);

        for (i = 0; i < 2 * r; i++) {
          blockxor(BY, i * 64, X, 0, 64);
          salsa20_8(X);
          arraycopy32(X, 0, BY, Yi + i * 64, 64);
        }

        for (i = 0; i < r; i++) {
          arraycopy32(BY, Yi + i * 2 * 64, BY, Bi + i * 64, 64);
        }

        for (i = 0; i < r; i++) {
          arraycopy32(
            BY,
            Yi + (i * 2 + 1) * 64,
            BY,
            Bi + (i + r) * 64,
            64
          );
        }
      }

      function R(a, b) {
        return (a << b) | (a >>> (32 - b));
      }

      function salsa20_8(B) {
        var B32 = new Array(32);
        var x = new Array(32);
        var i;

        for (i = 0; i < 16; i++) {
          B32[i] = (B[i * 4 + 0] & 0xff) << 0;
          B32[i] |= (B[i * 4 + 1] & 0xff) << 8;
          B32[i] |= (B[i * 4 + 2] & 0xff) << 16;
          B32[i] |= (B[i * 4 + 3] & 0xff) << 24;
        }

        arraycopy(B32, 0, x, 0, 16);

        for (i = 8; i > 0; i -= 2) {
          x[4] ^= R(x[0] + x[12], 7);
          x[8] ^= R(x[4] + x[0], 9);
          x[12] ^= R(x[8] + x[4], 13);
          x[0] ^= R(x[12] + x[8], 18);
          x[9] ^= R(x[5] + x[1], 7);
          x[13] ^= R(x[9] + x[5], 9);
          x[1] ^= R(x[13] + x[9], 13);
          x[5] ^= R(x[1] + x[13], 18);
          x[14] ^= R(x[10] + x[6], 7);
          x[2] ^= R(x[14] + x[10], 9);
          x[6] ^= R(x[2] + x[14], 13);
          x[10] ^= R(x[6] + x[2], 18);
          x[3] ^= R(x[15] + x[11], 7);
          x[7] ^= R(x[3] + x[15], 9);
          x[11] ^= R(x[7] + x[3], 13);
          x[15] ^= R(x[11] + x[7], 18);
          x[1] ^= R(x[0] + x[3], 7);
          x[2] ^= R(x[1] + x[0], 9);
          x[3] ^= R(x[2] + x[1], 13);
          x[0] ^= R(x[3] + x[2], 18);
          x[6] ^= R(x[5] + x[4], 7);
          x[7] ^= R(x[6] + x[5], 9);
          x[4] ^= R(x[7] + x[6], 13);
          x[5] ^= R(x[4] + x[7], 18);
          x[11] ^= R(x[10] + x[9], 7);
          x[8] ^= R(x[11] + x[10], 9);
          x[9] ^= R(x[8] + x[11], 13);
          x[10] ^= R(x[9] + x[8], 18);
          x[12] ^= R(x[15] + x[14], 7);
          x[13] ^= R(x[12] + x[15], 9);
          x[14] ^= R(x[13] + x[12], 13);
          x[15] ^= R(x[14] + x[13], 18);
        }

        for (i = 0; i < 16; ++i) B32[i] = x[i] + B32[i];

        for (i = 0; i < 16; i++) {
          var bi = i * 4;
          B[bi + 0] = (B32[i] >> 0) & 0xff;
          B[bi + 1] = (B32[i] >> 8) & 0xff;
          B[bi + 2] = (B32[i] >> 16) & 0xff;
          B[bi + 3] = (B32[i] >> 24) & 0xff;
        }
      }

      function blockxor(S, Si, D, Di, len) {
        var i = len >> 6;
        while (i--) {
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];

          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];

          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];

          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];

          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];

          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];

          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];

          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
          D[Di++] ^= S[Si++];
        }
      }

      function integerify(B, bi, r) {
        var n;

        bi += (2 * r - 1) * 64;

        n = (B[bi + 0] & 0xff) << 0;
        n |= (B[bi + 1] & 0xff) << 8;
        n |= (B[bi + 2] & 0xff) << 16;
        n |= (B[bi + 3] & 0xff) << 24;

        return n;
      }

      function arraycopy(src, srcPos, dest, destPos, length) {
        while (length--) {
          dest[destPos++] = src[srcPos++];
        }
      }

      function arraycopy32(src, srcPos, dest, destPos, length) {
        var i = length >> 5;
        while (i--) {
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];

          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];

          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];

          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
          dest[destPos++] = src[srcPos++];
        }
      }
    } // scryptCore
  }; // window.Crypto_scrypt
})();
</script>
<!-- bitjs.js -->
<script>
function bitjslib(crypto_asset) {
  var bitjs = (window.bitjs[crypto_asset] = function() {});

  if (crypto_asset == "BTC") {
    bitjs.priv = 0x80; //mainnet 0x80, testnet:
    bitjs.pub = 0x00; //mainnet 0x23, testnet:
  } else if (crypto_asset == "BTC_TEST") {
    bitjs.priv = 0xef;
    bitjs.pub = 0x6f;
  } else if (crypto_asset == "FLO") {
    bitjs.priv = 0xa3;
    bitjs.pub = 0x23;
  } else if (crypto_asset == "FLO_TEST") {
    bitjs.priv = 0xef;
    bitjs.pub = 0x73;
  } else {
    bitjs.priv = 0xef;
    bitjs.pub = 0x6f;
  }

  /* public vars */
  bitjs.compressed = true;

  /* provide a privkey and return an WIF  */
  bitjs.privkey2wif = function(h) {
    var r = Crypto.util.hexToBytes(h);

    if (bitjs.compressed == true) {
      r.push(0x01);
    }

    r.unshift(bitjs.priv);
    var hash = Crypto.SHA256(
      Crypto.SHA256(r, {
        asBytes: true
      }),
      {
        asBytes: true
      }
    );
    var checksum = hash.slice(0, 4);

    return B58.encode(r.concat(checksum));
  };

  /* convert a wif key back to a private key */
  bitjs.wif2privkey = function(wif) {
    var compressed = false;
    var decode = B58.decode(wif);
    var key = decode.slice(0, decode.length - 4);
    key = key.slice(1, key.length);
    if (key.length >= 33 && key[key.length - 1] == 0x01) {
      key = key.slice(0, key.length - 1);
      compressed = true;
    }
    return {
      privkey: Crypto.util.bytesToHex(key),
      compressed: compressed
    };
  };

  /* convert a wif to a pubkey */
  bitjs.wif2pubkey = function(wif) {
    var compressed = bitjs.compressed;
    var r = bitjs.wif2privkey(wif);
    bitjs.compressed = r["compressed"];
    var pubkey = bitjs.newPubkey(r["privkey"]);
    bitjs.compressed = compressed;
    return {
      pubkey: pubkey,
      compressed: r["compressed"]
    };
  };

  /* convert a wif to a address */
  bitjs.wif2address = function(wif) {
    var r = bitjs.wif2pubkey(wif);
    return {
      address: bitjs.pubkey2address(r["pubkey"]),
      compressed: r["compressed"]
    };
  };

  /* generate a public key from a private key */
  bitjs.newPubkey = function(hash) {
    var privateKeyBigInt = BigInteger.fromByteArrayUnsigned(
      Crypto.util.hexToBytes(hash)
    );
    var curve = EllipticCurve.getSECCurveByName("secp256k1");

    var curvePt = curve.getG().multiply(privateKeyBigInt);
    var x = curvePt.getX().toBigInteger();
    var y = curvePt.getY().toBigInteger();

    var publicKeyBytes = EllipticCurve.integerToBytes(x, 32);
    publicKeyBytes = publicKeyBytes.concat(
      EllipticCurve.integerToBytes(y, 32)
    );
    publicKeyBytes.unshift(0x04);

    if (bitjs.compressed == true) {
      var publicKeyBytesCompressed = EllipticCurve.integerToBytes(x, 32);
      if (y.isEven()) {
        publicKeyBytesCompressed.unshift(0x02);
      } else {
        publicKeyBytesCompressed.unshift(0x03);
      }
      return Crypto.util.bytesToHex(publicKeyBytesCompressed);
    } else {
      return Crypto.util.bytesToHex(publicKeyBytes);
    }
  };

  /* provide a public key and return address */
  bitjs.pubkey2address = function(h, byte) {
    var r = ripemd160(
      Crypto.SHA256(Crypto.util.hexToBytes(h), {
        asBytes: true
      })
    );
    r.unshift(byte || bitjs.pub);
    var hash = Crypto.SHA256(
      Crypto.SHA256(r, {
        asBytes: true
      }),
      {
        asBytes: true
      }
    );
    var checksum = hash.slice(0, 4);
    return B58.encode(r.concat(checksum));
  };

  bitjs.transaction = function() {
    var btrx = {};

    btrx.inputs = [];
    btrx.outputs = [];
    btrx.locktime = 0;

    if (crypto_asset == "FLO" || crypto_asset == "FLO_TEST") {
      btrx.version = 2; //flochange look at this version
      btrx.floData = ""; //flochange .. look at this
    } else if (crypto_asset == "BTC" || crypto_asset == "BTC_TEST") {
      btrx.version = 1;
    }

    btrx.addinput = function(txid, index, scriptPubKey, sequence) {
      var o = {};
      o.outpoint = {
        hash: txid,
        index: index
      };
      //o.script = []; Signature and Public Key should be added after singning
      o.script = Crypto.util.hexToBytes(scriptPubKey); //push previous output pubkey script
      o.sequence = sequence || (btrx.locktime == 0 ? 4294967295 : 0);
      return this.inputs.push(o);
    };

    btrx.addoutput = function(address, value) {
      var o = {};
      var buf = [];
      var addrDecoded = btrx.addressDecode(address);
      o.value = new BigInteger("" + Math.round(value * 1 * 1e8), 10);
      buf.push(118); //OP_DUP
      buf.push(169); //OP_HASH160
      buf.push(addrDecoded.length);
      buf = buf.concat(addrDecoded); // address in bytes
      buf.push(136); //OP_EQUALVERIFY
      buf.push(172); //  OP_CHECKSIG
      o.script = buf;
      return this.outputs.push(o);
    };

    if (crypto_asset == "FLO" || crypto_asset == "FLO_TEST") {
      btrx.addflodata = function(txcomments) {
        // flochange - this whole function needs to be done
        this.floData = txcomments;
        return this.floData; //flochange .. returning the txcomments -- check if the function return will assign
      };
    }

    // Only standard addresses
    btrx.addressDecode = function(address) {
      var bytes = B58.decode(address);
      var front = bytes.slice(0, bytes.length - 4);
      var back = bytes.slice(bytes.length - 4);
      var checksum = Crypto.SHA256(
        Crypto.SHA256(front, {
          asBytes: true
        }),
        {
          asBytes: true
        }
      ).slice(0, 4);
      if (checksum + "" == back + "") {
        return front.slice(1);
      }
    };

    /* generate the transaction hash to sign from a transaction input */
    btrx.transactionHash = function(index, sigHashType) {
      var clone = bitjs.clone(this);
      var shType = sigHashType || 1;

      /* black out all other ins, except this one */
      for (var i = 0; i < clone.inputs.length; i++) {
        if (index != i) {
          clone.inputs[i].script = [];
        }
      }

      if (clone.inputs && clone.inputs[index]) {
        /* SIGHASH : For more info on sig hashs see https://en.bitcoin.it/wiki/OP_CHECKSIG
                      and https://bitcoin.org/en/developer-guide#signature-hash-type */

        if (shType == 1) {
          //SIGHASH_ALL 0x01
        } else if (shType == 2) {
          //SIGHASH_NONE 0x02
          clone.outputs = [];
          for (var i = 0; i < clone.inputs.length; i++) {
            if (index != i) {
              clone.inputs[i].sequence = 0;
            }
          }
        } else if (shType == 3) {
          //SIGHASH_SINGLE 0x03
          clone.outputs.length = index + 1;

          for (var i = 0; i < index; i++) {
            clone.outputs[i].value = -1;
            clone.outputs[i].script = [];
          }

          for (var i = 0; i < clone.inputs.length; i++) {
            if (index != i) {
              clone.inputs[i].sequence = 0;
            }
          }
        } else if (shType >= 128) {
          //SIGHASH_ANYONECANPAY 0x80
          clone.inputs = [clone.inputs[index]];

          if (shType == 129) {
            // SIGHASH_ALL + SIGHASH_ANYONECANPAY
          } else if (shType == 130) {
            // SIGHASH_NONE + SIGHASH_ANYONECANPAY
            clone.outputs = [];
          } else if (shType == 131) {
            // SIGHASH_SINGLE + SIGHASH_ANYONECANPAY
            clone.outputs.length = index + 1;
            for (var i = 0; i < index; i++) {
              clone.outputs[i].value = -1;
              clone.outputs[i].script = [];
            }
          }
        }

        var buffer = Crypto.util.hexToBytes(clone.serialize());
        buffer = buffer.concat(bitjs.numToBytes(parseInt(shType), 4));
        var hash = Crypto.SHA256(buffer, {
          asBytes: true
        });
        var r = Crypto.util.bytesToHex(
          Crypto.SHA256(hash, {
            asBytes: true
          })
        );
        return r;
      } else {
        return false;
      }
    };

    /* generate a signature from a transaction hash */
    btrx.transactionSig = function(index, wif, sigHashType, txhash) {
      function serializeSig(r, s) {
        var rBa = r.toByteArraySigned();
        var sBa = s.toByteArraySigned();

        var sequence = [];
        sequence.push(0x02); // INTEGER
        sequence.push(rBa.length);
        sequence = sequence.concat(rBa);

        sequence.push(0x02); // INTEGER
        sequence.push(sBa.length);
        sequence = sequence.concat(sBa);

        sequence.unshift(sequence.length);
        sequence.unshift(0x30); // SEQUENCE

        return sequence;
      }

      var shType = sigHashType || 1;
      var hash =
        txhash ||
        Crypto.util.hexToBytes(this.transactionHash(index, shType));

      if (hash) {
        var curve = EllipticCurve.getSECCurveByName("secp256k1");
        var key = bitjs.wif2privkey(wif);
        var priv = BigInteger.fromByteArrayUnsigned(
          Crypto.util.hexToBytes(key["privkey"])
        );
        var n = curve.getN();
        var e = BigInteger.fromByteArrayUnsigned(hash);
        var badrs = 0;
        do {
          var k = this.deterministicK(wif, hash, badrs);
          var G = curve.getG();
          var Q = G.multiply(k);
          var r = Q.getX()
            .toBigInteger()
            .mod(n);
          var s = k
            .modInverse(n)
            .multiply(e.add(priv.multiply(r)))
            .mod(n);
          badrs++;
        } while (
          r.compareTo(BigInteger.ZERO) <= 0 ||
          s.compareTo(BigInteger.ZERO) <= 0
        );

        // Force lower s values per BIP62
        var halfn = n.shiftRight(1);
        if (s.compareTo(halfn) > 0) {
          s = n.subtract(s);
        }

        var sig = serializeSig(r, s);
        sig.push(parseInt(shType, 10));

        return Crypto.util.bytesToHex(sig);
      } else {
        return false;
      }
    };

    // https://tools.ietf.org/html/rfc6979#section-3.2
    btrx.deterministicK = function(wif, hash, badrs) {
      // if r or s were invalid when this function was used in signing,
      // we do not want to actually compute r, s here for efficiency, so,
      // we can increment badrs. explained at end of RFC 6979 section 3.2

      // wif is b58check encoded wif privkey.
      // hash is byte array of transaction digest.
      // badrs is used only if the k resulted in bad r or s.

      // some necessary things out of the way for clarity.
      badrs = badrs || 0;
      var key = bitjs.wif2privkey(wif);
      var x = Crypto.util.hexToBytes(key["privkey"]);
      var curve = EllipticCurve.getSECCurveByName("secp256k1");
      var N = curve.getN();

      // Step: a
      // hash is a byteArray of the message digest. so h1 == hash in our case

      // Step: b
      var v = [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ];

      // Step: c
      var k = [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ];

      // Step: d
      k = Crypto.HMAC(
        Crypto.SHA256,
        v
          .concat([0])
          .concat(x)
          .concat(hash),
        k,
        {
          asBytes: true
        }
      );

      // Step: e
      v = Crypto.HMAC(Crypto.SHA256, v, k, {
        asBytes: true
      });

      // Step: f
      k = Crypto.HMAC(
        Crypto.SHA256,
        v
          .concat([1])
          .concat(x)
          .concat(hash),
        k,
        {
          asBytes: true
        }
      );

      // Step: g
      v = Crypto.HMAC(Crypto.SHA256, v, k, {
        asBytes: true
      });

      // Step: h1
      var T = [];

      // Step: h2 (since we know tlen = qlen, just copy v to T.)
      v = Crypto.HMAC(Crypto.SHA256, v, k, {
        asBytes: true
      });
      T = v;

      // Step: h3
      var KBigInt = BigInteger.fromByteArrayUnsigned(T);

      // loop if KBigInt is not in the range of [1, N-1] or if badrs needs incrementing.
      var i = 0;
      while (
        KBigInt.compareTo(N) >= 0 ||
        KBigInt.compareTo(BigInteger.ZERO) <= 0 ||
        i < badrs
      ) {
        k = Crypto.HMAC(Crypto.SHA256, v.concat([0]), k, {
          asBytes: true
        });
        v = Crypto.HMAC(Crypto.SHA256, v, k, {
          asBytes: true
        });
        v = Crypto.HMAC(Crypto.SHA256, v, k, {
          asBytes: true
        });
        T = v;
        KBigInt = BigInteger.fromByteArrayUnsigned(T);
        i++;
      }

      return KBigInt;
    };

    /* sign a "standard" input */
    btrx.signinput = function(index, wif, sigHashType) {
      var key = bitjs.wif2pubkey(wif);
      var shType = sigHashType || 1;
      var signature = this.transactionSig(index, wif, shType);
      var buf = [];
      var sigBytes = Crypto.util.hexToBytes(signature);
      buf.push(sigBytes.length);
      buf = buf.concat(sigBytes);
      var pubKeyBytes = Crypto.util.hexToBytes(key["pubkey"]);
      buf.push(pubKeyBytes.length);
      buf = buf.concat(pubKeyBytes);
      this.inputs[index].script = buf;
      return true;
    };

    /* sign inputs */
    btrx.sign = function(wifs, sigHashType) {
      var shType = sigHashType || 1;
      for (var i = 0; i < this.inputs.length; i++) {
          this.signinput(i, wifs[i], shType);
      }
      return this.serialize();
    };

    /* serialize a transaction */
    btrx.serialize = function() {
      if (crypto_asset == "FLO" || crypto_asset == "FLO_TEST") {
        var buffer = [];
        buffer = buffer.concat(
          bitjs.numToBytes(parseInt(this.version), 4)
        );

        buffer = buffer.concat(bitjs.numToVarInt(this.inputs.length));
        for (var i = 0; i < this.inputs.length; i++) {
          var txin = this.inputs[i];
          buffer = buffer.concat(
            Crypto.util.hexToBytes(txin.outpoint.hash).reverse()
          );
          buffer = buffer.concat(
            bitjs.numToBytes(parseInt(txin.outpoint.index), 4)
          );
          var scriptBytes = txin.script;
          buffer = buffer.concat(bitjs.numToVarInt(scriptBytes.length));
          buffer = buffer.concat(scriptBytes);
          buffer = buffer.concat(
            bitjs.numToBytes(parseInt(txin.sequence), 4)
          );
        }
        buffer = buffer.concat(bitjs.numToVarInt(this.outputs.length));

        for (var i = 0; i < this.outputs.length; i++) {
          var txout = this.outputs[i];
          buffer = buffer.concat(bitjs.numToBytes(txout.value, 8));
          var scriptBytes = txout.script;
          buffer = buffer.concat(bitjs.numToVarInt(scriptBytes.length));
          buffer = buffer.concat(scriptBytes);
        }

        buffer = buffer.concat(
          bitjs.numToBytes(parseInt(this.locktime), 4)
        );
        flohex = ascii_to_hexa(this.floData);
        floDataCount = this.floData.length;

        //flochange -- creating unique data character count logic for floData. This string is prefixed before actual floData string in Raw Transaction
        if (floDataCount <= 16) {
          floDataCountString = floDataCount.toString(16);
          floDataCountString = "0" + floDataCountString;
        } else if (floDataCount < 253) {
          floDataCountString = floDataCount.toString(16);
        } else if (floDataCount <= 1023) {
          floDataCountAdjusted =
            floDataCount - 253 + parseInt("0xfd00fd");
          floDataCountStringAdjusted = floDataCountAdjusted.toString(16);
          floDataCountString =
            floDataCountStringAdjusted.substr(0, 2) +
            floDataCountStringAdjusted.substr(4, 2) +
            floDataCountStringAdjusted.substr(2, 2);
        } else {
          floDataCountString = "Character Limit Exceeded";
        }
        return (
          Crypto.util.bytesToHex(buffer) + floDataCountString + flohex
        ); // flochange -- Addition of floDataCountString and floData in serialization
      } else if (crypto_asset == "BTC" || crypto_asset == "BTC_TEST") {
        var buffer = [];
        buffer = buffer.concat(
          bitjs.numToBytes(parseInt(this.version), 4)
        );

        buffer = buffer.concat(bitjs.numToVarInt(this.inputs.length));
        for (var i = 0; i < this.inputs.length; i++) {
          var txin = this.inputs[i];
          buffer = buffer.concat(
            Crypto.util.hexToBytes(txin.outpoint.hash).reverse()
          );
          buffer = buffer.concat(
            bitjs.numToBytes(parseInt(txin.outpoint.index), 4)
          );
          var scriptBytes = txin.script;
          buffer = buffer.concat(bitjs.numToVarInt(scriptBytes.length));
          buffer = buffer.concat(scriptBytes);
          buffer = buffer.concat(
            bitjs.numToBytes(parseInt(txin.sequence), 4)
          );
        }
        buffer = buffer.concat(bitjs.numToVarInt(this.outputs.length));

        for (var i = 0; i < this.outputs.length; i++) {
          var txout = this.outputs[i];
          buffer = buffer.concat(bitjs.numToBytes(txout.value, 8));
          var scriptBytes = txout.script;
          buffer = buffer.concat(bitjs.numToVarInt(scriptBytes.length));
          buffer = buffer.concat(scriptBytes);
        }

        buffer = buffer.concat(
          bitjs.numToBytes(parseInt(this.locktime), 4)
        );
        return Crypto.util.bytesToHex(buffer);
      }
    };
    return btrx;
  };

  bitjs.numToBytes = function(num, bytes) {
    if (typeof bytes === "undefined") bytes = 8;
    if (bytes == 0) {
      return [];
    } else if (num == -1) {
      return Crypto.util.hexToBytes("ffffffffffffffff");
    } else {
      return [num % 256].concat(
        bitjs.numToBytes(Math.floor(num / 256), bytes - 1)
      );
    }
  };

  bitjs.numToByteArray = function(num) {
    if (num <= 256) {
      return [num];
    } else {
      return [num % 256].concat(
        bitjs.numToByteArray(Math.floor(num / 256))
      );
    }
  };

  bitjs.numToVarInt = function(num) {
    if (num < 253) {
      return [num];
    } else if (num < 65536) {
      return [253].concat(bitjs.numToBytes(num, 2));
    } else if (num < 4294967296) {
      return [254].concat(bitjs.numToBytes(num, 4));
    } else {
      return [255].concat(bitjs.numToBytes(num, 8));
    }
  };

  bitjs.bytesToNum = function(bytes) {
    if (bytes.length == 0) return 0;
    else return bytes[0] + 256 * bitjs.bytesToNum(bytes.slice(1));
  };

  /* clone an object */
  bitjs.clone = function(obj) {
    if (obj == null || typeof obj != "object") return obj;
    var temp = new obj.constructor();

    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        temp[key] = bitjs.clone(obj[key]);
      }
    }
    return temp;
  };

  var B58 = (bitjs.Base58 = {
    alphabet:
      "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
    validRegex: /^[1-9A-HJ-NP-Za-km-z]+$/,
    base: BigInteger.valueOf(58),

    /**
     * Convert a byte array to a base58-encoded string.
     *
     * Written by Mike Hearn for BitcoinJ.
     *   Copyright (c) 2011 Google Inc.
     *
     * Ported to JavaScript by Stefan Thomas.
     */
    encode: function(input) {
      var bi = BigInteger.fromByteArrayUnsigned(input);
      var chars = [];

      while (bi.compareTo(B58.base) >= 0) {
        var mod = bi.mod(B58.base);
        chars.unshift(B58.alphabet[mod.intValue()]);
        bi = bi.subtract(mod).divide(B58.base);
      }
      chars.unshift(B58.alphabet[bi.intValue()]);

      // Convert leading zeros too.
      for (var i = 0; i < input.length; i++) {
        if (input[i] == 0x00) {
          chars.unshift(B58.alphabet[0]);
        } else break;
      }

      return chars.join("");
    },

    /**
     * Convert a base58-encoded string to a byte array.
     *
     * Written by Mike Hearn for BitcoinJ.
     *   Copyright (c) 2011 Google Inc.
     *
     * Ported to JavaScript by Stefan Thomas.
     */
    decode: function(input) {
      var bi = BigInteger.valueOf(0);
      var leadingZerosNum = 0;
      for (var i = input.length - 1; i >= 0; i--) {
        var alphaIndex = B58.alphabet.indexOf(input[i]);
        if (alphaIndex < 0) {
          throw "Invalid character";
        }
        bi = bi.add(
          BigInteger.valueOf(alphaIndex).multiply(
            B58.base.pow(input.length - 1 - i)
          )
        );

        // This counts leading zero bytes
        if (input[i] == "1") leadingZerosNum++;
        else leadingZerosNum = 0;
      }
      var bytes = bi.toByteArrayUnsigned();

      // Add leading zeros
      while (leadingZerosNum-- > 0) bytes.unshift(0);

      return bytes;
    }
  });
  return bitjs;
}
</script>
<!-- Shamir's secret (https://github.com/amper5and/secrets.js) -->
<script>
// secrets.js - by Alexander Stetsyuk - released under MIT License
(function(exports, global) {
  var defaults = {
    bits: 8, // default number of bits
    radix: 16, // work with HEX by default
    minBits: 3,
    maxBits: 20, // this permits 1,048,575 shares, though going this high is NOT recommended in JS!

    bytesPerChar: 2,
    maxBytesPerChar: 6, // Math.pow(256,7) > Math.pow(2,53)

    // Primitive polynomials (in decimal form) for Galois Fields GF(2^n), for 2 <= n <= 30
    // The index of each term in the array corresponds to the n for that polynomial
    // i.e. to get the polynomial for n=16, use primitivePolynomials[16]
    primitivePolynomials: [
      null,
      null,
      1,
      3,
      3,
      5,
      3,
      3,
      29,
      17,
      9,
      5,
      83,
      27,
      43,
      3,
      45,
      9,
      39,
      39,
      9,
      5,
      3,
      33,
      27,
      9,
      71,
      39,
      9,
      5,
      83
    ],

    // warning for insecure PRNG
    warning:
      "WARNING:\nA secure random number generator was not found.\nUsing Math.random(), which is NOT cryptographically strong!"
  };

  // Protected settings object
  var config = {};

  /** @expose **/
  exports.getConfig = function() {
    return {
      bits: config.bits,
      unsafePRNG: config.unsafePRNG
    };
  };

  function init(bits) {
    if (
      bits &&
      (typeof bits !== "number" ||
        bits % 1 !== 0 ||
        bits < defaults.minBits ||
        bits > defaults.maxBits)
    ) {
      throw new Error(
        "Number of bits must be an integer between " +
          defaults.minBits +
          " and " +
          defaults.maxBits +
          ", inclusive."
      );
    }

    config.radix = defaults.radix;
    config.bits = bits || defaults.bits;
    config.size = Math.pow(2, config.bits);
    config.max = config.size - 1;

    // Construct the exp and log tables for multiplication.
    var logs = [],
      exps = [],
      x = 1,
      primitive = defaults.primitivePolynomials[config.bits];
    for (var i = 0; i < config.size; i++) {
      exps[i] = x;
      logs[x] = i;
      x <<= 1;
      if (x >= config.size) {
        x ^= primitive;
        x &= config.max;
      }
    }

    config.logs = logs;
    config.exps = exps;
  }

  /** @expose **/
  exports.init = init;

  function isInited() {
    if (
      !config.bits ||
      !config.size ||
      !config.max ||
      !config.logs ||
      !config.exps ||
      config.logs.length !== config.size ||
      config.exps.length !== config.size
    ) {
      return false;
    }
    return true;
  }

  // Returns a pseudo-random number generator of the form function(bits){}
  // which should output a random string of 1's and 0's of length `bits`
  function getRNG() {
    var randomBits, crypto;

    function construct(bits, arr, radix, size) {
      var str = "",
        i = 0,
        len = arr.length - 1;
      while (i < len || str.length < bits) {
        str += padLeft(parseInt(arr[i], radix).toString(2), size);
        i++;
      }
      str = str.substr(-bits);
      if ((str.match(/0/g) || []).length === str.length) {
        // all zeros?
        return null;
      } else {
        return str;
      }
    }

    // node.js crypto.randomBytes()
    if (
      typeof require === "function" &&
      (crypto = require("crypto")) &&
      (randomBits = crypto["randomBytes"])
    ) {
      return function(bits) {
        var bytes = Math.ceil(bits / 8),
          str = null;

        while (str === null) {
          str = construct(bits, randomBits(bytes).toString("hex"), 16, 4);
        }
        return str;
      };
    }

    // browsers with window.crypto.getRandomValues()
    if (
      global["crypto"] &&
      typeof global["crypto"]["getRandomValues"] === "function" &&
      typeof global["Uint32Array"] === "function"
    ) {
      crypto = global["crypto"];
      return function(bits) {
        var elems = Math.ceil(bits / 32),
          str = null,
          arr = new global["Uint32Array"](elems);

        while (str === null) {
          crypto["getRandomValues"](arr);
          str = construct(bits, arr, 10, 32);
        }

        return str;
      };
    }

    // A totally insecure RNG!!! (except in Safari)
    // Will produce a warning every time it is called.
    config.unsafePRNG = true;
    warn();

    var bitsPerNum = 32;
    var max = Math.pow(2, bitsPerNum) - 1;
    return function(bits) {
      var elems = Math.ceil(bits / bitsPerNum);
      var arr = [],
        str = null;
      while (str === null) {
        for (var i = 0; i < elems; i++) {
          arr[i] = Math.floor(Math.random() * max + 1);
        }
        str = construct(bits, arr, 10, bitsPerNum);
      }
      return str;
    };
  }

  // Warn about using insecure rng.
  // Called when Math.random() is being used.
  function warn() {
    global["console"]["warn"](defaults.warning);
    if (typeof global["alert"] === "function" && config.alert) {
      global["alert"](defaults.warning);
    }
  }

  // Set the PRNG to use. If no RNG function is supplied, pick a default using getRNG()
  /** @expose **/
  exports.setRNG = function(rng, alert) {
    if (!isInited()) {
      this.init();
    }
    config.unsafePRNG = false;
    rng = rng || getRNG();

    // test the RNG (5 times)
    if (
      typeof rng !== "function" ||
      typeof rng(config.bits) !== "string" ||
      !parseInt(rng(config.bits), 2) ||
      rng(config.bits).length > config.bits ||
      rng(config.bits).length < config.bits
    ) {
      throw new Error(
        "Random number generator is invalid. Supply an RNG of the form function(bits){} that returns a string containing 'bits' number of random 1's and 0's."
      );
    } else {
      config.rng = rng;
    }
    config.alert = !!alert;

    return !!config.unsafePRNG;
  };

  function isSetRNG() {
    return typeof config.rng === "function";
  }

  // Generates a random bits-length number string using the PRNG
  /** @expose **/
  exports.random = function(bits) {
    if (!isSetRNG()) {
      this.setRNG();
    }

    if (typeof bits !== "number" || bits % 1 !== 0 || bits < 2) {
      throw new Error(
        "Number of bits must be an integer greater than 1."
      );
    }

    if (config.unsafePRNG) {
      warn();
    }
    return bin2hex(config.rng(bits));
  };

  // Divides a `secret` number String str expressed in radix `inputRadix` (optional, default 16)
  // into `numShares` shares, each expressed in radix `outputRadix` (optional, default to `inputRadix`),
  // requiring `threshold` number of shares to reconstruct the secret.
  // Optionally, zero-pads the secret to a length that is a multiple of padLength before sharing.
  /** @expose **/
  exports.share = function(
    secret,
    numShares,
    threshold,
    padLength,
    withoutPrefix
  ) {
    if (!isInited()) {
      this.init();
    }
    if (!isSetRNG()) {
      this.setRNG();
    }

    padLength = padLength || 0;

    if (typeof secret !== "string") {
      throw new Error("Secret must be a string.");
    }
    if (
      typeof numShares !== "number" ||
      numShares % 1 !== 0 ||
      numShares < 2
    ) {
      throw new Error(
        "Number of shares must be an integer between 2 and 2^bits-1 (" +
          config.max +
          "), inclusive."
      );
    }
    if (numShares > config.max) {
      var neededBits = Math.ceil(Math.log(numShares + 1) / Math.LN2);
      throw new Error(
        "Number of shares must be an integer between 2 and 2^bits-1 (" +
          config.max +
          "), inclusive. To create " +
          numShares +
          " shares, use at least " +
          neededBits +
          " bits."
      );
    }
    if (
      typeof threshold !== "number" ||
      threshold % 1 !== 0 ||
      threshold < 2
    ) {
      throw new Error(
        "Threshold number of shares must be an integer between 2 and 2^bits-1 (" +
          config.max +
          "), inclusive."
      );
    }
    if (threshold > config.max) {
      var neededBits = Math.ceil(Math.log(threshold + 1) / Math.LN2);
      throw new Error(
        "Threshold number of shares must be an integer between 2 and 2^bits-1 (" +
          config.max +
          "), inclusive.  To use a threshold of " +
          threshold +
          ", use at least " +
          neededBits +
          " bits."
      );
    }
    if (typeof padLength !== "number" || padLength % 1 !== 0) {
      throw new Error(
        "Zero-pad length must be an integer greater than 1."
      );
    }

    if (config.unsafePRNG) {
      warn();
    }

    secret = "1" + hex2bin(secret); // append a 1 so that we can preserve the correct number of leading zeros in our secret
    secret = split(secret, padLength);
    var x = new Array(numShares),
      y = new Array(numShares);
    for (var i = 0, len = secret.length; i < len; i++) {
      var subShares = this._getShares(secret[i], numShares, threshold);
      for (var j = 0; j < numShares; j++) {
        x[j] = x[j] || subShares[j].x.toString(config.radix);
        y[j] = padLeft(subShares[j].y.toString(2)) + (y[j] ? y[j] : "");
      }
    }
    var padding = config.max.toString(config.radix).length;
    if (withoutPrefix) {
      for (var i = 0; i < numShares; i++) {
        x[i] = bin2hex(y[i]);
      }
    } else {
      for (var i = 0; i < numShares; i++) {
        x[i] =
          config.bits.toString(36).toUpperCase() +
          padLeft(x[i], padding) +
          bin2hex(y[i]);
      }
    }

    return x;
  };

  // This is the basic polynomial generation and evaluation function
  // for a `config.bits`-length secret (NOT an arbitrary length)
  // Note: no error-checking at this stage! If `secrets` is NOT
  // a NUMBER less than 2^bits-1, the output will be incorrect!
  /** @expose **/
  exports._getShares = function(secret, numShares, threshold) {
    var shares = [];
    var coeffs = [secret];

    for (var i = 1; i < threshold; i++) {
      coeffs[i] = parseInt(config.rng(config.bits), 2);
    }
    for (var i = 1, len = numShares + 1; i < len; i++) {
      shares[i - 1] = {
        x: i,
        y: horner(i, coeffs)
      };
    }
    return shares;
  };

  // Polynomial evaluation at `x` using Horner's Method
  // TODO: this can possibly be sped up using other methods
  // NOTE: fx=fx * x + coeff[i] ->  exp(log(fx) + log(x)) + coeff[i],
  //       so if fx===0, just set fx to coeff[i] because
  //       using the exp/log form will result in incorrect value
  function horner(x, coeffs) {
    var logx = config.logs[x];
    var fx = 0;
    for (var i = coeffs.length - 1; i >= 0; i--) {
      if (fx === 0) {
        fx = coeffs[i];
        continue;
      }
      fx = config.exps[(logx + config.logs[fx]) % config.max] ^ coeffs[i];
    }
    return fx;
  }

  function inArray(arr, val) {
    for (var i = 0, len = arr.length; i < len; i++) {
      if (arr[i] === val) {
        return true;
      }
    }
    return false;
  }

  function processShare(share) {
    var bits = parseInt(share[0], 36);
    if (
      bits &&
      (typeof bits !== "number" ||
        bits % 1 !== 0 ||
        bits < defaults.minBits ||
        bits > defaults.maxBits)
    ) {
      throw new Error(
        "Number of bits must be an integer between " +
          defaults.minBits +
          " and " +
          defaults.maxBits +
          ", inclusive."
      );
    }

    var max = Math.pow(2, bits) - 1;
    var idLength = max.toString(config.radix).length;

    var id = parseInt(share.substr(1, idLength), config.radix);
    if (typeof id !== "number" || id % 1 !== 0 || id < 1 || id > max) {
      throw new Error(
        "Share id must be an integer between 1 and " +
          config.max +
          ", inclusive."
      );
    }
    share = share.substr(idLength + 1);
    if (!share.length) {
      throw new Error("Invalid share: zero-length share.");
    }
    return {
      bits: bits,
      id: id,
      value: share
    };
  }

  /** @expose **/
  exports._processShare = processShare;

  // Protected method that evaluates the Lagrange interpolation
  // polynomial at x=`at` for individual config.bits-length
  // segments of each share in the `shares` Array.
  // Each share is expressed in base `inputRadix`. The output
  // is expressed in base `outputRadix'
  function combine(at, shares) {
    var setBits,
      share,
      x = [],
      y = [],
      result = "",
      idx;

    for (var i = 0, len = shares.length; i < len; i++) {
      share = processShare(shares[i]);
      if (typeof setBits === "undefined") {
        setBits = share["bits"];
      } else if (share["bits"] !== setBits) {
        throw new Error("Mismatched shares: Different bit settings.");
      }

      if (config.bits !== setBits) {
        init(setBits);
      }

      if (inArray(x, share["id"])) {
        // repeated x value?
        continue;
      }

      idx = x.push(share["id"]) - 1;
      share = split(hex2bin(share["value"]));
      for (var j = 0, len2 = share.length; j < len2; j++) {
        y[j] = y[j] || [];
        y[j][idx] = share[j];
      }
    }

    for (var i = 0, len = y.length; i < len; i++) {
      result = padLeft(lagrange(at, x, y[i]).toString(2)) + result;
    }

    if (at === 0) {
      // reconstructing the secret
      var idx = result.indexOf("1"); //find the first 1
      return bin2hex(result.slice(idx + 1));
    } else {
      // generating a new share
      return bin2hex(result);
    }
  }

  // Combine `shares` Array into the original secret
  /** @expose **/
  exports.combine = function(shares) {
    return combine(0, shares);
  };

  // Generate a new share with id `id` (a number between 1 and 2^bits-1)
  // `id` can be a Number or a String in the default radix (16)
  /** @expose **/
  exports.newShare = function(id, shares) {
    if (typeof id === "string") {
      id = parseInt(id, config.radix);
    }

    var share = processShare(shares[0]);
    var max = Math.pow(2, share["bits"]) - 1;

    if (typeof id !== "number" || id % 1 !== 0 || id < 1 || id > max) {
      throw new Error(
        "Share id must be an integer between 1 and " +
          config.max +
          ", inclusive."
      );
    }

    var padding = max.toString(config.radix).length;
    return (
      config.bits.toString(36).toUpperCase() +
      padLeft(id.toString(config.radix), padding) +
      combine(id, shares)
    );
  };

  // Evaluate the Lagrange interpolation polynomial at x = `at`
  // using x and y Arrays that are of the same length, with
  // corresponding elements constituting points on the polynomial.
  function lagrange(at, x, y) {
    var sum = 0,
      product,
      i,
      j;

    for (var i = 0, len = x.length; i < len; i++) {
      if (!y[i]) {
        continue;
      }

      product = config.logs[y[i]];
      for (var j = 0; j < len; j++) {
        if (i === j) {
          continue;
        }
        if (at === x[j]) {
          // happens when computing a share that is in the list of shares used to compute it
          product = -1; // fix for a zero product term, after which the sum should be sum^0 = sum, not sum^1
          break;
        }
        product =
          (product +
            config.logs[at ^ x[j]] -
            config.logs[x[i] ^ x[j]] +
            config.max) /* to make sure it's not negative */ %
          config.max;
      }

      sum = product === -1 ? sum : sum ^ config.exps[product]; // though exps[-1]= undefined and undefined ^ anything = anything in chrome, this behavior may not hold everywhere, so do the check
    }
    return sum;
  }

  /** @expose **/
  exports._lagrange = lagrange;

  // Splits a number string `bits`-length segments, after first
  // optionally zero-padding it to a length that is a multiple of `padLength.
  // Returns array of integers (each less than 2^bits-1), with each element
  // representing a `bits`-length segment of the input string from right to left,
  // i.e. parts[0] represents the right-most `bits`-length segment of the input string.
  function split(str, padLength) {
    if (padLength) {
      str = padLeft(str, padLength);
    }
    var parts = [];
    for (var i = str.length; i > config.bits; i -= config.bits) {
      parts.push(parseInt(str.slice(i - config.bits, i), 2));
    }
    parts.push(parseInt(str.slice(0, i), 2));
    return parts;
  }

  // Pads a string `str` with zeros on the left so that its length is a multiple of `bits`
  function padLeft(str, bits) {
    bits = bits || config.bits;
    var missing = str.length % bits;
    return (missing ? new Array(bits - missing + 1).join("0") : "") + str;
  }

  function hex2bin(str) {
    var bin = "",
      num;
    for (var i = str.length - 1; i >= 0; i--) {
      num = parseInt(str[i], 16);
      if (isNaN(num)) {
        throw new Error("Invalid hex character.");
      }
      bin = padLeft(num.toString(2), 4) + bin;
    }
    return bin;
  }

  function bin2hex(str) {
    var hex = "",
      num;
    str = padLeft(str, 4);
    for (var i = str.length; i >= 4; i -= 4) {
      num = parseInt(str.slice(i - 4, i), 2);
      if (isNaN(num)) {
        throw new Error("Invalid binary character.");
      }
      hex = num.toString(16) + hex;
    }
    return hex;
  }

  // Converts a given UTF16 character string to the HEX representation.
  // Each character of the input string is represented by
  // `bytesPerChar` bytes in the output string.
  /** @expose **/
  exports.str2hex = function(str, bytesPerChar) {
    if (typeof str !== "string") {
      throw new Error("Input must be a character string.");
    }
    bytesPerChar = bytesPerChar || defaults.bytesPerChar;

    if (
      typeof bytesPerChar !== "number" ||
      bytesPerChar % 1 !== 0 ||
      bytesPerChar < 1 ||
      bytesPerChar > defaults.maxBytesPerChar
    ) {
      throw new Error(
        "Bytes per character must be an integer between 1 and " +
          defaults.maxBytesPerChar +
          ", inclusive."
      );
    }

    var hexChars = 2 * bytesPerChar;
    var max = Math.pow(16, hexChars) - 1;
    var out = "",
      num;
    for (var i = 0, len = str.length; i < len; i++) {
      num = str[i].charCodeAt();
      if (isNaN(num)) {
        throw new Error("Invalid character: " + str[i]);
      } else if (num > max) {
        var neededBytes = Math.ceil(Math.log(num + 1) / Math.log(256));
        throw new Error(
          "Invalid character code (" +
            num +
            "). Maximum allowable is 256^bytes-1 (" +
            max +
            "). To convert this character, use at least " +
            neededBytes +
            " bytes."
        );
      } else {
        out = padLeft(num.toString(16), hexChars) + out;
      }
    }
    return out;
  };

  // Converts a given HEX number string to a UTF16 character string.
  /** @expose **/
  exports.hex2str = function(str, bytesPerChar) {
    if (typeof str !== "string") {
      throw new Error("Input must be a hexadecimal string.");
    }
    bytesPerChar = bytesPerChar || defaults.bytesPerChar;

    if (
      typeof bytesPerChar !== "number" ||
      bytesPerChar % 1 !== 0 ||
      bytesPerChar < 1 ||
      bytesPerChar > defaults.maxBytesPerChar
    ) {
      throw new Error(
        "Bytes per character must be an integer between 1 and " +
          defaults.maxBytesPerChar +
          ", inclusive."
      );
    }

    var hexChars = 2 * bytesPerChar;
    var out = "";
    str = padLeft(str, hexChars);
    for (var i = 0, len = str.length; i < len; i += hexChars) {
      out =
        String.fromCharCode(parseInt(str.slice(i, i + hexChars), 16)) +
        out;
    }
    return out;
  };

  // by default, initialize without an RNG
  exports.init();
})(
  typeof module !== "undefined" && module["exports"]
    ? module["exports"]
    : (window["shamirSecretShare"] = {}),
  typeof global !== "undefined" ? global : window
);
</script>
<script language="JavaScript">
(function(ellipticCurveType) {
  //Defining Elliptic Encryption Object
  var ellipticEncryption = (window.ellipticCurveEncryption = function() {});

  ellipticEncryption.rng = new SecureRandom();

  ellipticEncryption.getCurveParameters = function(curveName) {
    //Default is secp256k1
    curveName =
      typeof curveName !== "undefined" ? curveName : "secp256k1";

    var c = EllipticCurve.getSECCurveByName(curveName);
    var curveDetails = {
      Q: "",
      A: "",
      B: "",
      GX: "",
      GY: "",
      N: ""
    };

    curveDetails.Q = c
      .getCurve()
      .getQ()
      .toString();
    curveDetails.A = c
      .getCurve()
      .getA()
      .toBigInteger()
      .toString();
    curveDetails.B = c
      .getCurve()
      .getB()
      .toBigInteger()
      .toString();
    curveDetails.GX = c
      .getG()
      .getX()
      .toBigInteger()
      .toString();
    curveDetails.GY = c
      .getG()
      .getY()
      .toBigInteger()
      .toString();
    curveDetails.N = c.getN().toString();

    return curveDetails;
  };

  ellipticEncryption.selectedCurve = ellipticEncryption.getCurveParameters(
    ellipticCurveType
  );

  ellipticEncryption.get_curve = function() {
    return new EllipticCurve.CurveFp(
      new BigInteger(this.selectedCurve.Q),
      new BigInteger(this.selectedCurve.A),
      new BigInteger(this.selectedCurve.B)
    );
  };

  ellipticEncryption.get_G = function(curve) {
    return new EllipticCurve.PointFp(
      curve,
      curve.fromBigInteger(new BigInteger(this.selectedCurve.GX)),
      curve.fromBigInteger(new BigInteger(this.selectedCurve.GY))
    );
  };

  ellipticEncryption.pick_rand = function() {
    var n = new BigInteger(this.selectedCurve.N);
    var n1 = n.subtract(BigInteger.ONE);
    var r = new BigInteger(n.bitLength(), this.rng);
    return r.mod(n1).add(BigInteger.ONE);
  };

  ellipticEncryption.senderRandom = function() {
    var r = this.pick_rand();
    return r.toString();
  };

  ellipticEncryption.receiverRandom = function() {
    //This is receivers private key. For now we will use random. CHANGE IT LATER
    var r = this.pick_rand();
    return r.toString();
  };

  ellipticEncryption.senderPublicString = function(senderPrivateKey) {
    var senderKeyECData = {};

    var curve = this.get_curve();
    var G = this.get_G(curve);
    var a = new BigInteger(senderPrivateKey);
    var P = G.multiply(a);
    senderKeyECData.XValuePublicString = P.getX()
      .toBigInteger()
      .toString();
    senderKeyECData.YValuePublicString = P.getY()
      .toBigInteger()
      .toString();

    return senderKeyECData;
  };

  //In real life ellipticEncryption.receiverPublicString is the public key of the receiver.
  //you don't have to run receiverRandom and the bottom function
  ellipticEncryption.receiverPublicString = function(receiverPublicKey) {
    var receiverKeyECData = {};

    var curve = this.get_curve();
    var G = this.get_G(curve);
    var a = new BigInteger(receiverPublicKey);
    var P = G.multiply(a);
    receiverKeyECData.XValuePublicString = P.getX()
      .toBigInteger()
      .toString();
    receiverKeyECData.YValuePublicString = P.getY()
      .toBigInteger()
      .toString();

    return receiverKeyECData;
  };

  ellipticEncryption.senderSharedKeyDerivation = function(
    receiverPublicStringXValue,
    receiverPublicStringYValue,
    senderPrivateKey
  ) {
    var senderDerivedKey = {};
    var curve = this.get_curve();
    var P = new EllipticCurve.PointFp(
      curve,
      curve.fromBigInteger(new BigInteger(receiverPublicStringXValue)),
      curve.fromBigInteger(new BigInteger(receiverPublicStringYValue))
    );
    var a = new BigInteger(senderPrivateKey);
    var S = P.multiply(a);

    senderDerivedKey.XValue = S.getX()
      .toBigInteger()
      .toString();
    senderDerivedKey.YValue = S.getY()
      .toBigInteger()
      .toString();

    return senderDerivedKey;
  };

  ellipticEncryption.receiverSharedKeyDerivation = function(
    senderPublicStringXValue,
    senderPublicStringYValue,
    receiverPrivateKey
  ) {
    var receiverDerivedKey = {};
    var curve = this.get_curve();
    var P = new EllipticCurve.PointFp(
      curve,
      curve.fromBigInteger(new BigInteger(senderPublicStringXValue)),
      curve.fromBigInteger(new BigInteger(senderPublicStringYValue))
    );
    var a = new BigInteger(receiverPrivateKey);
    var S = P.multiply(a);

    receiverDerivedKey.XValue = S.getX()
      .toBigInteger()
      .toString();
    receiverDerivedKey.YValue = S.getY()
      .toBigInteger()
      .toString();

    return receiverDerivedKey;
  };
})("secp256k1"); // End of EllipticCurveEncryption Object
</script>
<!-- Kademelia -->
<script>
/*Kademlia DHT K-bucket implementation as a binary tree.*/

if (typeof reactor == "undefined" || !reactor) {
  (function() {
    function Event(name) {
      this.name = name;
      this.callbacks = [];
    }
    Event.prototype.registerCallback = function(callback) {
      this.callbacks.push(callback);
    };

    function Reactor() {
      this.events = {};
    }

    Reactor.prototype.registerEvent = function(eventName) {
      var event = new Event(eventName);
      this.events[eventName] = event;
    };

    Reactor.prototype.dispatchEvent = function(eventName, eventArgs) {
      this.events[eventName].callbacks.forEach(function(callback) {
        callback(eventArgs);
      });
    };

    Reactor.prototype.addEventListener = function(eventName, callback) {
      this.events[eventName].registerCallback(callback);
    };

    window.reactor = new Reactor();
  })();
}

reactor.registerEvent("added");
reactor.addEventListener("added", function(someObject) {
  console.log("Added fired with data " + someObject);
});

reactor.registerEvent("removed");
reactor.addEventListener("removed", function(someObject) {
  console.log("Removed fired with data " + someObject);
});

reactor.registerEvent("updated");
reactor.addEventListener("updated", function(someObject) {
  console.log("Updated fired with data " + someObject);
});

reactor.registerEvent("bucket_full");
reactor.addEventListener("bucket_full", function(someObject) {
  console.log("Bucket full " + someObject);
});

/*
  //Sample Usage
  //Creating and defining the event
  reactor.registerEvent('big bang');
  reactor.addEventListener('big bang', function(someObject){
  console.log('This is big bang listener yo!'+ someObject.a);
  });
  
  //Firing the event
  reactor.dispatchEvent('big bang');
  reactor.dispatchEvent('big bang',{a:1});
  reactor.dispatchEvent('big bang',{a:55});
  
  */

//Checking if existing NodeID can be used
//This first block of if will initialize the configuration of KBucket
//Add Events, Messaging between different K-Buckets, and attach relevant distributed data

/**
 * @param  {Uint8Array} array1
 * @param  {Uint8Array} array2
 * @return {Boolean}
 */
function arrayEquals(array1, array2) {
  if (array1 === array2) {
    return true;
  }
  if (array1.length !== array2.length) {
    return false;
  }
  for (let i = 0, length = array1.length; i < length; ++i) {
    if (array1[i] !== array2[i]) {
      return false;
    }
  }
  return true;
}

function createNode() {
  return {
    contacts: [],
    dontSplit: false,
    left: null,
    right: null
  };
}

function ensureInt8(name, val) {
  if (!(val instanceof Uint8Array)) {
    throw new TypeError(name + " is not a Uint8Array");
  }
}

/**
 * Implementation of a Kademlia DHT k-bucket used for storing
 * contact (peer node) information.
 *
 * @extends EventEmitter
 */
function BuildKBucket(options = {}) {
  /**
   * `options`:
   *   `distance`: Function
   *     `function (firstId, secondId) { return distance }` An optional
   *     `distance` function that gets two `id` Uint8Arrays
   *     and return distance (as number) between them.
   *   `arbiter`: Function (Default: vectorClock arbiter)
   *     `function (incumbent, candidate) { return contact; }` An optional
   *     `arbiter` function that givent two `contact` objects with the same `id`
   *     returns the desired object to be used for updating the k-bucket. For
   *     more details, see [arbiter function](#arbiter-function).
   *   `localNodeId`: Uint8Array An optional Uint8Array representing the local node id.
   *     If not provided, a local node id will be created via `randomBytes(20)`.
   *     `metadata`: Object (Default: {}) Optional satellite data to include
   *     with the k-bucket. `metadata` property is guaranteed not be altered by,
   *     it is provided as an explicit container for users of k-bucket to store
   *     implementation-specific data.
   *   `numberOfNodesPerKBucket`: Integer (Default: 20) The number of nodes
   *     that a k-bucket can contain before being full or split.
   *     `numberOfNodesToPing`: Integer (Default: 3) The number of nodes to
   *     ping when a bucket that should not be split becomes full. KBucket will
   *     emit a `ping` event that contains `numberOfNodesToPing` nodes that have
   *     not been contacted the longest.
   *
   * @param {Object=} options optional
   */

  this.localNodeId =
    options.localNodeId ||
    window.crypto.getRandomValues(new Uint8Array(20));
  this.numberOfNodesPerKBucket = options.numberOfNodesPerKBucket || 20;
  this.numberOfNodesToPing = options.numberOfNodesToPing || 3;
  this.distance = options.distance || this.distance;
  // use an arbiter from options or vectorClock arbiter by default
  this.arbiter = options.arbiter || this.arbiter;
  this.metadata = Object.assign({}, options.metadata);

  ensureInt8("option.localNodeId as parameter 1", this.localNodeId);

  this.root = createNode();

  /**
   * Default arbiter function for contacts with the same id. Uses
   * contact.vectorClock to select which contact to update the k-bucket with.
   * Contact with larger vectorClock field will be selected. If vectorClock is
   * the same, candidat will be selected.
   *
   * @param  {Object} incumbent Contact currently stored in the k-bucket.
   * @param  {Object} candidate Contact being added to the k-bucket.
   * @return {Object}           Contact to updated the k-bucket with.
   */
  this.arbiter = function(incumbent, candidate) {
    return incumbent.vectorClock > candidate.vectorClock
      ? incumbent
      : candidate;
  };

  /**
   * Default distance function. Finds the XOR
   * distance between firstId and secondId.
   *
   * @param  {Uint8Array} firstId  Uint8Array containing first id.
   * @param  {Uint8Array} secondId Uint8Array containing second id.
   * @return {Number}              Integer The XOR distance between firstId
   *                               and secondId.
   */
  this.distance = function(firstId, secondId) {
    let distance = 0;
    let i = 0;
    const min = Math.min(firstId.length, secondId.length);
    const max = Math.max(firstId.length, secondId.length);
    for (; i < min; ++i) {
      distance = distance * 256 + (firstId[i] ^ secondId[i]);
    }
    for (; i < max; ++i) distance = distance * 256 + 255;
    return distance;
  };

  /**
   * Adds a contact to the k-bucket.
   *
   * @param {Object} contact the contact object to add
   */
  this.add = function(contact) {
    ensureInt8("contact.id", (contact || {}).id);

    let bitIndex = 0;
    let node = this.root;

    while (node.contacts === null) {
      // this is not a leaf node but an inner node with 'low' and 'high'
      // branches; we will check the appropriate bit of the identifier and
      // delegate to the appropriate node for further processing
      node = this._determineNode(node, contact.id, bitIndex++);
    }

    // check if the contact already exists
    const index = this._indexOf(node, contact.id);
    if (index >= 0) {
      this._update(node, index, contact);
      return this;
    }

    if (node.contacts.length < this.numberOfNodesPerKBucket) {
      node.contacts.push(contact);
      reactor.dispatchEvent("added", contact);
      return this;
    }

    // the bucket is full
    if (node.dontSplit) {
      // we are not allowed to split the bucket
      // we need to ping the first this.numberOfNodesToPing
      // in order to determine if they are alive
      // only if one of the pinged nodes does not respond, can the new contact
      // be added (this prevents DoS flodding with new invalid contacts)
      reactor.dispatchEvent("bucket_full", {
        1: node.contacts.slice(0, this.numberOfNodesToPing),
        2: contact
      });
      return this;
    }

    this._split(node, bitIndex);
    return this.add(contact);
  };

  /**
   * Get the n closest contacts to the provided node id. "Closest" here means:
   * closest according to the XOR metric of the contact node id.
   *
   * @param  {Uint8Array} id  Contact node id
   * @param  {Number=} n      Integer (Default: Infinity) The maximum number of
   *                          closest contacts to return
   * @return {Array}          Array Maximum of n closest contacts to the node id
   */
  this.closest = function(id, n = Infinity) {
    ensureInt8("id", id);

    if ((!Number.isInteger(n) && n !== Infinity) || n <= 0) {
      throw new TypeError("n is not positive number");
    }

    let contacts = [];

    for (
      let nodes = [this.root], bitIndex = 0;
      nodes.length > 0 && contacts.length < n;

    ) {
      const node = nodes.pop();
      if (node.contacts === null) {
        const detNode = this._determineNode(node, id, bitIndex++);
        nodes.push(node.left === detNode ? node.right : node.left);
        nodes.push(detNode);
      } else {
        contacts = contacts.concat(node.contacts);
      }
    }

    return contacts
      .map(a => [this.distance(a.id, id), a])
      .sort((a, b) => a[0] - b[0])
      .slice(0, n)
      .map(a => a[1]);
  };

  /**
   * Counts the total number of contacts in the tree.
   *
   * @return {Number} The number of contacts held in the tree
   */
  this.count = function() {
    // return this.toArray().length
    let count = 0;
    for (const nodes = [this.root]; nodes.length > 0; ) {
      const node = nodes.pop();
      if (node.contacts === null) nodes.push(node.right, node.left);
      else count += node.contacts.length;
    }
    return count;
  };

  /**
   * Determines whether the id at the bitIndex is 0 or 1.
   * Return left leaf if `id` at `bitIndex` is 0, right leaf otherwise
   *
   * @param  {Object} node     internal object that has 2 leafs: left and right
   * @param  {Uint8Array} id   Id to compare localNodeId with.
   * @param  {Number} bitIndex Integer (Default: 0) The bit index to which bit
   *                           to check in the id Uint8Array.
   * @return {Object}          left leaf if id at bitIndex is 0, right leaf otherwise.
   */
  this._determineNode = function(node, id, bitIndex) {
    // *NOTE* remember that id is a Uint8Array and has granularity of
    // bytes (8 bits), whereas the bitIndex is the bit index (not byte)

    // id's that are too short are put in low bucket (1 byte = 8 bits)
    // (bitIndex >> 3) finds how many bytes the bitIndex describes
    // bitIndex % 8 checks if we have extra bits beyond byte multiples
    // if number of bytes is <= no. of bytes described by bitIndex and there
    // are extra bits to consider, this means id has less bits than what
    // bitIndex describes, id therefore is too short, and will be put in low
    // bucket
    const bytesDescribedByBitIndex = bitIndex >> 3;
    const bitIndexWithinByte = bitIndex % 8;
    if (
      id.length <= bytesDescribedByBitIndex &&
      bitIndexWithinByte !== 0
    ) {
      return node.left;
    }

    const byteUnderConsideration = id[bytesDescribedByBitIndex];

    // byteUnderConsideration is an integer from 0 to 255 represented by 8 bits
    // where 255 is 11111111 and 0 is 00000000
    // in order to find out whether the bit at bitIndexWithinByte is set
    // we construct (1 << (7 - bitIndexWithinByte)) which will consist
    // of all bits being 0, with only one bit set to 1
    // for example, if bitIndexWithinByte is 3, we will construct 00010000 by
    // (1 << (7 - 3)) -> (1 << 4) -> 16
    if (byteUnderConsideration & (1 << (7 - bitIndexWithinByte))) {
      return node.right;
    }

    return node.left;
  };

  /**
   * Get a contact by its exact ID.
   * If this is a leaf, loop through the bucket contents and return the correct
   * contact if we have it or null if not. If this is an inner node, determine
   * which branch of the tree to traverse and repeat.
   *
   * @param  {Uint8Array} id The ID of the contact to fetch.
   * @return {Object|Null}   The contact if available, otherwise null
   */
  this.get = function(id) {
    ensureInt8("id", id);

    let bitIndex = 0;

    let node = this.root;
    while (node.contacts === null) {
      node = this._determineNode(node, id, bitIndex++);
    }

    // index of uses contact id for matching
    const index = this._indexOf(node, id);
    return index >= 0 ? node.contacts[index] : null;
  };

  /**
   * Returns the index of the contact with provided
   * id if it exists, returns -1 otherwise.
   *
   * @param  {Object} node    internal object that has 2 leafs: left and right
   * @param  {Uint8Array} id  Contact node id.
   * @return {Number}         Integer Index of contact with provided id if it
   *                          exists, -1 otherwise.
   */
  this._indexOf = function(node, id) {
    for (let i = 0; i < node.contacts.length; ++i) {
      if (arrayEquals(node.contacts[i].id, id)) return i;
    }

    return -1;
  };

  /**
   * Removes contact with the provided id.
   *
   * @param  {Uint8Array} id The ID of the contact to remove.
   * @return {Object}        The k-bucket itself.
   */
  this.remove = function(id) {
    ensureInt8("the id as parameter 1", id);

    let bitIndex = 0;
    let node = this.root;

    while (node.contacts === null) {
      node = this._determineNode(node, id, bitIndex++);
    }

    const index = this._indexOf(node, id);
    if (index >= 0) {
      const contact = node.contacts.splice(index, 1)[0];
      reactor.dispatchEvent("removed", contact);
    }

    return this;
  };

  /**
   * Splits the node, redistributes contacts to the new nodes, and marks the
   * node that was split as an inner node of the binary tree of nodes by
   * setting this.root.contacts = null
   *
   * @param  {Object} node     node for splitting
   * @param  {Number} bitIndex the bitIndex to which byte to check in the
   *                           Uint8Array for navigating the binary tree
   */
  this._split = function(node, bitIndex) {
    node.left = createNode();
    node.right = createNode();

    // redistribute existing contacts amongst the two newly created nodes
    for (const contact of node.contacts) {
      this._determineNode(node, contact.id, bitIndex).contacts.push(
        contact
      );
    }

    node.contacts = null; // mark as inner tree node

    // don't split the "far away" node
    // we check where the local node would end up and mark the other one as
    // "dontSplit" (i.e. "far away")
    const detNode = this._determineNode(node, this.localNodeId, bitIndex);
    const otherNode = node.left === detNode ? node.right : node.left;
    otherNode.dontSplit = true;
  };

  /**
   * Returns all the contacts contained in the tree as an array.
   * If this is a leaf, return a copy of the bucket. `slice` is used so that we
   * don't accidentally leak an internal reference out that might be
   * accidentally misused. If this is not a leaf, return the union of the low
   * and high branches (themselves also as arrays).
   *
   * @return {Array} All of the contacts in the tree, as an array
   */
  this.toArray = function() {
    let result = [];
    for (const nodes = [this.root]; nodes.length > 0; ) {
      const node = nodes.pop();
      if (node.contacts === null) nodes.push(node.right, node.left);
      else result = result.concat(node.contacts);
    }
    return result;
  };

  /**
   * Updates the contact selected by the arbiter.
   * If the selection is our old contact and the candidate is some new contact
   * then the new contact is abandoned (not added).
   * If the selection is our old contact and the candidate is our old contact
   * then we are refreshing the contact and it is marked as most recently
   * contacted (by being moved to the right/end of the bucket array).
   * If the selection is our new contact, the old contact is removed and the new
   * contact is marked as most recently contacted.
   *
   * @param  {Object} node    internal object that has 2 leafs: left and right
   * @param  {Number} index   the index in the bucket where contact exists
   *                          (index has already been computed in a previous
   *                          calculation)
   * @param  {Object} contact The contact object to update.
   */
  this._update = function(node, index, contact) {
    // sanity check
    if (!arrayEquals(node.contacts[index].id, contact.id)) {
      throw new Error("wrong index for _update");
    }

    const incumbent = node.contacts[index];

    /***************Change made by Abhishek*************/
    const selection = this.arbiter(incumbent, contact);
    //const selection = localbitcoinplusplus.kademlia.arbiter(incumbent, contact);
    // if the selection is our old contact and the candidate is some new
    // contact, then there is nothing to do
    if (selection === incumbent && incumbent !== contact) return;

    node.contacts.splice(index, 1); // remove old contact
    node.contacts.push(selection); // add more recent contact version
    /***************Change made by Abhishek*************/
    reactor.dispatchEvent("updated", {
      ...incumbent,
      ...selection
    });
    //reactor.dispatchEvent('updated', incumbent.concat(selection))
  };
}
</script>

<!-- https://gomakethings.com/how-to-automatically-sanitize-reactive-data-with-vanilla-js/ -->
<script>
          /*!
   * Sanitize and encode all HTML in a user-submitted string
   * (c) 2018 Chris Ferdinandi, MIT License, https://gomakethings.com
   * @param  {String} str  The user-submitted string
   * @return {String} str  The sanitized string
   */
   var sanitizeHTML = function (str) {
      var temp = document.createElement('div');
      temp.textContent = str;
      return temp.innerHTML;
  };

  /**
   * Create an immutable copy of an object and recursively encode all of its data
   * @param  {*} obj The object to clone
   * @return {*}     The immutable, encoded object
   */
  var cloneForSanitization = function (obj) {

      // Get the object type
      var type = Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();

      // If an object, loop through and recursively encode
      if (type === 'object') {
          var cloned = {};
          for (var key in obj) {
              if (obj.hasOwnProperty(key)) {
                  cloned[key] = cloneForSanitization(obj[key]);
              }
          }
          return cloned;
      }

      // If an array, create a new array and recursively encode
      if (type === 'array') {
          return obj.map(function (item) {
              return cloneForSanitization(item);
          });
      }

      // If the data is a string, encode it
      if (type === 'string') {
          return sanitizeHTML(obj);
      }

      // Otherwise, return object as is
      return obj;

  };
</script>

<!-- https://github.com/cure53/DOMPurify/blob/master/dist/purify.min.js -->
<script>
  /*! DOMPurify | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.0.8/LICENSE */
  !function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.DOMPurify=t()}(this,function(){"use strict";var n=Object.hasOwnProperty,i=Object.setPrototypeOf,a=Object.isFrozen,be=Object.keys,Te=Object.freeze,e=Object.seal,t="undefined"!=typeof Reflect&&Reflect,l=t.apply,o=t.construct;l=l||function(e,t,r){return e.apply(t,r)},Te=Te||function(e){return e},e=e||function(e){return e},o=o||function(e,t){return new(Function.prototype.bind.apply(e,[null].concat(function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}(t))))};var Ae=r(Array.prototype.forEach),xe=r(Array.prototype.indexOf),Se=r(Array.prototype.join),Le=r(Array.prototype.pop),Ee=r(Array.prototype.push),ke=r(Array.prototype.slice),Me=r(String.prototype.toLowerCase),_e=r(String.prototype.match),Ne=r(String.prototype.replace),Oe=r(String.prototype.indexOf),we=r(String.prototype.trim),De=r(RegExp.prototype.test),Re=c(RegExp),He=c(TypeError);function r(o){return function(e){for(var t=arguments.length,r=Array(1<t?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return l(o,e,r)}}function c(n){return function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];return o(n,t)}}function Ce(e,t){i&&i(e,null);for(var r=t.length;r--;){var n=t[r];if("string"==typeof n){var o=Me(n);o!==n&&(a(t)||(t[r]=o),n=o)}e[n]=!0}return e}function Fe(e){var t={},r=void 0;for(r in e)l(n,e,[r])&&(t[r]=e[r]);return t}var ze=Te(["a","abbr","acronym","address","area","article","aside","audio","b","bdi","bdo","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","content","data","datalist","dd","decorator","del","details","dfn","dir","div","dl","dt","element","em","fieldset","figcaption","figure","font","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","img","input","ins","kbd","label","legend","li","main","map","mark","marquee","menu","menuitem","meter","nav","nobr","ol","optgroup","option","output","p","picture","pre","progress","q","rp","rt","ruby","s","samp","section","select","shadow","small","source","spacer","span","strike","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","tr","track","tt","u","ul","var","video","wbr"]),Ie=Te(["svg","a","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","audio","canvas","circle","clippath","defs","desc","ellipse","filter","font","g","glyph","glyphref","hkern","image","line","lineargradient","marker","mask","metadata","mpath","path","pattern","polygon","polyline","radialgradient","rect","stop","style","switch","symbol","text","textpath","title","tref","tspan","video","view","vkern"]),je=Te(["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]),Ue=Te(["math","menclose","merror","mfenced","mfrac","mglyph","mi","mlabeledtr","mmultiscripts","mn","mo","mover","mpadded","mphantom","mroot","mrow","ms","mspace","msqrt","mstyle","msub","msup","msubsup","mtable","mtd","mtext","mtr","munder","munderover"]),Pe=Te(["#text"]),We=Te(["accept","action","align","alt","autocomplete","background","bgcolor","border","cellpadding","cellspacing","checked","cite","class","clear","color","cols","colspan","controls","coords","crossorigin","datetime","default","dir","disabled","download","enctype","face","for","headers","height","hidden","high","href","hreflang","id","integrity","ismap","label","lang","list","loop","low","max","maxlength","media","method","min","minlength","multiple","name","noshade","novalidate","nowrap","open","optimum","pattern","placeholder","poster","preload","pubdate","radiogroup","readonly","rel","required","rev","reversed","role","rows","rowspan","spellcheck","scope","selected","shape","size","sizes","span","srclang","start","src","srcset","step","style","summary","tabindex","title","type","usemap","valign","value","width","xmlns"]),Be=Te(["accent-height","accumulate","additive","alignment-baseline","ascent","attributename","attributetype","azimuth","basefrequency","baseline-shift","begin","bias","by","class","clip","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cx","cy","d","dx","dy","diffuseconstant","direction","display","divisor","dur","edgemode","elevation","end","fill","fill-opacity","fill-rule","filter","filterunits","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","fx","fy","g1","g2","glyph-name","glyphref","gradientunits","gradienttransform","height","href","id","image-rendering","in","in2","k","k1","k2","k3","k4","kerning","keypoints","keysplines","keytimes","lang","lengthadjust","letter-spacing","kernelmatrix","kernelunitlength","lighting-color","local","marker-end","marker-mid","marker-start","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","max","mask","media","method","mode","min","name","numoctaves","offset","operator","opacity","order","orient","orientation","origin","overflow","paint-order","path","pathlength","patterncontentunits","patterntransform","patternunits","points","preservealpha","preserveaspectratio","primitiveunits","r","rx","ry","radius","refx","refy","repeatcount","repeatdur","restart","result","rotate","scale","seed","shape-rendering","specularconstant","specularexponent","spreadmethod","startoffset","stddeviation","stitchtiles","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke","stroke-width","style","surfacescale","tabindex","targetx","targety","transform","text-anchor","text-decoration","text-rendering","textlength","type","u1","u2","unicode","values","viewbox","visibility","version","vert-adv-y","vert-origin-x","vert-origin-y","width","word-spacing","wrap","writing-mode","xchannelselector","ychannelselector","x","x1","x2","xmlns","y","y1","y2","z","zoomandpan"]),qe=Te(["accent","accentunder","align","bevelled","close","columnsalign","columnlines","columnspan","denomalign","depth","dir","display","displaystyle","encoding","fence","frame","height","href","id","largeop","length","linethickness","lspace","lquote","mathbackground","mathcolor","mathsize","mathvariant","maxsize","minsize","movablelimits","notation","numalign","open","rowalign","rowlines","rowspacing","rowspan","rspace","rquote","scriptlevel","scriptminsize","scriptsizemultiplier","selection","separator","separators","stretchy","subscriptshift","supscriptshift","symmetric","voffset","width","xmlns"]),Ge=Te(["xlink:href","xml:id","xlink:title","xml:space","xmlns:xlink"]),Ke=e(/\{\{[\s\S]*|[\s\S]*\}\}/gm),Ve=e(/<%[\s\S]*|[\s\S]*%>/gm),Ye=e(/^data-[\-\w.\u00B7-\uFFFF]/),Xe=e(/^aria-[\-\w]+$/),$e=e(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i),Je=e(/^(?:\w+script|data):/i),Qe=e(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205f\u3000]/g),Ze="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function et(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}var tt=function(){return"undefined"==typeof window?null:window},rt=function(e,t){if("object"!==(void 0===e?"undefined":Ze(e))||"function"!=typeof e.createPolicy)return null;var r=null,n="data-tt-policy-suffix";t.currentScript&&t.currentScript.hasAttribute(n)&&(r=t.currentScript.getAttribute(n));var o="dompurify"+(r?"#"+r:"");try{return e.createPolicy(o,{createHTML:function(e){return e}})}catch(e){return console.warn("TrustedTypes policy "+o+" could not be created."),null}};return function t(e){function d(e){return t(e)}var s=0<arguments.length&&void 0!==e?e:tt();if(d.version="2.0.8",d.removed=[],!s||!s.document||9!==s.document.nodeType)return d.isSupported=!1,d;var u=s.document,a=!1,l=!1,c=s.document,f=s.DocumentFragment,r=s.HTMLTemplateElement,p=s.Node,n=s.NodeFilter,o=s.NamedNodeMap,i=void 0===o?s.NamedNodeMap||s.MozNamedAttrMap:o,m=s.Text,y=s.Comment,g=s.DOMParser,h=s.trustedTypes;if("function"==typeof r){var v=c.createElement("template");v.content&&v.content.ownerDocument&&(c=v.content.ownerDocument)}var b=rt(h,u),T=b?b.createHTML(""):"",A=c.implementation,x=c.createNodeIterator,S=c.getElementsByTagName,L=c.createDocumentFragment,E=u.importNode,k={};d.isSupported=A&&void 0!==A.createHTMLDocument&&9!==c.documentMode;function M(e){ue&&ue===e||(e&&"object"===(void 0===e?"undefined":Ze(e))||(e={}),I="ALLOWED_TAGS"in e?Ce({},e.ALLOWED_TAGS):j,U="ALLOWED_ATTR"in e?Ce({},e.ALLOWED_ATTR):P,ce="ADD_URI_SAFE_ATTR"in e?Ce(Fe(se),e.ADD_URI_SAFE_ATTR):se,W="FORBID_TAGS"in e?Ce({},e.FORBID_TAGS):{},B="FORBID_ATTR"in e?Ce({},e.FORBID_ATTR):{},ie="USE_PROFILES"in e&&e.USE_PROFILES,q=!1!==e.ALLOW_ARIA_ATTR,G=!1!==e.ALLOW_DATA_ATTR,K=e.ALLOW_UNKNOWN_PROTOCOLS||!1,V=e.SAFE_FOR_JQUERY||!1,Y=e.SAFE_FOR_TEMPLATES||!1,X=e.WHOLE_DOCUMENT||!1,Q=e.RETURN_DOM||!1,Z=e.RETURN_DOM_FRAGMENT||!1,ee=e.RETURN_DOM_IMPORT||!1,te=e.RETURN_TRUSTED_TYPE||!1,J=e.FORCE_BODY||!1,re=!1!==e.SANITIZE_DOM,ne=!1!==e.KEEP_CONTENT,oe=e.IN_PLACE||!1,z=e.ALLOWED_URI_REGEXP||z,Y&&(G=!1),Z&&(Q=!0),ie&&(I=Ce({},[].concat(et(Pe))),U=[],!0===ie.html&&(Ce(I,ze),Ce(U,We)),!0===ie.svg&&(Ce(I,Ie),Ce(U,Be),Ce(U,Ge)),!0===ie.svgFilters&&(Ce(I,je),Ce(U,Be),Ce(U,Ge)),!0===ie.mathMl&&(Ce(I,Ue),Ce(U,qe),Ce(U,Ge))),e.ADD_TAGS&&(I===j&&(I=Fe(I)),Ce(I,e.ADD_TAGS)),e.ADD_ATTR&&(U===P&&(U=Fe(U)),Ce(U,e.ADD_ATTR)),e.ADD_URI_SAFE_ATTR&&Ce(ce,e.ADD_URI_SAFE_ATTR),ne&&(I["#text"]=!0),X&&Ce(I,["html","head","body"]),I.table&&(Ce(I,["tbody"]),delete W.tbody),Te&&Te(e),ue=e)}function _(t){Ee(d.removed,{element:t});try{t.parentNode.removeChild(t)}catch(e){t.outerHTML=T}}function N(e,t){try{Ee(d.removed,{attribute:t.getAttributeNode(e),from:t})}catch(e){Ee(d.removed,{attribute:null,from:t})}t.removeAttribute(e)}function O(e){var t=void 0,r=void 0;if(J)e="<remove></remove>"+e;else{var n=_e(e,/^[\s]+/);r=n&&n[0]}var o=b?b.createHTML(e):e;if(a)try{t=(new g).parseFromString(o,"text/html")}catch(e){}if(l&&Ce(W,["title"]),!t||!t.documentElement){var i=(t=A.createHTMLDocument("")).body;i.parentNode.removeChild(i.parentNode.firstElementChild),i.outerHTML=o}return e&&r&&t.body.insertBefore(c.createTextNode(r),t.body.childNodes[0]||null),S.call(t,X?"html":"body")[0]}var w=Ke,D=Ve,R=Ye,H=Xe,C=Je,F=Qe,z=$e,I=null,j=Ce({},[].concat(et(ze),et(Ie),et(je),et(Ue),et(Pe))),U=null,P=Ce({},[].concat(et(We),et(Be),et(qe),et(Ge))),W=null,B=null,q=!0,G=!0,K=!1,V=!1,Y=!1,X=!1,$=!1,J=!1,Q=!1,Z=!1,ee=!1,te=!1,re=!0,ne=!0,oe=!1,ie={},ae=Ce({},["annotation-xml","audio","colgroup","desc","foreignobject","head","iframe","math","mi","mn","mo","ms","mtext","noembed","noframes","plaintext","script","style","svg","template","thead","title","video","xmp"]),le=Ce({},["audio","video","img","source","image","track"]),ce=null,se=Ce({},["alt","class","for","id","label","name","pattern","placeholder","summary","title","value","style","xmlns"]),ue=null,de=c.createElement("form");d.isSupported&&(function(){try{O('<svg><p><textarea><img src="</textarea><img src=x abc=1//">').querySelector("svg img")&&(a=!0)}catch(e){}}(),function(){try{var e=O("<x/><title>&lt;/title&gt;&lt;img&gt;");De(/<\/title/,e.querySelector("title").innerHTML)&&(l=!0)}catch(e){}}());function fe(e){return x.call(e.ownerDocument||e,e,n.SHOW_ELEMENT|n.SHOW_COMMENT|n.SHOW_TEXT,function(){return n.FILTER_ACCEPT},!1)}function pe(e){return"object"===(void 0===p?"undefined":Ze(p))?e instanceof p:e&&"object"===(void 0===e?"undefined":Ze(e))&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName}function me(e,t,r){k[e]&&Ae(k[e],function(e){e.call(d,t,r,ue)})}function ye(e){var t,r=void 0;if(me("beforeSanitizeElements",e,null),!((t=e)instanceof m||t instanceof y||"string"==typeof t.nodeName&&"string"==typeof t.textContent&&"function"==typeof t.removeChild&&t.attributes instanceof i&&"function"==typeof t.removeAttribute&&"function"==typeof t.setAttribute&&"string"==typeof t.namespaceURI))return _(e),1;var n=Me(e.nodeName);if(me("uponSanitizeElement",e,{tagName:n,allowedTags:I}),("svg"===n||"math"===n)&&0!==e.querySelectorAll("p, br").length)return _(e),1;if(I[n]&&!W[n])return"noscript"===n&&De(/<\/noscript/i,e.innerHTML)||"noembed"===n&&De(/<\/noembed/i,e.innerHTML)?(_(e),1):(!V||e.firstElementChild||e.content&&e.content.firstElementChild||!De(/</g,e.textContent)||(Ee(d.removed,{element:e.cloneNode()}),e.innerHTML?e.innerHTML=Ne(e.innerHTML,/</g,"&lt;"):e.innerHTML=Ne(e.textContent,/</g,"&lt;")),Y&&3===e.nodeType&&(r=e.textContent,r=Ne(r,w," "),r=Ne(r,D," "),e.textContent!==r&&(Ee(d.removed,{element:e.cloneNode()}),e.textContent=r)),me("afterSanitizeElements",e,null),0);if(ne&&!ae[n]&&"function"==typeof e.insertAdjacentHTML)try{var o=e.innerHTML;e.insertAdjacentHTML("AfterEnd",b?b.createHTML(o):o)}catch(e){}return _(e),1}function ge(e,t,r){if(re&&("id"===t||"name"===t)&&(r in c||r in de))return!1;if(!(G&&De(R,t)||q&&De(H,t))){if(!U[t]||B[t])return!1;if(!ce[t]&&!De(z,Ne(r,F,""))&&("src"!==t&&"xlink:href"!==t&&"href"!==t||"script"===e||0!==Oe(r,"data:")||!le[e])&&(!K||De(C,Ne(r,F,"")))&&r)return!1}return!0}function he(e){var t=void 0,r=void 0,n=void 0,o=void 0,i=void 0;me("beforeSanitizeAttributes",e,null);var a=e.attributes;if(a){var l={attrName:"",attrValue:"",keepAttr:!0,allowedAttributes:U};for(i=a.length;i--;){var c=(t=a[i]).name,s=t.namespaceURI;if(r=we(t.value),n=Me(c),l.attrName=n,l.attrValue=r,l.keepAttr=!0,l.forceKeepAttr=void 0,me("uponSanitizeAttribute",e,l),r=l.attrValue,!l.forceKeepAttr){if("name"===n&&"IMG"===e.nodeName&&a.id)o=a.id,a=ke(a,[]),N("id",e),N(c,e),xe(a,o)>i&&e.setAttribute("id",o.value);else{if("INPUT"===e.nodeName&&"type"===n&&"file"===r&&l.keepAttr&&(U[n]||!B[n]))continue;"id"===c&&e.setAttribute(c,""),N(c,e)}if(l.keepAttr)if(V&&De(/\/>/i,r))N(c,e);else if(De(/svg|math/i,e.namespaceURI)&&De(Re("</("+Se(be(ae),"|")+")","i"),r))N(c,e);else{Y&&(r=Ne(r,w," "),r=Ne(r,D," "));var u=e.nodeName.toLowerCase();if(ge(u,n,r))try{s?e.setAttributeNS(s,c,r):e.setAttribute(c,r),Le(d.removed)}catch(e){}}}}me("afterSanitizeAttributes",e,null)}}function ve(e){var t=void 0,r=fe(e);for(me("beforeSanitizeShadowDOM",e,null);t=r.nextNode();)me("uponSanitizeShadowNode",t,null),ye(t)||(t.content instanceof f&&ve(t.content),he(t));me("afterSanitizeShadowDOM",e,null)}return d.sanitize=function(e,t){var r=void 0,n=void 0,o=void 0,i=void 0,a=void 0;if("string"!=typeof(e=e||"\x3c!--\x3e")&&!pe(e)){if("function"!=typeof e.toString)throw He("toString is not a function");if("string"!=typeof(e=e.toString()))throw He("dirty is not a string, aborting")}if(!d.isSupported){if("object"===Ze(s.toStaticHTML)||"function"==typeof s.toStaticHTML){if("string"==typeof e)return s.toStaticHTML(e);if(pe(e))return s.toStaticHTML(e.outerHTML)}return e}if($||M(t),d.removed=[],"string"==typeof e&&(oe=!1),!oe)if(e instanceof p)1===(n=(r=O("\x3c!--\x3e")).ownerDocument.importNode(e,!0)).nodeType&&"BODY"===n.nodeName||"HTML"===n.nodeName?r=n:r.appendChild(n);else{if(!Q&&!Y&&!X&&te&&-1===e.indexOf("<"))return b?b.createHTML(e):e;if(!(r=O(e)))return Q?null:T}r&&J&&_(r.firstChild);for(var l=fe(oe?e:r);o=l.nextNode();)3===o.nodeType&&o===i||ye(o)||(o.content instanceof f&&ve(o.content),he(o),i=o);if(i=null,oe)return e;if(Q){if(Z)for(a=L.call(r.ownerDocument);r.firstChild;)a.appendChild(r.firstChild);else a=r;return ee&&(a=E.call(u,a,!0)),a}var c=X?r.outerHTML:r.innerHTML;return Y&&(c=Ne(c,w," "),c=Ne(c,D," ")),b&&te?b.createHTML(c):c},d.setConfig=function(e){M(e),$=!0},d.clearConfig=function(){ue=null,$=!1},d.isValidAttribute=function(e,t,r){ue||M({});var n=Me(e),o=Me(t);return ge(n,o,r)},d.addHook=function(e,t){"function"==typeof t&&(k[e]=k[e]||[],Ee(k[e],t))},d.removeHook=function(e){k[e]&&Le(k[e])},d.removeHooks=function(e){k[e]&&(k[e]=[])},d.removeAllHooks=function(){k={}},d}()});
  //# sourceMappingURL=purify.min.js.map
</script>

<!---------------------------------------------------------------------------------- 
                          localbitcoinplusplus Code starts 
----------------------------------------------------------------------------------->

<script type="text/javascript">

var localbitcoinplusplus = {
  wallets: {},
  trade: {},
  rpc: {},
  master_configurations: {},
};

Object.defineProperty(localbitcoinplusplus, "server", {
  value: {
      //btc_mainnet: "https://blockexplorer.com",
      btc_mainnet: "https://insight.bitpay.com",
      //btc_testnet: "https://testnet.blockexplorer.com",
      btc_testnet: "https://test-insight.bitpay.com",
      flo_mainnet: "https://flosight.duckdns.org",
      flo_testnet: "https://testnet-flosight.duckdns.org",
      //flo_testnet: "https://testnet.flocha.in",
      flo_api_mainnet: "https://ranchimallflo.duckdns.org",
      flo_api_testnet: "https://ranchimallflo-testnet.duckdns.org",
      //flo_api_testnet: "ranchimall1.duckdns.org:5109"
  },
  writable: false,
  configurable: false,
  enumerable: false
});

const ENVR = 'TEST'; // LIVE, TEST  
const WS = 'ws';
const DBName = "localbitcoinDBRemoteUser4May";

// MUST REMOVE FROM HERE. FETCH IT FROM A CONFIG FILE
const masterEncryptionKey = "rEmoVeMefRomHerE"; 

if(ENVR === 'LIVE') {

  Object.defineProperty(localbitcoinplusplus, "RM_FLO_SENDING_ADDR", {
      value: "FGcDVp9f3eqDcXXqXwxhpEoCReihzGFQCo",
      writable: false,
      configurable: false,
      enumerable: true
  });

  Object.defineProperty(localbitcoinplusplus, "BASE_BLOCKCHAIN", {
      value: "FLO",
      writable: false,
      configurable: false,
      enumerable: true
  });

} else {

  Object.defineProperty(localbitcoinplusplus, "RM_FLO_SENDING_ADDR", {
      value: "ocKKEivXC3TA8yf3ZEyh2kRMDgSh99y1a7",
      writable: false,
      configurable: false,
      enumerable: true
  });

  Object.defineProperty(localbitcoinplusplus, "BASE_BLOCKCHAIN", {
      value: "FLO_TEST",
      writable: false,
      configurable: false,
      enumerable: true
  });

}

localbitcoinplusplus.privateKey = {
  isPrivateKey: function(key) {
    return (
      Bitcoin.ECKey.isWalletImportFormat(key) ||
      Bitcoin.ECKey.isCompressedWalletImportFormat(key) ||
      Bitcoin.ECKey.isHexFormat(key) ||
      Bitcoin.ECKey.isBase64Format(key) ||
      Bitcoin.ECKey.isMiniFormat(key)
    );
  },
  getECKeyFromAdding: function(privKey1, privKey2) {
    var n = EllipticCurve.getSECCurveByName("secp256k1").getN();
    var ecKey1 = new Bitcoin.ECKey(privKey1);
    var ecKey2 = new Bitcoin.ECKey(privKey2);
    // if both keys are the same return null
    if (ecKey1.getBitcoinHexFormat() == ecKey2.getBitcoinHexFormat())
      return null;
    if (ecKey1 == null || ecKey2 == null) return null;
    var combinedPrivateKey = new Bitcoin.ECKey(
      ecKey1.priv.add(ecKey2.priv).mod(n)
    );
    // compressed when both keys are compressed
    if (ecKey1.compressed && ecKey2.compressed)
      combinedPrivateKey.setCompressed(true);
    return combinedPrivateKey;
  },
  getECKeyFromMultiplying: function(privKey1, privKey2) {
    var n = EllipticCurve.getSECCurveByName("secp256k1").getN();
    var ecKey1 = new Bitcoin.ECKey(privKey1);
    var ecKey2 = new Bitcoin.ECKey(privKey2);
    // if both keys are the same return null
    if (ecKey1.getBitcoinHexFormat() == ecKey2.getBitcoinHexFormat())
      return null;
    if (ecKey1 == null || ecKey2 == null) return null;
    var combinedPrivateKey = new Bitcoin.ECKey(
      ecKey1.priv.multiply(ecKey2.priv).mod(n)
    );
    // compressed when both keys are compressed
    if (ecKey1.compressed && ecKey2.compressed)
      combinedPrivateKey.setCompressed(true);
    return combinedPrivateKey;
  },
  // 58 base58 characters starting with 6P
  isBIP38Format: function(key) {
    key = key.toString();
    return /^6P[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{56}$/.test(
      key
    );
  },
  BIP38EncryptedKeyToByteArrayAsync: function(
    base58Encrypted,
    passphrase,
    callback
  ) {
    var hex;
    try {
      hex = Bitcoin.Base58.decode(base58Encrypted);
    } catch (e) {
      callback(
        new Error(
          localbitcoinplusplus.translator.get(
            "detailalertnotvalidprivatekey"
          )
        )
      );
      return;
    }

    // 43 bytes: 2 bytes prefix, 37 bytes payload, 4 bytes checksum
    if (hex.length != 43) {
      callback(
        new Error(
          localbitcoinplusplus.translator.get(
            "detailalertnotvalidprivatekey"
          )
        )
      );
      return;
    }
    // first byte is always 0x01
    else if (hex[0] != 0x01) {
      callback(
        new Error(
          localbitcoinplusplus.translator.get(
            "detailalertnotvalidprivatekey"
          )
        )
      );
      return;
    }

    var expChecksum = hex.slice(-4);
    hex = hex.slice(0, -4);
    var checksum = Bitcoin.Util.dsha256(hex);
    if (
      checksum[0] != expChecksum[0] ||
      checksum[1] != expChecksum[1] ||
      checksum[2] != expChecksum[2] ||
      checksum[3] != expChecksum[3]
    ) {
      callback(
        new Error(
          localbitcoinplusplus.translator.get(
            "detailalertnotvalidprivatekey"
          )
        )
      );
      return;
    }

    var isCompPoint = false;
    var isECMult = false;
    var hasLotSeq = false;
    // second byte for non-EC-multiplied key
    if (hex[1] == 0x42) {
      // key should use compression
      if (hex[2] == 0xe0) {
        isCompPoint = true;
      }
      // key should NOT use compression
      else if (hex[2] != 0xc0) {
        callback(
          new Error(
            localbitcoinplusplus.translator.get(
              "detailalertnotvalidprivatekey"
            )
          )
        );
        return;
      }
    }
    // second byte for EC-multiplied key
    else if (hex[1] == 0x43) {
      isECMult = true;
      isCompPoint = (hex[2] & 0x20) != 0;
      hasLotSeq = (hex[2] & 0x04) != 0;
      if ((hex[2] & 0x24) != hex[2]) {
        callback(
          new Error(
            localbitcoinplusplus.translator.get(
              "detailalertnotvalidprivatekey"
            )
          )
        );
        return;
      }
    } else {
      callback(
        new Error(
          localbitcoinplusplus.translator.get(
            "detailalertnotvalidprivatekey"
          )
        )
      );
      return;
    }

    var decrypted;
    var AES_opts = {
      mode: new Crypto.mode.ECB(Crypto.pad.NoPadding),
      asBytes: true
    };

    var verifyHashAndReturn = function() {
      var tmpkey = new Bitcoin.ECKey(decrypted); // decrypted using closure
      var base58AddrText = tmpkey
        .setCompressed(isCompPoint)
        .getBitcoinAddress(); // isCompPoint using closure
      checksum = Bitcoin.Util.dsha256(base58AddrText); // checksum using closure

      if (
        checksum[0] != hex[3] ||
        checksum[1] != hex[4] ||
        checksum[2] != hex[5] ||
        checksum[3] != hex[6]
      ) {
        callback(
          new Error(
            localbitcoinplusplus.translator.get(
              "bip38alertincorrectpassphrase"
            )
          )
        ); // callback using closure
        return;
      }
      callback(tmpkey.getBitcoinPrivateKeyByteArray()); // callback using closure
    };

    if (!isECMult) {
      var addresshash = hex.slice(3, 7);
      Crypto_scrypt(passphrase, addresshash, 16384, 8, 8, 64, function(
        derivedBytes
      ) {
        var k = derivedBytes.slice(32, 32 + 32);
        decrypted = Crypto.AES.decrypt(hex.slice(7, 7 + 32), k, AES_opts);
        for (var x = 0; x < 32; x++) decrypted[x] ^= derivedBytes[x];
        verifyHashAndReturn(); //TODO: pass in 'decrypted' as a param
      });
    } else {
      var ownerentropy = hex.slice(7, 7 + 8);
      var ownersalt = !hasLotSeq
        ? ownerentropy
        : ownerentropy.slice(0, 4);
      Crypto_scrypt(passphrase, ownersalt, 16384, 8, 8, 32, function(
        prefactorA
      ) {
        var passfactor;
        if (!hasLotSeq) {
          // hasLotSeq using closure
          passfactor = prefactorA;
        } else {
          var prefactorB = prefactorA.concat(ownerentropy); // ownerentropy using closure
          passfactor = Bitcoin.Util.dsha256(prefactorB);
        }
        // remove this ECKey from the pool (because user does not see it)
        var userKeyPool = Bitcoin.KeyPool.getArray();
        var kp = new Bitcoin.ECKey(passfactor);
        var passpoint = kp.setCompressed(true).getPub();
        Bitcoin.KeyPool.setArray(userKeyPool);
        var encryptedpart2 = hex.slice(23, 23 + 16);

        var addresshashplusownerentropy = hex.slice(3, 3 + 12);
        Crypto_scrypt(
          passpoint,
          addresshashplusownerentropy,
          1024,
          1,
          1,
          64,
          function(derived) {
            var k = derived.slice(32);

            var unencryptedpart2 = Crypto.AES.decrypt(
              encryptedpart2,
              k,
              AES_opts
            );
            for (var i = 0; i < 16; i++) {
              unencryptedpart2[i] ^= derived[i + 16];
            }

            var encryptedpart1 = hex
              .slice(15, 15 + 8)
              .concat(unencryptedpart2.slice(0, 0 + 8));
            var unencryptedpart1 = Crypto.AES.decrypt(
              encryptedpart1,
              k,
              AES_opts
            );
            for (var i = 0; i < 16; i++) {
              unencryptedpart1[i] ^= derived[i];
            }

            var seedb = unencryptedpart1
              .slice(0, 0 + 16)
              .concat(unencryptedpart2.slice(8, 8 + 8));

            var factorb = Bitcoin.Util.dsha256(seedb);

            var ps = EllipticCurve.getSECCurveByName("secp256k1");
            var privateKey = BigInteger.fromByteArrayUnsigned(passfactor)
              .multiply(BigInteger.fromByteArrayUnsigned(factorb))
              .remainder(ps.getN());

            decrypted = privateKey.toByteArrayUnsigned();
            verifyHashAndReturn();
          }
        );
      });
    }
  },
  BIP38PrivateKeyToEncryptedKeyAsync: function(
    base58Key,
    passphrase,
    compressed,
    callback
  ) {
    var privKey = new Bitcoin.ECKey(base58Key);
    var privKeyBytes = privKey.getBitcoinPrivateKeyByteArray();
    var address = privKey.setCompressed(compressed).getBitcoinAddress();

    // compute sha256(sha256(address)) and take first 4 bytes
    var salt = Bitcoin.Util.dsha256(address).slice(0, 4);

    // derive key using scrypt
    var AES_opts = {
      mode: new Crypto.mode.ECB(Crypto.pad.NoPadding),
      asBytes: true
    };

    Crypto_scrypt(passphrase, salt, 16384, 8, 8, 64, function(
      derivedBytes
    ) {
      for (var i = 0; i < 32; ++i) {
        privKeyBytes[i] ^= derivedBytes[i];
      }

      // 0x01 0x42 + flagbyte + salt + encryptedhalf1 + encryptedhalf2
      var flagByte = compressed ? 0xe0 : 0xc0;
      var encryptedKey = [0x01, 0x42, flagByte].concat(salt);
      encryptedKey = encryptedKey.concat(
        Crypto.AES.encrypt(privKeyBytes, derivedBytes.slice(32), AES_opts)
      );
      encryptedKey = encryptedKey.concat(
        Bitcoin.Util.dsha256(encryptedKey).slice(0, 4)
      );
      callback(Bitcoin.Base58.encode(encryptedKey));
    });
  },
  BIP38GenerateIntermediatePointAsync: function(
    passphrase,
    lotNum,
    sequenceNum,
    callback
  ) {
    var noNumbers = lotNum === null || sequenceNum === null;
    var rng = new SecureRandom();
    var ownerEntropy, ownerSalt;

    if (noNumbers) {
      ownerSalt = ownerEntropy = new Array(8);
      rng.nextBytes(ownerEntropy);
    } else {
      // 1) generate 4 random bytes
      ownerSalt = new Array(4);

      rng.nextBytes(ownerSalt);

      // 2)  Encode the lot and sequence numbers as a 4 byte quantity (big-endian):
      // lotnumber * 4096 + sequencenumber. Call these four bytes lotsequence.
      var lotSequence = BigInteger(
        4096 * lotNum + sequenceNum
      ).toByteArrayUnsigned();

      // 3) Concatenate ownersalt + lotsequence and call this ownerentropy.
      var ownerEntropy = ownerSalt.concat(lotSequence);
    }

    // 4) Derive a key from the passphrase using scrypt
    Crypto_scrypt(passphrase, ownerSalt, 16384, 8, 8, 32, function(
      prefactor
    ) {
      // Take SHA256(SHA256(prefactor + ownerentropy)) and call this passfactor
      var passfactorBytes = noNumbers
        ? prefactor
        : Bitcoin.Util.dsha256(prefactor.concat(ownerEntropy));
      var passfactor = BigInteger.fromByteArrayUnsigned(passfactorBytes);

      // 5) Compute the elliptic curve point G * passfactor, and convert the result to compressed notation (33 bytes)
      var ellipticCurve = EllipticCurve.getSECCurveByName("secp256k1");
      var passpoint = ellipticCurve
        .getG()
        .multiply(passfactor)
        .getEncoded(1);

      // 6) Convey ownersalt and passpoint to the party generating the keys, along with a checksum to ensure integrity.
      // magic bytes "2C E9 B3 E1 FF 39 E2 51" followed by ownerentropy, and then passpoint

      var magicBytes = [0x2c, 0xe9, 0xb3, 0xe1, 0xff, 0x39, 0xe2, 0x51];
      if (noNumbers) magicBytes[7] = 0x53;

      var intermediate = magicBytes
        .concat(ownerEntropy)
        .concat(passpoint);

      // base58check encode
      intermediate = intermediate.concat(
        Bitcoin.Util.dsha256(intermediate).slice(0, 4)
      );
      callback(Bitcoin.Base58.encode(intermediate));
    });
  },
  BIP38GenerateECAddressAsync: function(
    intermediate,
    compressed,
    callback
  ) {
    // decode IPS
    var x = Bitcoin.Base58.decode(intermediate);
    //if(x.slice(49, 4) !== Bitcoin.Util.dsha256(x.slice(0,49)).slice(0,4)) {
    //  callback({error: 'Invalid intermediate passphrase string'});
    //}
    var noNumbers = x[7] === 0x53;
    var ownerEntropy = x.slice(8, 8 + 8);
    var passpoint = x.slice(16, 16 + 33);

    // 1) Set flagbyte.
    // set bit 0x20 for compressed key
    // set bit 0x04 if ownerentropy contains a value for lotsequence
    var flagByte = (compressed ? 0x20 : 0x00) | (noNumbers ? 0x00 : 0x04);

    // 2) Generate 24 random bytes, call this seedb.
    var seedB = new Array(24);
    var rng = new SecureRandom();
    rng.nextBytes(seedB);

    // Take SHA256(SHA256(seedb)) to yield 32 bytes, call this factorb.
    var factorB = Bitcoin.Util.dsha256(seedB);

    // 3) ECMultiply passpoint by factorb. Use the resulting EC point as a public key and hash it into a Bitcoin
    // address using either compressed or uncompressed public key methodology (specify which methodology is used
    // inside flagbyte). This is the generated Bitcoin address, call it generatedaddress.
    var ec = EllipticCurve.getSECCurveByName("secp256k1").getCurve();
    var generatedPoint = ec.decodePointHex(
      localbitcoinplusplus.publicKey.getHexFromByteArray(passpoint)
    );
    var generatedBytes = generatedPoint
      .multiply(BigInteger.fromByteArrayUnsigned(factorB))
      .getEncoded(compressed);
    var generatedAddress = new Bitcoin.Address(
      Bitcoin.Util.sha256ripe160(generatedBytes)
    ).toString();

    // 4) Take the first four bytes of SHA256(SHA256(generatedaddress)) and call it addresshash.
    var addressHash = Bitcoin.Util.dsha256(generatedAddress).slice(0, 4);

    // 5) Now we will encrypt seedb. Derive a second key from passpoint using scrypt
    Crypto_scrypt(
      passpoint,
      addressHash.concat(ownerEntropy),
      1024,
      1,
      1,
      64,
      function(derivedBytes) {
        // 6) Do AES256Encrypt(seedb[0...15]] xor derivedhalf1[0...15], derivedhalf2), call the 16-byte result encryptedpart1
        for (var i = 0; i < 16; ++i) {
          seedB[i] ^= derivedBytes[i];
        }
        var AES_opts = {
          mode: new Crypto.mode.ECB(Crypto.pad.NoPadding),
          asBytes: true
        };
        var encryptedPart1 = Crypto.AES.encrypt(
          seedB.slice(0, 16),
          derivedBytes.slice(32),
          AES_opts
        );

        // 7) Do AES256Encrypt((encryptedpart1[8...15] + seedb[16...23]) xor derivedhalf1[16...31], derivedhalf2), call the 16-byte result encryptedseedb.
        var message2 = encryptedPart1
          .slice(8, 8 + 8)
          .concat(seedB.slice(16, 16 + 8));
        for (var i = 0; i < 16; ++i) {
          message2[i] ^= derivedBytes[i + 16];
        }
        var encryptedSeedB = Crypto.AES.encrypt(
          message2,
          derivedBytes.slice(32),
          AES_opts
        );

        // 0x01 0x43 + flagbyte + addresshash + ownerentropy + encryptedpart1[0...7] + encryptedpart2
        var encryptedKey = [0x01, 0x43, flagByte]
          .concat(addressHash)
          .concat(ownerEntropy)
          .concat(encryptedPart1.slice(0, 8))
          .concat(encryptedSeedB);

        // base58check encode
        encryptedKey = encryptedKey.concat(
          Bitcoin.Util.dsha256(encryptedKey).slice(0, 4)
        );
        callback(generatedAddress, Bitcoin.Base58.encode(encryptedKey));
      }
    );
  }
};

localbitcoinplusplus.publicKey = {
  isPublicKeyHexFormat: function(key) {
    key = key.toString();
    return (
      localbitcoinplusplus.publicKey.isUncompressedPublicKeyHexFormat(
        key
      ) ||
      localbitcoinplusplus.publicKey.isCompressedPublicKeyHexFormat(key)
    );
  },
  // 130 characters [0-9A-F] starts with 04
  isUncompressedPublicKeyHexFormat: function(key) {
    key = key.toString();
    return /^04[A-Fa-f0-9]{128}$/.test(key);
  },
  // 66 characters [0-9A-F] starts with 02 or 03
  isCompressedPublicKeyHexFormat: function(key) {
    key = key.toString();
    return /^0[2-3][A-Fa-f0-9]{64}$/.test(key);
  },
  getBitcoinAddressFromByteArray: function(pubKeyByteArray) {
    var pubKeyHash = Bitcoin.Util.sha256ripe160(pubKeyByteArray);
    var addr = new Bitcoin.Address(pubKeyHash);
    return addr.toString();
  },
  getHexFromByteArray: function(pubKeyByteArray) {
    return Crypto.util
      .bytesToHex(pubKeyByteArray)
      .toString()
      .toUpperCase();
  },
  getByteArrayFromAdding: function(pubKeyHex1, pubKeyHex2) {
    var ecparams = EllipticCurve.getSECCurveByName("secp256k1");
    var curve = ecparams.getCurve();
    var ecPoint1 = curve.decodePointHex(pubKeyHex1);
    var ecPoint2 = curve.decodePointHex(pubKeyHex2);
    // if both points are the same return null
    if (ecPoint1.equals(ecPoint2)) return null;
    var compressed = ecPoint1.compressed && ecPoint2.compressed;
    var pubKey = ecPoint1.add(ecPoint2).getEncoded(compressed);
    return pubKey;
  },
  getByteArrayFromMultiplying: function(pubKeyHex, ecKey) {
    var ecparams = EllipticCurve.getSECCurveByName("secp256k1");
    var ecPoint = ecparams.getCurve().decodePointHex(pubKeyHex);
    var compressed = ecPoint.compressed && ecKey.compressed;
    // if both points are the same return null
    ecKey.setCompressed(false);
    if (ecPoint.equals(ecKey.getPubPoint())) {
      return null;
    }
    var bigInt = ecKey.priv;
    var pubKey = ecPoint.multiply(bigInt).getEncoded(compressed);
    return pubKey;
  },
  // used by unit test
  getDecompressedPubKeyHex: function(pubKeyHexComp) {
    var ecparams = EllipticCurve.getSECCurveByName("secp256k1");
    var ecPoint = ecparams.getCurve().decodePointHex(pubKeyHexComp);
    var pubByteArray = ecPoint.getEncoded(0);
    var pubHexUncompressed = localbitcoinplusplus.publicKey.getHexFromByteArray(
      pubByteArray
    );
    return pubHexUncompressed;
  }
};

localbitcoinplusplus.actions = {
  parse_flo_comments: async function(callback) {
      text = `masterFLOPubKey=03EA5E2CAB18DA585400D6EC569438D415FAF200528E05D0E2B9BEAA2B5C3DCA90
      #!#tradableAsset1=BTC,FLO,BTC_TEST,FLO_TEST#!#tradableAsset2=INR,USD,
      #!#validTradingAmount=10,50,100,#!#btcTradeMargin=5000
      #!#MaxBackups=1
      #!#ordersLife={"trade":300000, "cryptoDeposit":900000, "cryptoWithdraw":300000, "cashDeposit":900000, "cashWithdraw":900000}
      #!#miners_fee={"btc":0.0005, "flo":0.001}
      #!#supernodesPubKeys=0315C3A20FE7096CC2E0F81A80D5F1A687B8F9EFA65242A0B0881E1BA3EE7D7D53,
      026FCC6CFF6EB3A39E54BEB6E13FC2F02C3A93F4767AA80E49E7E876443F95AE5F,
      #!#cashiers={"032871A74D2DDA9D0DE7135F58B5BD2D7F679D2CCA20EA7909466D1A6912DF4022":{"upi":"johnDoe@upi", "currencies":["INR"], "is_live":false},
      "03DB4A12EB543B293DDBB0CE314C46C36D6761294AFBB7264A6D78F710FFD97CF0":{"upi":"janeDoe@upi", "currencies":["INR", "USD"], "is_live":false}}
      #!#ShamirsMaxShares=8#!#supernodeSeeds={"ranchimall1":{"ip":"ranchimall1.duckdns.org:9111","kbucketId":"oZxHcbSf1JC8t5GjutopWYXs7C6Fe9p7ps"},
      "ranchimall6":{"ip":"ranchimall1.duckdns.org:9116","kbucketId":"oV1wCeWca3VawbBTfUGKA7Vd368PATnKAx"}}`;
      return callback(text);
     
     let master_data = '';
     
     if(ENVR==='LIVE') {
      master_data = await helper_functions
      .ajaxGet(`${localbitcoinplusplus.server.flo_mainnet}/api/txs/?address=${localbitcoinplusplus.RM_FLO_SENDING_ADDR}`);
     } else {
      master_data = await helper_functions
      .ajaxGet(`${localbitcoinplusplus.server.flo_testnet}/api/txs/?address=${localbitcoinplusplus.RM_FLO_SENDING_ADDR}`);
     }

      if(typeof master_data==="object" && typeof master_data.txs==="object") {
          let text = '';
          let tx_cmnt_arr = [];

          for(txt of master_data.txs) {
              if(txt.vin[0].addr === localbitcoinplusplus.RM_FLO_SENDING_ADDR) {
                  if(txt.floData.length===0) break;
                  tx_cmnt_arr.push(txt.floData);
              }
          }

          tx_cmnt_arr.reverse().map(m=>text += m.replace('text:', ''));     
          callback(text);
      }
  },

  fetch_configs: function(callback) {
    this.parse_flo_comments(function(floData) {
      let RMAssets = removeWhiteSpaces(floData);
      let floAssetsArray = RMAssets.split("#!#");

      if (
        floAssetsArray.length > 0 &&
        typeof floAssetsArray[0] !== undefined &&
        floAssetsArray[0].trim() !== "" &&
        typeof floAssetsArray[1] !== undefined &&
        floAssetsArray[1].trim() !== ""
      ) {
        try {
          floAssetsArray.map(function(assets_string) {
            let k = assets_string.split("=");
            if (k[1].indexOf(",") > 0) {
              k[1] = k[1]
                .split(",")
                .map(val => (!isNaN(val) ? parseFloat(val) : val.trim()))
                .filter(v => ![null, "", undefined, NaN].includes(v));
            } else if (!isNaN(k[1])) {
              k[1] = parseFloat(k[1]);
            }
            return Object.defineProperty(
              localbitcoinplusplus.master_configurations,
              k[0],
              {
                value: k[1],
                writable: false,
                configurable: false,
                enumerable: true
              }
            );    
          });
          deepFreeze(localbitcoinplusplus.master_configurations);
          return callback(localbitcoinplusplus);
        } catch (error) {
          console.error(
            "FATAL ERROR: Failed to fetch master configuration: ",
            error
          );
        }
      }
      return false;
    });
  },

  sync_with_supernode: async function(trader_flo_address) {

    const user_crypto_balances = await readDBbyIndex('crypto_balances', 
      'trader_flo_address', trader_flo_address);           
    
    const user_cash_balances = await readDBbyIndex('cash_balances', 
      'trader_flo_address', trader_flo_address); 

    const RM_RPC = new localbitcoinplusplus.rpc();
    RM_RPC.send_rpc
      .call(this, "sync_with_supernode", {
        trader_flo_address: trader_flo_address,
        job: "SYNC_MY_LOCAL_DB_WITH_SUPERNODE_DB",
        receiver_flo_address: localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS,
        user_crypto_balances: user_crypto_balances,
        user_cash_balances: user_cash_balances
      })
      .then(sync_request => doSend(sync_request));
  },

  sync_primary_supernode_from_backup_supernode: async function(
    primary_su = "",
    backup_su = ""
  ) {
    const RM_RPC = new localbitcoinplusplus.rpc();

    // First check if you yourself have the right data to serve
    // If not, either get the data or don't serve the users of
    // that dead supernode.

    const tableArray = [
      "deposit",
      "cash_deposits",
      "withdraw_cash",
      "withdraw_btc",
      "cash_balances",
      "crypto_balances",
      "buyOrders",
      "sellOrders",
      "system_btc_reserves_private_keys",
      "supernode_private_key_chunks"
    ];

    const su_db_data = await localbitcoinplusplus.actions.get_sharable_db_data(
      tableArray, false, false
    );

    const dbHashData = await localbitcoinplusplus.actions.getDBTablesLatestHashAndTimestamp(
      primary_su,
      su_db_data
    );
    dbHashData["allowed_receivers"] = backup_su;
    // Now you have db tables timestamp and tables hashes. Send it to other supernodes to check
    // if you have the latest data. If you don't have the latest data, someone
    // will send you the latest data which you can verify before updating.

    RM_RPC.send_rpc
      .call(
        this,
        "do_you_have_latest_data_for_this_supernode",
        dbHashData
      )
      .then(server_sync_response => doSend(server_sync_response));
  },

  sync_backup_supernode_from_backup_supernode: async function(
    requester = "",
    receiversList = "",
    flo_addr_of_backup = ""
  ) {
    const RM_RPC = new localbitcoinplusplus.rpc();

    // First check if you yourself have the right data to serve
    // If not, either get the data or don't serve the users of
    // that dead supernode.

    const tableArray = [
      "deposit",
      "cash_deposits",
      "withdraw_cash",
      "withdraw_btc",
      "cash_balances",
      "crypto_balances",
      "buyOrders",
      "sellOrders",
      "system_btc_reserves_private_keys",
      "supernode_private_key_chunks"
    ];

    const su_db_data = await localbitcoinplusplus.actions.get_sharable_db_data(
      tableArray,
      flo_addr_of_backup,
      false
    );

    const dbHashData = await localbitcoinplusplus.actions.getDBTablesLatestHashAndTimestamp(
      flo_addr_of_backup,
      su_db_data
    );
    if (typeof receiversList == "object" && receiversList.length > 0) {
      dbHashData["allowed_receivers"] = receiversList;
    }
    // Now you have db tables timestamp and tables hashes. Send it to other supernodes to check
    // if you have the latest data. If you don't have the latest data, someone
    // will send you the latest data which you can verify before updating.

    RM_RPC.send_rpc
      .call(
        this,
        "do_you_have_latest_data_for_this_supernode",
        dbHashData
      )
      .then(server_sync_response => doSend(server_sync_response));
  },

  get_sharable_db_data: async function(
    dbTableNamesArray,
    backup_db = "",
    with_dbsigns = true
  ) {
    let arr = {};
    let _readAllDB = readAllDB;
    if (typeof backup_db == "string" && backup_db.length > 0
    ) {
      if (
        typeof localbitcoinplusplus.newBackupDatabase.db[backup_db] ==
        "object"
      ) {
        const foreign_db =
          localbitcoinplusplus.newBackupDatabase.db[backup_db];
        _readAllDB = foreign_db.backup_readAllDB.bind(foreign_db);
      } else {
          if(backup_db!==localbitcoinplusplus.wallets.my_local_flo_address) {
              err_msg = `WARNING: Invalid Backup DB Instance Id: ${backup_db}.`;
              showMessage(err_msg);
              throw new Error(err_msg);
          }
      }
    }
    for (const elem of dbTableNamesArray) {
      await _readAllDB(elem, with_dbsigns).then(
        e => (arr[elem] = e)
      );
    }
    return arr;
  },

  get_sharable_db_data_for_single_user: async function(
    userId = "",
    dbTableNamesArray,
    backup_db = "",
    with_dbsigns=true
  ) {
    let arr = {};
    let _readDBbyIndex = readDBbyIndex;
    if (typeof backup_db == "string" && backup_db.length > 0) {
      if (
        typeof localbitcoinplusplus.newBackupDatabase.db[backup_db] ==
        "object"
      ) {
        const foreign_db =
          localbitcoinplusplus.newBackupDatabase.db[backup_db];
        _readDBbyIndex = foreign_db.backup_readDBbyIndex.bind(foreign_db);
      } else {
          if(backup_db!==localbitcoinplusplus.wallets.my_local_flo_address) {
              err_msg = `WARNING: Invalid Backup DB Instance Id: ${backup_db}.`;
              showMessage(err_msg);
              throw new Error(err_msg);
          }
      }
    }
    for (const elem of dbTableNamesArray) {
      await _readDBbyIndex(elem, "trader_flo_address", userId, with_dbsigns).then(
        e => (arr[elem] = e)
      );
    }
    return arr;
  },

  delete_db_data_for_single_user: async function(
    userId = "",
    dbTableNamesArray,
    backup_db = ""
  ) {
    let arr = {};
    let _removeByIndex = removeByIndex;
    if (typeof backup_db == "string" && backup_db.length > 0) {
      if (
        typeof localbitcoinplusplus.newBackupDatabase.db[backup_db] ==
        "object"
      ) {
        const foreign_db =
          localbitcoinplusplus.newBackupDatabase.db[backup_db];
          _removeByIndex = foreign_db.backup_removeByIndex.bind(foreign_db);
      } else {
        err_msg = `WARNING: Invalid Backup DB Instance Id: ${backup_db}.`;
        showMessage(err_msg);
        throw new Error(err_msg);
      }
    }
    for (const elem of dbTableNamesArray) {
      _removeByIndex(elem, "trader_flo_address", userId);
    }
      
  },

  getHighestVectorClockInTablesOfaDB: function(dbDataOfSupernode = []) {
    return new Promise((resolve, reject) => {
      let higestVCList = [];
      Object.keys(dbDataOfSupernode).map((m, i) => {
        if (typeof dbDataOfSupernode[m] == "object") {
          arr = dbDataOfSupernode[m].map(d => {
            if (typeof d !== "undefined") {
              return d.vectorClock;
            }
          });
          var max = Math.max.apply(null, arr);
          if (
            typeof max !== "number" ||
            [-Infinity, NaN, false, null, undefined].includes(max)
          )
            max = 0;
          return (higestVCList[`${m}_HVC`] = max);
        }
      });
      resolve(higestVCList);
    });
  },

  getHighestTimestampInTablesOfaDB: function(dbDataOfSupernode = []) {
    return new Promise((resolve, reject) => {
      let higestVCList = [];
      Object.keys(dbDataOfSupernode).map((m, i) => {
        if (typeof dbDataOfSupernode[m] == "object") {
          arr = dbDataOfSupernode[m].map(d => {
            if (typeof d !== "undefined") {
              return d.timestamp;
            }
          });
          var max = Math.max.apply(null, arr);
          if (
            typeof max !== "number" ||
            [-Infinity, NaN, false, null, undefined].includes(max)
          )
            max = 0;
          return (higestVCList[`${m}_TIME`] = max);
        }
      });
      resolve(higestVCList);
    });
  },

  getDBTablesLatestHashAndTimestamp: async function(
    su = localbitcoinplusplus.wallets.my_local_flo_address,
    actual_db_data = false,
    tableArray = false
  ) {
    let get_su = await localbitcoinplusplus.kademlia.determineClosestSupernode(
      su
    );

    const supernode_flo_id = get_su[0].data.id;

    if (typeof supernode_flo_id !== "string") {
      throw new Error(
        `WARNING: Failed to calculate supenode of this FLO Id: ${su}.`
      );
    }

    const subjectDB =
      supernode_flo_id ==
      localbitcoinplusplus.wallets.my_local_flo_address
        ? ""
        : supernode_flo_id;

    let dbDataOfSupernode = actual_db_data;

    if (actual_db_data == false) {
      if (typeof tableArray !== "object") {
        tableArray = [
          "deposit",
          "cash_deposits",
          "withdraw_cash",
          "withdraw_btc",
          "cash_balances",
          "crypto_balances",
          "buyOrders",
          "sellOrders",
          "system_btc_reserves_private_keys"
        ];
      }
      dbDataOfSupernode = await localbitcoinplusplus.actions.get_sharable_db_data(
        tableArray,
        subjectDB,
        false
      );
    }

    if (
      typeof dbDataOfSupernode == "object" &&
      Object.keys(dbDataOfSupernode).length > 0
    ) {
      myArray = {};
      Object.keys(dbDataOfSupernode).map(m => {
        // SORT THE DATA HERE A/C TO TIMESTAMP AND THEN HASH
        myArray[m] = Crypto.SHA256(JSON.stringify(dbDataOfSupernode[m]));
      });

      const higestTimestampList = await localbitcoinplusplus.actions.getHighestTimestampInTablesOfaDB(
        dbDataOfSupernode
      );

      const dbDataOfSupernodeStr = JSON.stringify(dbDataOfSupernode);
      const dbDataOfSupernodeHash = Crypto.SHA256(dbDataOfSupernodeStr);

      myArray["id"] = `SU_DB_${supernode_flo_id}`;
      myArray["DBHash"] = dbDataOfSupernodeHash;
      myArray["trader_flo_address"] = supernode_flo_id;
      myArray["data_of"] = supernode_flo_id;
      myArray["higestTimestampList"] = { ...higestTimestampList };

      return myArray;
    }
    return false;
  },

  reset_flo_keys: () => {
    const promise1 = updateinDB(
      "localbitcoinUser",
      {
        id: "00-01",
        myLocalFLOAddress: "",
        myLocalFLOPublicKey: "",
        myAddressTrustLevel: 1
      },
      "00-01"
    );

    const promise2 = removeAllinDB("my_supernode_private_key_chunks");
    const promise3 = removeAllinDB("myClosestSupernodes");
    
    return Promise.all([promise1, promise2, promise3])
      .then(() => true)
      .catch(e => false);
  },

  // https://stackoverflow.com/a/39538518/5348972
  delay: (t, v) => {
    return new Promise(function(resolve) {
      setTimeout(resolve.bind(null, v), t);
    });
  },

  checkIfAllPreviousSupernodesAreDeadForAUserNode: (userFLoID = "") => {
    return new Promise(async (resolve, reject) => {
      if (typeof userFLoID !== "string" || userFLoID.length < 1) {
        console.warn(`Invalid FLO Id`);
        reject(`Invalid FLO Id`);
        return;
      }

      const s_id = await localbitcoinplusplus.kademlia.determineClosestSupernode(
        userFLoID
      );
      const primarySuFloId = s_id[0].data.id;

      let getSupernodeClosestSuObj = await localbitcoinplusplus.kademlia.determineClosestSupernode(
        "",
        localbitcoinplusplus.master_configurations.MaxBackups,
        supernodeKBucket,
        primarySuFloId
      );

      let promises = [];
      let leaving_supernode_flo_id = "";

      for (
        let index = 0;
        index < getSupernodeClosestSuObj.length;
        index++
      ) {
        const element = getSupernodeClosestSuObj[index];
        if (
          element.data.id ==
          localbitcoinplusplus.wallets.my_local_flo_address
        )
          break;
        promises.push(
          readDBbyIndex(
            "myClosestSupernodes",
            "trader_flo_address",
            element.data.id
          )
        );
        leaving_supernode_flo_id = element.data.id;
      }

      Promise.all(promises)
        .then(cs => {
          let isPreviousSupernodesLive = cs.map(
            su_status =>
              typeof su_status[0] !== "object" ||
              su_status[0].is_live == true
          );

          if (!isPreviousSupernodesLive.includes(true)) {
            resolve(true); // Every previous supernode is dead
          } else {
            resolve(false); // At least one previous supernode is alive
          }
        })
        .catch(e => reject(e));
    });
  },

  exportUserDataFromOneSupernodeToAnother: async function(
    myFloId= "",  
    userFloId = "",
    receipient_su = ""
  ) {  
    let immigrantsList = [];
    const tableArray = [
      "deposit",
      "cash_deposits",
      "withdraw_cash",
      "withdraw_btc",
      "crypto_balances",
      "cash_balances",
      "buyOrders",
      "sellOrders",
      "system_btc_reserves_private_keys"
    ];

    let db_list = Object.values(localbitcoinplusplus.newBackupDatabase.db).map(m=>m.db);
    db_list.push(db);

    // First create a db backup and save it
    await localbitcoinplusplus.IdbBackup.exportIDBtoFile(db_list, tableArray); 

    const RM_RPC = new localbitcoinplusplus.rpc();
    if (userFloId.length > 0) {
      let closestSu = await localbitcoinplusplus.kademlia.determineClosestSupernode(
        userFloId
      );

      const immigrants_data = await localbitcoinplusplus.actions.get_sharable_db_data_for_single_user(
        userFloId,
        tableArray
      );

      if (typeof immigrants_data === "object") {
        immigrants_data.trader_flo_address = closestSu[0].data.id;
        immigrants_data.receiver_flo_address = closestSu[0].data.id;
        
        RM_RPC.send_rpc
          .call(
            this,
            "sync_primary_supernode_from_backup_supernode_response",
            immigrants_data
          )
          .then(server_sync_response => doSend(server_sync_response));
      }
    } else {

      const allUsersData = await readAllDB("userPublicData");

      const supernodesFloList = localbitcoinplusplus.master_configurations.supernodesPubKeys
      .map(s => bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(s));

      const extra_backup_ws = {};

      for (let f = 0; f < allUsersData.length; f++) {
        let closestSu = await localbitcoinplusplus.kademlia.determineClosestSupernode(
          allUsersData[f].trader_flo_address
        );

        if (
          closestSu[0].data.id !==
            localbitcoinplusplus.wallets.my_local_flo_address &&
          !supernodesFloList.includes(allUsersData[f].trader_flo_address)
        ) {
          const immigrants_data = await localbitcoinplusplus.actions.get_sharable_db_data_for_single_user(
            allUsersData[f].trader_flo_address,
            tableArray
          );

          if (typeof immigrants_data === "object") {
            immigrants_data.trader_flo_address = closestSu[0].data.id;
            immigrants_data.receiver_flo_address = closestSu[0].data.id;
            
            let server_sync_response = await RM_RPC.send_rpc
              .call(
                this,
                "sync_primary_supernode_from_backup_supernode_response",
                immigrants_data
              );

            const RM_WALLET = new localbitcoinplusplus.wallets();

            const message256hash = Crypto.SHA256(server_sync_response);
            
            let msgObj = JSON.parse(server_sync_response);

            if (
              typeof localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY !==
              "string"
            )
              throw new Error(`WARNING: Private key could not be found.`);

            const nodeSignedMessage = RM_WALLET.sign(
              message256hash,
              localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
            );

            msgObj.nodeMessage256hash = message256hash;
            msgObj.nodeSignedMessage = nodeSignedMessage;
            msgObj.nodePubKey=localbitcoinplusplus.wallets.my_local_flo_public_key;

            let finalMessage = JSON.stringify(msgObj);  

            if(typeof localbitcoinplusplus.backupWS[closestSu[0].data.id]=="object"
            && localbitcoinplusplus.backupWS[closestSu[0].data.id].ws_connection.readyState==WebSocket.OPEN) {

              localbitcoinplusplus.backupWS[closestSu[0].data.id].ws_connection.send(finalMessage);

            } else if(typeof extra_backup_ws[closestSu[0].data.id]=="object") {

              extra_backup_ws[closestSu[0].data.id].send(finalMessage);
              
            } else {
              const url = `${WS}://${localbitcoinplusplus.myClosestSupernodes[closestSu[0].data.id].ip}`;
              
              if(closestSu[0].data.id==localbitcoinplusplus.wallets.my_local_flo_address) return;

              extra_backup_ws[closestSu[0].data.id] = new WebSocket(url);
              extra_backup_ws[closestSu[0].data.id].onopen = function(evt) {
                  //if (extra_backup_ws[closestSu[0].data.id].bufferedAmount == 0) {
                      extra_backup_ws[closestSu[0].data.id].send(finalMessage);
                  //}
              };
              extra_backup_ws[closestSu[0].data.id].onclose = function(evt) {
                  console.info(`Closed extra conn ${evt.srcElement.url}`);
              }
            }

            // Delete this user's data from this server
            localbitcoinplusplus.actions.delete_db_data_for_single_user(allUsersData[f].trader_flo_address, tableArray);            

            // Ask backups to delete this user data
              const msg_obj = {};
                  msg_obj.protocol = '__ALL_SUPERNODES_MSG__';
                  msg_obj.event = 'delete_this_user_data_from_backup';
                  msg_obj.data = {request: "REMOVE_DB_DATA_OF_USER"};
                  msg_obj.initialSender = localbitcoinplusplus.wallets.my_local_flo_address;
                  msg_obj.su_pubKey = localbitcoinplusplus.wallets.my_local_flo_public_key;
                  msg_obj.db_name = localbitcoinplusplus.wallets.my_local_flo_address;
                  msg_obj.trader_flo_address = allUsersData[f].trader_flo_address;
                  msg_obj.tableArray = tableArray;
                  msg_obj.hash = Crypto.SHA256(msg_obj);
                  msg_obj.sign = RM_WALLET.sign(
                      msg_obj.hash,
                      localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
                  );

              reactor.dispatchEvent('informAllSuperNode', msg_obj);  

            // Delete this user from kBucketStore datastore and Kbucket
            const UintID = localbitcoinplusplus.kademlia.floIdToKbucketId(
                localbitcoinplusplus.BASE_BLOCKCHAIN, allUsersData[f].trader_flo_address);
            
            await removeinDB('kBucketStore', UintID);
            KBucket.remove(UintID);  
          }
        }
      }

      localbitcoinplusplus.kademlia.updateClosestSupernodeSeeds(myFloId);

      for (const wskey in extra_backup_ws) {
          if (extra_backup_ws.hasOwnProperty(wskey)) {
              const conn = extra_backup_ws[wskey];
              conn.close();
              delete extra_backup_ws[wskey];
          }
      }

    }

  },

  refresh_live_status_of_supernodes: async function(send_resolve_ws_conns_to_rest_supernodes=false) {
      try {
          const msg_obj = {};
          if(send_resolve_ws_conns_to_rest_supernodes===true) {
              const RM_WALLET = new localbitcoinplusplus.wallets;
                  msg_obj.protocol = '__ALL_SUPERNODES_MSG__';
                  msg_obj.event = 'refresh_all_supernodes_status';
                  msg_obj.data = {request: "RESOLVE_BACKUP_WS_CONNS"};
                  msg_obj.initialSender = localbitcoinplusplus.wallets.my_local_flo_address;
                  msg_obj.su_pubKey = localbitcoinplusplus.wallets.my_local_flo_public_key;
                  msg_obj.hash = Crypto.SHA256(msg_obj);
                  msg_obj.sign = RM_WALLET.sign(
                      msg_obj.hash,
                      localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
              );
          }

          let promises = [];
          for (const mcs in localbitcoinplusplus.myClosestSupernodes) {
              if(mcs===localbitcoinplusplus.wallets.my_local_flo_address) continue;
              let wsUri = `${WS}://${localbitcoinplusplus.myClosestSupernodes[mcs].ip}`;
              promises.push(new Promise((resolve, reject) => {
                  let temp_ws = new WebSocket(wsUri);
                  temp_ws.onopen = async function(evt) {
                      if(send_resolve_ws_conns_to_rest_supernodes===true
                      && typeof msg_obj.event=="string") {
                          // On open, request the connected supernode to resolve ws conn
                          temp_ws.send(JSON.stringify(msg_obj));
                      }
                      resolve(`${wsUri}->1`);
                      temp_ws.close();
                  };
                  temp_ws.onclose = function(evt) {
                      temp_ws = null;
                      delete temp_ws;
                      if(!evt.wasClean) {
                          resolve(`${wsUri}->0`);
                      }
                  };
                  temp_ws.onerror = function(evt) {
                      temp_ws.close();
                  }
              }));
          }

          let supernodesCurrentStatus = await Promise.all(promises);
          console.log(supernodesCurrentStatus);
          
          const switchMyWS = new backupSupernodesWebSocketObject();
          for(currentwsurl of supernodesCurrentStatus) {
              let split_response = currentwsurl.split('->');
              let wsurl = split_response[0];
              let status = split_response[1]==1 ? true:false;
              await switchMyWS.updateSupernodeAvailabilityStatus(
                  wsurl,
                  status
              );
          }
      } catch(e) {
          throw new Error(e)
      }
  },

  request_live_prices_from_server: function() {
      try {
          let RM_RPC = new localbitcoinplusplus.rpc;  
          RM_RPC.send_rpc(
              "live_prices_request",
              {
                  trader_flo_address: localbitcoinplusplus.wallets.my_local_flo_address
              }
          ).then(delRequestObject =>
              doSend(delRequestObject)
          );
      } catch (error) {
          showMessage('Failed to request live prices from server. Please try later.')
      }
  },

  is_user_blacklisted: function(flo_addr="") {
      try {
          storedNames = JSON.parse(localStorage.getItem("blacklisted_flo_addrs"));
          if(typeof storedNames=="object" && storedNames !== null) {
              return storedNames.includes(flo_addr);
          } else return false;
      } catch (error) {
          return false;
      }
  },

  whitelist_flo_id: function(flo_addr='') {
      let blacklist = JSON.parse(localStorage.getItem("blacklisted_flo_addrs"));
      if(blacklist==null || typeof blacklist !== "object") return;
      let index = blacklist.indexOf(flo_addr);
      if(index>=0) {
          blacklist.splice(index, 1);
          localStorage.setItem("blacklisted_flo_addrs", JSON.stringify(blacklist));
      }  
  },

  blacklist_flo_id: function(flo_addr='') {
      let blacklist = JSON.parse(localStorage.getItem("blacklisted_flo_addrs"));
      try {
          if(!blacklist.includes(flo_addr)) {
              blacklist.push(flo_addr);
              localStorage.setItem("blacklisted_flo_addrs", JSON.stringify(blacklist));
          }
      } catch (error) {
          blacklist = [flo_addr];
          localStorage.setItem("blacklisted_flo_addrs", JSON.stringify(blacklist));
          
      }
  },

  master_encrypt: function(msg='') {
      try {
          if(typeof msg !== 'string') {
              msg = JSON.stringify(msg);
          }
          if(msg.length<1 || typeof masterEncryptionKey !== "string")
              throw new Error("Invalid request");

          return Crypto.AES.encrypt(msg, masterEncryptionKey);

      } catch (error) {
          throw new Error(error);
      }
  },

  master_decrypt: function(encrypted_msg='') {
      try {
          if(encrypted_msg.length<1 || typeof masterEncryptionKey !== "string")
              throw new Error("Invalid request");

          return Crypto.AES.decrypt(encrypted_msg, masterEncryptionKey);

      } catch (error) {
          throw new Error(error);
      }
  },

};

/*Modified functions from https://github.com/tristanls/k-bucket */
localbitcoinplusplus.kademlia = {
  decodeBase58Address: function(blockchain, address) {
    let k = bitjs[blockchain].Base58.decode(address);
    k.shift();
    k.splice(-4, 4);
    return Crypto.util.bytesToHex(k);
  },
  launchKBucket: function(flo_id) {
    return new Promise((resolve, reject) => {
      try {
        const KBucketId = localbitcoinplusplus.kademlia.floIdToKbucketId(
          localbitcoinplusplus.BASE_BLOCKCHAIN,
          flo_id
        );
        const kbOptions = { localNodeId: KBucketId };
        window.KBucket = new BuildKBucket(kbOptions);

        const master_flo_pubKey =
          localbitcoinplusplus.master_configurations.masterFLOPubKey;
        const master_flo_addr = bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(
          master_flo_pubKey
        );
        if (typeof master_flo_addr !== "string") return reject(false);
        const SuKBucketId = localbitcoinplusplus.kademlia.floIdToKbucketId(
          localbitcoinplusplus.BASE_BLOCKCHAIN,
          master_flo_addr
        );
        const SukbOptions = { localNodeId: SuKBucketId };
        window.supernodeKBucket = new BuildKBucket(SukbOptions);

        resolve(true);
      } catch (error) {
        reject(error);
      }
    });
  },
  launchSupernodesKBucket: function() {
    localbitcoinplusplus.master_configurations.supernodesPubKeys.map(
      pubKey => {
        return new Promise((resolve, reject) => {
          try {
            let flo_id = bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(pubKey);
            let kname = `SKBucket_${pubKey}`;
            const KBucketId = localbitcoinplusplus.kademlia.floIdToKbucketId(
              localbitcoinplusplus.BASE_BLOCKCHAIN,
              flo_id
            );
            const kbOptions = { localNodeId: KBucketId };
            window[kname] = new BuildKBucket(kbOptions);
            resolve(true);
          } catch (error) {
            reject(error);
          }
        });
      }
    );
  },
  addContact: function(id, data, KB = KBucket) {
    const contact = {
      id: id,
      data: data
    };
    KB.add(contact);
  },
  addNewUserNodeInKbucket: function(
    blockchain,
    address,
    data,
    KB = KBucket
  ) {
    let decodedId = address;
    try {
      decodedId = this.floIdToKbucketId(blockchain, address);
    } catch (e) {
      decodedId = address;
    }
    const addNewUserNode = this.addContact(decodedId, data, KB);
    return { decodedId: decodedId, data: data };
  },
  addNewUserNodeInKbucketAndDB: function(
    blockchain,
    address,
    data,
    KB = KBucket
  ) {
    let closestSupernodePubKey = localbitcoinplusplus.master_configurations.supernodesPubKeys.filter(
      j => bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(j) == data.id
    );

    let kbuck = this.addNewUserNodeInKbucket(
      blockchain,
      address,
      data,
      KB
    );
    readDB("kBucketStore", kbuck.decodedId).then(kres => {
      if (typeof kres == "object") {
        kres.data = data;
        kres.primary_supernode_flo_public_key = closestSupernodePubKey[0];
      } else {
        kbuckObj = {
          id: kbuck.decodedId,
          vectorClock: 0,
          data: kbuck.data,
          primary_supernode_flo_public_key: closestSupernodePubKey[0],
          last_updated_on: +new Date()
        };
        kres = kbuckObj;
      }
      updateinDB("kBucketStore", kres)
        .then(ms => showMessage(`INFO: Added/Updated a node in DB.`))
        .catch(e => {
          showMessage(`ERROR: Failed to add a node in DB.`);
        });
      return Promise.resolve(kbuck);
    });
  },
  addFullKBDataInKBucketAndDB: function(full_data, KB) {
    let userKBId = "";
    let isFloIdUint8 = full_data.id instanceof Uint8Array;
    if (!isFloIdUint8) {
      userKBId = this.floIdToKbucketId(localbitcoinplusplus.BASE_BLOCKCHAIN, full_data.data.id);
      this.addContact(userKBId, full_data.data, KB);
      full_data.id = userKBId;
    } else {
      this.addContact(full_data.id, full_data.data, KB);
    }
    updateinDB("kBucketStore", full_data)
      .then(ms => showMessage(`INFO: Added/Updated a node in DB.`))
      .catch(e => {
        showMessage(`ERROR: Failed to add a node in DB.`);
      });
  },
  floIdToKbucketId: function(blockchain, address) {
    const decodedId = this.decodeBase58Address(blockchain, address);
    const nodeIdBigInt = new BigInteger(decodedId, 16);
    const nodeIdBytes = nodeIdBigInt.toByteArrayUnsigned();
    const nodeIdNewInt8Array = new Uint8Array(nodeIdBytes);
    return nodeIdNewInt8Array;
  },
  arbiter: function(incumbent, candidate) {
    // we create a new object so that our selection is guaranteed to replace
    // the incumbent
    const merged = {
      id: incumbent.id, // incumbent.id === candidate.id within an arbiter
      data: incumbent.data
    };

    Object.keys(candidate.data).forEach(workerNodeId => {
      merged.data[workerNodeId] = candidate.data[workerNodeId];
    });

    return merged;
  },
  newBase64DiscoverId: function(pubKey) {
    let pubKeyBytes = Crypto.util.hexToBytes(pubKey);
    return Crypto.util.bytesToBase64(pubKeyBytes);
  },
  restoreKbucket: function(
    flo_addr,
    blockchain = localbitcoinplusplus.BASE_BLOCKCHAIN,
    KB = KBucket
  ) {
    return new Promise((resolve, reject) => {
      readAllDB("kBucketStore").then(dbObject => {
        if (typeof dbObject == "object") {
          let su_flo_addr_array = localbitcoinplusplus.master_configurations.supernodesPubKeys.map(
            pubk => bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(pubk)
          );
          // Prevent supernode to re-added in kbucket
          dbObject
            .filter(f => !su_flo_addr_array.includes(f.data.id))
            .map(dbObj => {
              this.addNewUserNodeInKbucket(
                blockchain,
                flo_addr,
                dbObj.data,
                KB
              );
            });
        } else {
          reject(`Failed to restore kBucket.`);
        }
        resolve(dbObject);
      });
    });
  },
  restoreSupernodeKBucket: function() {
    return new Promise((resolve, reject) => {
      const supernodeSeeds =
        localbitcoinplusplus.master_configurations.supernodeSeeds;
      if (typeof supernodeSeeds !== "object")
        reject("Failed to get supernode seeds.");
      let supernodeSeedsObj = JSON.parse(supernodeSeeds);

      Object.entries(supernodeSeedsObj).map(seedObj => {
        let kbuck = this.addNewUserNodeInKbucket(
          localbitcoinplusplus.BASE_BLOCKCHAIN,
          seedObj[1].kbucketId,
          { id: seedObj[1].kbucketId },
          supernodeKBucket
        );
      });

      resolve(true);
    });
  },
  updateClosestSupernodeSeeds: function(flo_addr) {
    return new Promise(async (resolve, reject) => {
      await removeAllinDB("myClosestSupernodes");
      let nearestSupernodeAddresslist = await localbitcoinplusplus.kademlia.addClosestSupernodeInDB(
        flo_addr
      );
      nearestSupernodeAddresslist.map(
        (nearestSupernodeAddress, index) => {
          updateinDB("myClosestSupernodes", {
            id: index + 1,
            ip: nearestSupernodeAddress.ip,
            //port: nearestSupernodeAddress.port,
            trader_flo_address: nearestSupernodeAddress.kbucketId,
            is_live: null
          }).then(updatedClosestSupernodes => {
            readAllDB("myClosestSupernodes").then(
              nearestSupernodeAddresslist => {
                showMessage(
                  `INFO: Updated closest supernodes list successfully.`
                );
                resolve(nearestSupernodeAddresslist);
              }
            );
          });
        }
      );
    });
  },
  getSupernodeSeed: function(flo_addr) {
    return new Promise(async (resolve, reject) => {
      nearestSupernodeAddresslist = await this.updateClosestSupernodeSeeds(
          flo_addr
      );
  
      resolve(nearestSupernodeAddresslist);
    });
  },
  isNodePresentInMyKbucket: function(flo_id, KB = KBucket) {
    return new Promise((resolve, reject) => {
      let kArray = KB.toArray();
      let kArrayFloIds = kArray.map(k => k.data.id);
      if (kArrayFloIds.includes(flo_id)) {
        resolve(true);
      } else {
        reject(false);
      }
    });
  },
  determineClosestSupernode: function(
    flo_addr = "",
    n = 1,
    KB = supernodeKBucket,
    su = ""
  ) {
    return new Promise((resolve, reject) => {
      let msg = ``;
      if (typeof supernodeKBucket !== "object") {
        msg = `ERROR: Supernode KBucket not found.`;
        showMessage(msg);
        reject(msg);
        return false;
      }

      if(typeof n!=="number") n=localbitcoinplusplus
          .master_configurations.supernodesPubKeys.length||1;

      if (su.length > 0) {
        try {
          let closestSupernodeMasterList = supernodeKBucket.closest(
            supernodeKBucket.localNodeId
          );
          const index = closestSupernodeMasterList.findIndex(
            f => f.data.id == su
          );
          let tail = closestSupernodeMasterList.splice(0, index);
          const newClosestSupernodeMasterList = closestSupernodeMasterList.concat(
            tail
          );
          resolve(newClosestSupernodeMasterList);
          return true;
        } catch (error) {
          reject(error);
        }
        return false;
      }

      try {
        if (flo_addr.length !== 34) {
          showMessage(
            `WARNING: No Flo Id provided to determine closest Supenode.`
          );
          return;
        }
        let isFloIdUint8 = flo_addr instanceof Uint8Array;
        if (!isFloIdUint8) {
          flo_addr = localbitcoinplusplus.kademlia.floIdToKbucketId(
              localbitcoinplusplus.BASE_BLOCKCHAIN,
              flo_addr
          );
        }
        const closestSupernode = supernodeKBucket.closest(flo_addr, n);
        resolve(closestSupernode);
        return true;
      } catch (error) {
        showMessage(error);
        reject(error);
        return false;
      }
    });
  },
  addClosestSupernodeInDB: function(flo_addr, KB = supernodeKBucket) {
    return new Promise(async (resolve, reject) => {
      const supernodeSeeds =
        localbitcoinplusplus.master_configurations.supernodeSeeds;
      if (typeof supernodeSeeds !== "object")
        reject("Failed to get supernode seeds.");
      let supernodeSeedsObj = JSON.parse(supernodeSeeds);

      Object.entries(supernodeSeedsObj).map(seedObj => {
        console.log(seedObj);
        localbitcoinplusplus.kademlia.addNewUserNodeInKbucketAndDB(
          localbitcoinplusplus.BASE_BLOCKCHAIN,
          seedObj[1].kbucketId,
          { id: seedObj[1].kbucketId }
        );
      });

      let primarySu = await this.determineClosestSupernode(flo_addr);
      let nearestSupernode = await this.determineClosestSupernode(
        (flo_addr = ""),
        (n = 1),
        supernodeKBucket,
        primarySu[0].data.id
      );
      let nearestSupernodeIds = nearestSupernode.map(f => f.data.id);
      let supernodeSeedsArray = Object.values(supernodeSeedsObj)
        .filter(seed => nearestSupernodeIds.includes(seed.kbucketId))
        .sort(function(a, b) {
          return (
            nearestSupernodeIds.indexOf(a.kbucketId) -
            nearestSupernodeIds.indexOf(b.kbucketId)
          );
        });

      if (supernodeSeedsArray.length > 0) {
        resolve(supernodeSeedsArray);
      } else {
        reject(false);
      }
    });
  }
};
</script>

<script>
localbitcoinplusplus.encrypt = {
  p: BigInteger(
    "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F",
    16
  ),

  exponent1: function() {
    return localbitcoinplusplus.encrypt.p
      .add(BigInteger.ONE)
      .divide(BigInteger("4"));
  },

  calculateY: function(x) {
    let p = localbitcoinplusplus.encrypt.p;
    let exp = localbitcoinplusplus.encrypt.exponent1();
    // x is x value of public key in BigInteger format without 02 or 03 or 04 prefix
    return x
      .modPow(BigInteger("3"), p)
      .add(BigInteger("7"))
      .mod(p)
      .modPow(exp, p);
  },

  // Insert a compressed public key
  getUncompressedPublicKey: function(compressedPublicKey) {
    const p = localbitcoinplusplus.encrypt.p;

    // Fetch x from compressedPublicKey
    let pubKeyBytes = Crypto.util.hexToBytes(compressedPublicKey);
    const prefix = pubKeyBytes.shift(); // remove prefix
    let prefix_modulus = prefix % 2;
    pubKeyBytes.unshift(0); // add prefix 0
    let x = new BigInteger(pubKeyBytes);
    let xDecimalValue = x.toString();

    // Fetch y
    let y = localbitcoinplusplus.encrypt.calculateY(x);
    let yDecimalValue = y.toString();

    // verify y value
    let resultBigInt = y.mod(BigInteger("2"));

    let check = resultBigInt.toString() % 2;

    if (prefix_modulus !== check) {
      yDecimalValue = y
        .negate()
        .mod(p)
        .toString();
    }

    return {
      x: xDecimalValue,
      y: yDecimalValue
    };
  },

  getSenderPublicKeyString: function() {
    privateKey = ellipticCurveEncryption.senderRandom();
    senderPublicKeyString = ellipticCurveEncryption.senderPublicString(
      privateKey
    );
    return {
      privateKey: privateKey,
      senderPublicKeyString: senderPublicKeyString
    };
  },

  deriveSharedKeySender: function(
    receiverCompressedPublicKey,
    senderPrivateKey
  ) {
    try {
      let receiverPublicKeyString = localbitcoinplusplus.encrypt.getUncompressedPublicKey(
        receiverCompressedPublicKey
      );
      var senderDerivedKey = {
        XValue: "",
        YValue: ""
      };
      senderDerivedKey = ellipticCurveEncryption.senderSharedKeyDerivation(
        receiverPublicKeyString.x,
        receiverPublicKeyString.y,
        senderPrivateKey
      );
      return senderDerivedKey;
    } catch (error) {
      return new Error(error);
    }
  },

  deriveReceiverSharedKey: function(
    senderPublicKeyString,
    receiverPrivateKey
  ) {
    return ellipticCurveEncryption.receiverSharedKeyDerivation(
      senderPublicKeyString.XValuePublicString,
      senderPublicKeyString.YValuePublicString,
      receiverPrivateKey
    );
  },

  getReceiverPublicKeyString: function(privateKey) {
    return ellipticCurveEncryption.receiverPublicString(privateKey);
  },

  deriveSharedKeyReceiver: function(
    senderPublicKeyString,
    receiverPrivateKey
  ) {
    try {
      return ellipticCurveEncryption.receiverSharedKeyDerivation(
        senderPublicKeyString.XValuePublicString,
        senderPublicKeyString.YValuePublicString,
        receiverPrivateKey
      );
    } catch (error) {
      return new Error(error);
    }
  },

  encryptMessage: function(data, receiverCompressedPublicKey) {
    var senderECKeyData = localbitcoinplusplus.encrypt.getSenderPublicKeyString();
    var senderDerivedKey = {
      XValue: "",
      YValue: ""
    };
    var senderPublicKeyString = {};
    senderDerivedKey = localbitcoinplusplus.encrypt.deriveSharedKeySender(
      receiverCompressedPublicKey,
      senderECKeyData.privateKey
    );
    console.log("senderDerivedKey", senderDerivedKey);
    let senderKey = senderDerivedKey.XValue + senderDerivedKey.YValue;
    let secret = Crypto.AES.encrypt(data, senderKey);
    return {
      secret: secret,
      senderPublicKeyString: senderECKeyData.senderPublicKeyString
    };
  },

  decryptMessage: function(secret, senderPublicKeyString) {
    var receiverDerivedKey = {
      XValue: "",
      YValue: ""
    };
    var receiverECKeyData = {};

    let myPrivateKey =
      localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY;
    if (typeof myPrivateKey !== "string")
      throw new Error("No private key found.");

    const RM_WALLET = new localbitcoinplusplus.wallets();
    let privateKey = RM_WALLET.wifToDecimal(myPrivateKey, true);
    if (typeof privateKey.privateKeyDecimal !== "string")
      throw new Error("Failed to detremine your private key.");
    receiverECKeyData.privateKey = privateKey.privateKeyDecimal;

    receiverDerivedKey = localbitcoinplusplus.encrypt.deriveReceiverSharedKey(
      senderPublicKeyString,
      receiverECKeyData.privateKey
    );
    console.log("receiverDerivedKey", receiverDerivedKey);

    let receiverKey =
      receiverDerivedKey.XValue + receiverDerivedKey.YValue;
    let decryptMsg = Crypto.AES.decrypt(secret, receiverKey);
    return decryptMsg;
  },

};
</script>

<!-- Reactor Events -->
<script>
reactor.registerEvent("new_supernode_connected");
reactor.registerEvent("primary_supernode_down");
reactor.registerEvent("backup_supernode_up");
reactor.registerEvent("backup_supernode_down");
reactor.registerEvent("fireNodeGoodByeEvent");
reactor.registerEvent("sync_primary_and_backup_db");
reactor.registerEvent("store_backup_crypto_pk_object");
reactor.registerEvent("sync_backup_nodes_of_my_backup_node");
reactor.registerEvent("resolve_backup_ws_connections");
reactor.registerEvent("shift_ws_connection");
reactor.registerEvent("switchToBackupWSForSuperNodesOperations");
reactor.registerEvent("user_flo_keys_active");
reactor.registerEvent("remove_extra_backup_connections");
reactor.registerEvent("createClosestSupernodesObject");
reactor.registerEvent("createCashierStatusObject");
reactor.registerEvent("informAllSuperNode");
reactor.registerEvent("informLeftSuperNode");
reactor.registerEvent("informRightSuperNode");
reactor.registerEvent("message_for_user");
reactor.registerEvent("remove_temp_data_from_db");
reactor.registerEvent("remove_redundant_crypto_deposits");

reactor.addEventListener("new_supernode_connected", async function(evt) {
  const switchMyWS = new backupSupernodesWebSocketObject();
  const connected_su_flo_id = await switchMyWS.getFloIdFromWSUrl(evt.srcElement.url);
  if(!localbitcoinplusplus.master_configurations.supernodesPubKeys
  .includes(localbitcoinplusplus.wallets.my_local_flo_public_key)) {
      localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS=connected_su_flo_id;
  }
  switchMyWS.updateSupernodeAvailabilityStatus(connected_su_flo_id, true);
  showMessage(
    `INFO: Connected successfully to Supernode: ${evt.srcElement.url}`
  );
  console.log("CONNECTED");
});

reactor.addEventListener("primary_supernode_down", async function(evt) {
  showMessage(
    `INFO: Disconnected to Supernode server: ${evt.srcElement.url}`
  );

  const switchMyWS = new backupSupernodesWebSocketObject();
  switchMyWS.updateSupernodeAvailabilityStatus(evt.srcElement.url, false);
  const disconnectedWSServerFloId = await switchMyWS.getFloIdFromWSUrl(
    evt.srcElement.url
  );
  showMessage(
    `INFO: Waiting for primary Supernode connection to come back within 30sec.`
  );

  localbitcoinplusplus.actions.delay(30000).then(async () => {
    const getSubjectSupernodeDetails = await readDBbyIndex(
      "myClosestSupernodes",
      "trader_flo_address",
      disconnectedWSServerFloId
    );
    if (
      typeof getSubjectSupernodeDetails == "object" &&
      getSubjectSupernodeDetails[0].is_live !== true
      && websocket.readyState != WebSocket.OPEN
    ) {
      showMessage(
        `INFO: Connection to primary Supernode failed. Attempting to connect to secondary Supernode.`
      );
      switchMyWS.switchToBackupWS(evt.srcElement.url);
    }
  });
});

reactor.addEventListener("fireNodeGoodByeEvent", async function(getFLOId='') {
    let msg = "";

    // Get the current status now
    const getStatusOfDeadSuAgain = await readDBbyIndex(
      "myClosestSupernodes",
      "trader_flo_address",
      getFLOId
    );

    if (getStatusOfDeadSuAgain.length < 1) return;
    
    // Update status to false
    const switchMyWS = new backupSupernodesWebSocketObject();
    await switchMyWS.updateSupernodeAvailabilityStatus(
        getFLOId,
        false
    );

    if (localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
      localbitcoinplusplus.wallets.my_local_flo_public_key
       )
      ) {

        // Stop yourself from serving it unless proper DB sync
        //localbitcoinplusplus.services[`can_serve_${getFLOId}`] = false;

        // Initiate connections with next live supernodes
        //reactor.dispatchEvent("resolve_backup_ws_connections");

        const mcs = await readAllDB("myClosestSupernodes");
        const myClosestSupList = mcs.filter(
          (k, i) =>
            i <= localbitcoinplusplus.master_configurations.MaxBackups
        );
        const index = mcs.findIndex(
          f => f.trader_flo_address == getFLOId
        );
        tail = mcs.splice(0, index);
        const newClosestSupernodeMasterList = mcs
          .concat(tail)
          .filter(
            (k, i) =>
              i <= localbitcoinplusplus.master_configurations.MaxBackups
          );

        const RM_RPC = new localbitcoinplusplus.rpc();

        for (i = 0; i < newClosestSupernodeMasterList.length; i++) {
          if (
            newClosestSupernodeMasterList[i].is_live == true &&
            newClosestSupernodeMasterList[i].trader_flo_address !==
              localbitcoinplusplus.wallets.my_local_flo_address
          )
            break;

          if (
            newClosestSupernodeMasterList[i].trader_flo_address ==
            localbitcoinplusplus.wallets.my_local_flo_address
          ) {
            // First check if you yourself have the right data to serve
            // If not, either get the data or don't serve the users of
            // that dead supernode.

            const tableArray = [
              "deposit",
              "cash_deposits",
              "withdraw_cash",
              "withdraw_btc",
              "cash_balances",
              "crypto_balances",
              "buyOrders",
              "sellOrders",
              "system_btc_reserves_private_keys",
              "supernode_private_key_chunks"
            ];

            // Don't pass su_db_data in this as it contains db sign as well
            const dbHashData = await localbitcoinplusplus.actions.getDBTablesLatestHashAndTimestamp(
              getFLOId
            );

            // Now you have db tables timestamp and tables hashes. Send it to other supernodes to check
            // if you have the latest data. If you don't have the latest data, someone
            // will send you the latest data which you can verify before updating.

            RM_RPC.send_rpc
              .call(
                this,
                "do_you_have_latest_data_for_this_supernode",
                dbHashData
              )
              .then(server_sync_response => doSend(server_sync_response));

            // Send dead supernode's data to all your backup supernodes
            // which are not dead supernode's backup supernodes to sync
            // data from you

            const nonBackUpSusForDeadSu = myClosestSupList.filter(
              obj => newClosestSupernodeMasterList.indexOf(obj) == -1
            );

            console.log(nonBackUpSusForDeadSu);

            if (nonBackUpSusForDeadSu.length>0) {
              const su_db_data = await localbitcoinplusplus.actions.get_sharable_db_data(
                  tableArray,
                  getFLOId
              );
              nonBackUpSusForDeadSu.map(nbs => {
                su_db_data.trader_flo_address = getFLOId;
                su_db_data.receiver_flo_address = nbs.trader_flo_address;

                RM_RPC.send_rpc
                  .call(
                    this,
                    "sync_backup_supernode_from_backup_supernode_response",
                    su_db_data
                  )
                  .then(server_sync_response =>
                    doSend(server_sync_response, nbs.trader_flo_address)
                  );
              });
            }

            break;
          }
        }

        /* ADD A CONDITION SO THAT ONLY ONE SUPERNODE IN THE LEFT CAN INFORM RIGHT BACKUP SUPERNODE OF DEAD SUPERNODE */
        const subjectFloIdClosestNodes = await localbitcoinplusplus.kademlia.determineClosestSupernode('','','', getFLOId);
        const subjectFloIdClosestNodesFloIdsFromLeft = subjectFloIdClosestNodes.map(m=>m.data.id).reverse();
        //const alowed_supernodes = subjectFloIdClosestNodes.slice(-localbitcoinplusplus.master_configurations.MaxBackups);
        //const alowed_supernodes_flo_ids = alowed_supernodes.map(m=>m.trader_flo_address);
        const my_idx = subjectFloIdClosestNodesFloIdsFromLeft.indexOf(localbitcoinplusplus.wallets.my_local_flo_address);
        //const idx = Object.keys(localbitcoinplusplus.myClosestSupernodes).indexOf(getFLOId);
        //if(alowed_supernodes_flo_ids.includes(localbitcoinplusplus.wallets.my_local_flo_address)) {
        // Get the list of "left side" Supernodes of the disconnected Supernode
        // If myIdx=0, increase its value by 1 to be used as 2nd param in slice
        let getLeftSusOfDisconnectedSu = subjectFloIdClosestNodesFloIdsFromLeft.slice(0, my_idx+1);
        if(getLeftSusOfDisconnectedSu.length<1) return;     
        console.table(getLeftSusOfDisconnectedSu);  

          let aNearerLeftSupernodeIsAlive = false;

          for (ln of getLeftSusOfDisconnectedSu) {
              const leftNodeObj = localbitcoinplusplus.myClosestSupernodes[ln];
              console.log(ln, leftNodeObj);
              if(localbitcoinplusplus.wallets.my_local_flo_address 
              === leftNodeObj.trader_flo_address) break;
              // First Check
              aNearerLeftSupernodeIsAlive=leftNodeObj.is_live||false;
              // Second check
              let conns = localbitcoinplusplus.backupWS[leftNodeObj.trader_flo_address];
              if(typeof conns === "object"
              && leftNodeObj.trader_flo_address !== getFLOId
              && conns.ws_connection.readyState==1) {
                  console.log(conns);
                  aNearerLeftSupernodeIsAlive=true;
                  break;
              }
          }

          if(!aNearerLeftSupernodeIsAlive) { 
              // If No nearer left Supernode is alive so 
              // I am the nearest LEFT SIDE Supernode
              const cs = await readDBbyIndex(
                  "myClosestSupernodes",
                  "trader_flo_address",
                  getFLOId
              );
                  
              if (cs.length < 1) return;
              const RM_WALLET = new localbitcoinplusplus.wallets;
              const msg_obj = {};
              msg_obj.protocol = '__ALL_SUPERNODES_MSG__';
              msg_obj.event = 'supernode_went_down';
              msg_obj.data = {subject_flo_id: getFLOId};
              msg_obj.initialSender = localbitcoinplusplus.wallets.my_local_flo_address;
              msg_obj.su_pubKey = localbitcoinplusplus.wallets.my_local_flo_public_key;
              msg_obj.hash = Crypto.SHA256(msg_obj);
              msg_obj.sign = RM_WALLET.sign(
                  msg_obj.hash,
                  localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
              );
              reactor.dispatchEvent("informRightSuperNode", msg_obj);
          }

        msg = `INFO: Supernode ${getFLOId} left.`;
      }

    showMessage(msg);
  
});

reactor.addEventListener("sync_primary_and_backup_db", async function() {
  if (
    localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
      localbitcoinplusplus.wallets.my_local_flo_public_key
    )
  ) {
    showMessage(
      `INFO: Syncing of latest data starting. This could take some time. Do not close the window until then.`
    );

    // Get data for deposits and withdraw starting from first (and currently alive) backup supernode
    let closestSuNodes = await readAllDB("myClosestSupernodes");

    let closestSuNodesList = closestSuNodes
      .map(m => m.trader_flo_address)
      .slice(
        1,
        localbitcoinplusplus.master_configurations.MaxBackups + 1
      );
    console.log(closestSuNodesList);

    localbitcoinplusplus.actions.sync_primary_supernode_from_backup_supernode(
      closestSuNodes[0].trader_flo_address,
      closestSuNodesList
    );

    // Update backup db as well for all supernodes you're serving as backup

    let backup_su_list = [];
    for (
      let index = closestSuNodes.length - 1;
      index >=
      closestSuNodes.length -
        localbitcoinplusplus.master_configurations.MaxBackups;
      index--
    ) {
      backup_su_list[closestSuNodes[index].trader_flo_address] = [
        closestSuNodes[index].trader_flo_address
      ];
      for (
        let j = index;
        j < index + localbitcoinplusplus.master_configurations.MaxBackups;
        j++
      ) {
        let actual_num = j;
        if (actual_num >= closestSuNodes.length - 1) {
          actual_num = j % index;
        } else {
          actual_num = j + 1;
        }
        const nextBKSu = closestSuNodes[actual_num].trader_flo_address;
        if (nextBKSu == localbitcoinplusplus.wallets.my_local_flo_address)
          continue;
        backup_su_list[closestSuNodes[index].trader_flo_address].push(
          nextBKSu
        );
      }
    }
    console.log(backup_su_list);

    for (const k in backup_su_list) {
      if (backup_su_list.hasOwnProperty(k)) {
        const bsl = backup_su_list[k];
        localbitcoinplusplus.actions.sync_backup_supernode_from_backup_supernode(
          closestSuNodes[0].trader_flo_address,
          bsl,
          k
        );
      }
    }

    // If any backup of my backup node is dead, sync its data as well
    let backup_nodes = Object.keys(backup_su_list);
    let far_left_backup_node_index = Object.values(localbitcoinplusplus.myClosestSupernodes)
      .findIndex(x => x.trader_flo_address ===backup_nodes[backup_nodes.length-1]);
    
    // Don't sync backup if far_left_backup_node_index is 0 or 1 etc
    if(far_left_backup_node_index<localbitcoinplusplus.master_configurations.MaxBackups) return false;

    let far_left_backup_node = closestSuNodes[far_left_backup_node_index].trader_flo_address;

    reactor.dispatchEvent(
      "sync_backup_nodes_of_my_backup_node",
      far_left_backup_node
    );

  }
});

reactor.addEventListener("sync_backup_nodes_of_my_backup_node", async function(subject_flo_id = "") {
    // Get backup nodes of your backup node (subject_flo_id)
    let closestNodes = await localbitcoinplusplus.kademlia.determineClosestSupernode(
      "",
      "",
      "",
      subject_flo_id
    );

    if (typeof closestNodes !== "object") return;
    let closestNodesOfMyBackupNode = closestNodes.map(m => m.data.id);
    const backupNodesOfMyBackupNode = closestNodesOfMyBackupNode.splice(
      -localbitcoinplusplus.master_configurations.MaxBackups
    );
    console.log(backupNodesOfMyBackupNode);

    backupNodesOfMyBackupNode.map(async m => {
      const getSuStatus = await readDBbyIndex(
        "myClosestSupernodes",
        "trader_flo_address",
        m
      );
      if (typeof getSuStatus[0] == "object") {
        if (getSuStatus[0].is_live !== true) {
          console.log(getSuStatus[0].trader_flo_address);
          if (
            localbitcoinplusplus.wallets.my_local_flo_address !==
            getSuStatus[0].trader_flo_address
          ) {
            localbitcoinplusplus.actions.sync_backup_supernode_from_backup_supernode(
              localbitcoinplusplus.wallets.my_local_flo_address,
              "",
              getSuStatus[0].trader_flo_address
            );
            // Since this node is dead sync its backup data as well
            reactor.dispatchEvent("sync_backup_nodes_of_my_backup_node",
                  getSuStatus[0].trader_flo_address
              );
          }
        }
      }
    });
  }
);

reactor.addEventListener("store_backup_crypto_pk_object", function(
  btc_pk_obj
) {
  readAllDB("myClosestSupernodes").then(res => {
    myNeighborNodes = res.filter(
      (k, i) => i <= localbitcoinplusplus.master_configurations.MaxBackups
    );
    myNeighborNodes.shift();
    myNeighborNodesPubKeys = myNeighborNodes.map(m =>
      localbitcoinplusplus.wallets.prototype.getSupernodePublicKeyFromFloId(
        m.trader_flo_address
      )
    );

    myNeighborNodesPubKeys.map(resp => {
      let pubk = resp[0];
      let floAddr = resp[1];

      if (
        typeof pubk == "string" &&
        localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
          pubk
        )
      ) {
        const data = localbitcoinplusplus.encrypt.encryptMessage(
          JSON.stringify(btc_pk_obj),
          pubk
        );

        const RM_RPC = new localbitcoinplusplus.rpc();
        RM_RPC.send_rpc
          .call(this, "store_backup_system_btc_reserves_private_keys", {
            data: data,
            receiver_flo_address: floAddr,
            trader_flo_address:
              localbitcoinplusplus.wallets.my_local_flo_address
          })
          .then(bar => doSend(bar, floAddr));
      }
    });
  });
});

/*Shifting a WS Connection Function*/
reactor.addEventListener("shift_ws_connection", function(wsSupsObj) {
  console.trace(wsSupsObj);  
  const getFLOId = wsSupsObj.trader_flo_address;
  if (getFLOId === localbitcoinplusplus.wallets.my_local_flo_address
  || typeof getFLOId !== "string") return;
  //const back_ws_url = `ws://${wsSupsObj.ip}:${wsSupsObj.port}`;
  const back_ws_url = `${WS}://${wsSupsObj.ip}`;

  let currenctBackupWsList = Object.keys(
    localbitcoinplusplus.backupWS
  ).filter(
    m => localbitcoinplusplus.backupWS[m].ws_connection.readyState < 2
  );

  if(currenctBackupWsList.length) {
      const reqFloIdIndex = Object.keys(localbitcoinplusplus.myClosestSupernodes).indexOf(getFLOId);
  
      // Get the highest index of connected supernodes
      let highestIndexOfConnectedSupernode = -1;
      
      for(let i=0; i<=currenctBackupWsList.length; i++) {
          if(Object.keys(localbitcoinplusplus.myClosestSupernodes).indexOf(currenctBackupWsList[i])
              >highestIndexOfConnectedSupernode) {
              highestIndexOfConnectedSupernode 
                  = Object.keys(localbitcoinplusplus.myClosestSupernodes).indexOf(currenctBackupWsList[i]);
          }
      }
      // Only if a nearer Supernode than any connected Supernode can pass through
      if(reqFloIdIndex>=highestIndexOfConnectedSupernode
      && currenctBackupWsList.length>=localbitcoinplusplus.master_configurations.MaxBackups) return;
  }

  if (
    typeof localbitcoinplusplus.backupWS[getFLOId] === "object" &&
    localbitcoinplusplus.backupWS[getFLOId].ws_connection.readyState == 1
  ) {
    // Connect to next backup
    reactor.dispatchEvent(
      "switchToBackupWSForSuperNodesOperations",
      back_ws_url
    );
  } else {
    try {
      if (
        typeof localbitcoinplusplus.backupWS[getFLOId] !== "object" ||
        localbitcoinplusplus.backupWS[getFLOId].ws_connection
          .readyState >= 2
      ) {
          if (getFLOId !== localbitcoinplusplus.wallets.my_local_flo_address) {
              localbitcoinplusplus.backupWS[getFLOId] = null;
              localbitcoinplusplus.backupWS[
                  getFLOId
              ] = new backupSupernodesWebSocketObject(back_ws_url);
              localbitcoinplusplus.backupWS[getFLOId].connectWS();
              /* Now in connectWS if connection fails call switchToBackupWSForSuperNodesOperations() in onClose() 
                  for next su node, if its success check for max baxkup connection conditon, if required
                  execute 'resolve_backup_ws_connections' in onOpen() or exit */   
          }              
      }
    } catch (error) {
      console.error(error);
    }
  }
});

/*Get the most eligible non-connected backup within max backup condition*/
reactor.addEventListener("resolve_backup_ws_connections", async function(
  evt
) {
  const usrDbObj = await readDB("localbitcoinUser", "00-01");
  let usrPubKey = usrDbObj.myLocalFLOPublicKey;

  if (
    !localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
      usrPubKey
    )
  )
    return;

  try {
    // Get list of neighbour supernodes
    const myClosestSups = await readAllDB("myClosestSupernodes");
    const myClosestSupsFloList = myClosestSups.map(
      m => m.trader_flo_address
    );
    // Get list of backup ws connection current status
    let currenctBackupWsList = Object.keys(
      localbitcoinplusplus.backupWS
    ).filter(
      m => localbitcoinplusplus.backupWS[m].ws_connection.readyState < 2
    );

    for (let z = 0; z <= myClosestSups.length - 1; z++) {
      const supsObj = myClosestSups[z];

      // Do not send your own object data
      if (
        supsObj.trader_flo_address ===
          localbitcoinplusplus.wallets.my_local_flo_address ||
        z === 0
      )
        continue;

      // Get latest ws connection status (again)
      currenctBackupWsList = Object.keys(
        localbitcoinplusplus.backupWS
      ).filter(
        m => localbitcoinplusplus.backupWS[m].ws_connection.readyState < 2
      );

      if (currenctBackupWsList.length) {
        // ws conn already present
        if (supsObj.trader_flo_address === currenctBackupWsList[z - 1])
          continue;

        // Get the highest index of connected supernodes
        let highestIndexOfConnectedSupernode = -1;
        
        for(let i=0; i<=currenctBackupWsList.length; i++) {
          if(myClosestSupsFloList.indexOf(currenctBackupWsList[i])
              >highestIndexOfConnectedSupernode) {
              highestIndexOfConnectedSupernode 
                  = myClosestSupsFloList.indexOf(currenctBackupWsList[i]);
          }
        }

        if (
          myClosestSupsFloList.indexOf(supsObj.trader_flo_address) <
          highestIndexOfConnectedSupernode
        ) {
          /* Break the loop as soon as this line runs
              as any further ws conn releated event will be 
              taken care in shift_ws_connection event itself. */
          reactor.dispatchEvent("shift_ws_connection", supsObj);
          break;
        } else {
          if (
            currenctBackupWsList.length <
            localbitcoinplusplus.master_configurations.MaxBackups
          ) {
            reactor.dispatchEvent("shift_ws_connection", supsObj);
            break;
          }
          break;
        }
      } else {
        reactor.dispatchEvent("shift_ws_connection", supsObj);
        break;
      }
    }
  } catch (error) {
    throw new Error(error);
  }
});

/*To connect to next backup of given url*/
reactor.addEventListener("switchToBackupWSForSuperNodesOperations", async function(disconnected_url = "") {
    const user_data = await readDB("localbitcoinUser", "00-01");
    const user_flo_pubKey = user_data.myLocalFLOPublicKey;
    disconnected_url = disconnected_url.replace(/\/$/, "");

    if (
      typeof user_flo_pubKey !== "string" ||
      !localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
        user_flo_pubKey
      )
    )
      return false;

    let ideal_supernode = "";

    const myClosestSupernodesArray = await readAllDB(
      `myClosestSupernodes`
    );
  
  const switchMyWS = new backupSupernodesWebSocketObject();
  let dis_floid = await switchMyWS.getFloIdFromWSUrl(disconnected_url);
  let nextClosestSupernodeElem = await getNextSupernode(dis_floid);
  console.log("nextClosestSupernodeElem", nextClosestSupernodeElem);

    if (
      typeof nextClosestSupernodeElem == "object"
      && nextClosestSupernodeElem !== null 
      && nextClosestSupernodeElem !== undefined 
      && nextClosestSupernodeElem.trader_flo_address 
          !== user_data.myLocalFLOAddress
    ) {
      reactor.dispatchEvent(
        "shift_ws_connection",
        nextClosestSupernodeElem
      );
    } else {
      console.log(nextClosestSupernodeElem);
      const err_msg = `ERROR: Failed to shift a ws connection. Looks like all supernodes are dead.`;
      showMessage(err_msg);
      throw new Error(err_msg);
    }
  });

/* Remove WS connections which are not active currently */
reactor.addEventListener("remove_extra_backup_connections", function() {
  // remove above lines with these
  readAllDB(`myClosestSupernodes`).then(sups => {
    let max_conns = 0;
    sups
      .map(backup_id => {
        if (!localbitcoinplusplus.backupWS.hasOwnProperty(backup_id)
        && backup_id.trader_flo_address !== localbitcoinplusplus.wallets.my_local_flo_address
        ) {
          const backup_conns =
            localbitcoinplusplus.backupWS[backup_id.trader_flo_address];
          if (typeof backup_conns == "object" 
          && typeof backup_conns.ws_connection == "object") {
            if (backup_conns.ws_connection.readyState < 2) {
              max_conns++;
              if (
                max_conns >
                localbitcoinplusplus.master_configurations.MaxBackups
              ) {
                localbitcoinplusplus.backupWS[
                  backup_id.trader_flo_address
                ].ws_connection.close();
                delete localbitcoinplusplus.backupWS[backup_id.trader_flo_address];
              }
            } else {
              localbitcoinplusplus.backupWS[
                backup_id.trader_flo_address
              ].ws_connection.close();
              delete localbitcoinplusplus.backupWS[backup_id.trader_flo_address];
            }
          }
        }
      });
  });
});

/*This function denotes that a user is probably live and is using the system*/
reactor.addEventListener("user_flo_keys_active", async function(FLOPublicKey="") {
  try {
      if(typeof localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY!=="string")
          throw new Error('Private key is not set.');
      const RM_WALLET = new localbitcoinplusplus.wallets;
      const userKeysObj = RM_WALLET.generateFloKeys(localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY);
      if (
          typeof userKeysObj==="object"
          && localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
              userKeysObj.pubKeyHex
          )
      ) {
          // Connect to nearest live backup nodes
          reactor.dispatchEvent("resolve_backup_ws_connections");
          // Also refresh deposited crypto balances 
          RM_WALLET.refresh_reserved_crypto_balances(
              localbitcoinplusplus.wallets.my_local_flo_address);
          // Inform left side Supernodes you are back
          const msg_obj = {};
          msg_obj.protocol = '__ALL_SUPERNODES_MSG__';
          msg_obj.event = 'supernode_came_back';
          msg_obj.data = { subject_flo_id: userKeysObj.address };
          msg_obj.initialSender = userKeysObj.address;
          msg_obj.su_pubKey = userKeysObj.pubKeyHex;
          msg_obj.hash = Crypto.SHA256(msg_obj);
          msg_obj.sign = RM_WALLET.sign(
              msg_obj.hash,
              localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
          );
          reactor.dispatchEvent("informLeftSuperNode", msg_obj,
              n = localbitcoinplusplus.master_configurations.MaxBackups);
      }
  } catch (error) {
      throw new Error(error);
  }
});

/* This function runs when a backup ws is down */  
reactor.addEventListener("backup_supernode_down", async function(evt) {
  showMessage(`Disconnected to backup Supernode sever: ${evt.srcElement.url}.`);
  const switchMyWS = new backupSupernodesWebSocketObject();
  const disconnected_su_flo_id = await switchMyWS.getFloIdFromWSUrl(evt.srcElement.url);
  switchMyWS.updateSupernodeAvailabilityStatus(
      evt.srcElement.url,
      false
  );
  if(!evt.wasClean) {
      reactor.dispatchEvent("fireNodeGoodByeEvent", disconnected_su_flo_id);
      // Request next backup server to connect
      await reactor.dispatchEvent(
          "switchToBackupWSForSuperNodesOperations",
          evt.srcElement.url
      );
  }
 });      

reactor.addEventListener("backup_supernode_up", async function(url='') {
  showMessage(
      `Connected to backup Supernode sever: ${url}.`
  );
  const switchMyWS = new backupSupernodesWebSocketObject();
  switchMyWS.updateSupernodeAvailabilityStatus(
      url,
      true
  );
  let my_local_data = await readDB("localbitcoinUser", "00-01");
  if (typeof my_local_data == "object") {
      const conn_su_flo_id = await switchMyWS.getFloIdFromWSUrl(
          url
      );

      if (
          localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
              my_local_data.myLocalFLOPublicKey
          )
      ) {
          
          // Also refresh deposited crypto balances 
          const RM_WALLET = new localbitcoinplusplus.wallets;
          RM_WALLET.refresh_reserved_crypto_balances(conn_su_flo_id);

          // If conn_su_flo_id is not an immediate backup then give your data to it to sync
          const myClosestSus = await readAllDB("myClosestSupernodes");
          const myClosestSusList = myClosestSus.map(
              m => m.trader_flo_address
          );
          // if (
          //     myClosestSusList.indexOf(conn_su_flo_id) >
          //     localbitcoinplusplus.master_configurations.MaxBackups
          // ) {
              // Ask conn_su_flo_id to ask you your DB data
              const RM_RPC = new localbitcoinplusplus.rpc();
              RM_RPC.send_rpc.call(this, "request_me_db_data", {
                  trader_flo_address:
                      localbitcoinplusplus.wallets.my_local_flo_address,
                  receiver_flo_address: conn_su_flo_id,
                  db_inst: localbitcoinplusplus.wallets.my_local_flo_address
              })
                  .then(req => doSend(req));
          //}

          // Check if the number of backup ws connections satisfy max baxkup master
          // config condition. If false, request ws connection to next backup supernode.
          const currenctBackupWsList = Object.keys(
              localbitcoinplusplus.backupWS
          ).filter(
              m =>
                  localbitcoinplusplus.backupWS[m].ws_connection
                      .readyState < 2
          );

          if (
              currenctBackupWsList.length <
              localbitcoinplusplus.master_configurations.MaxBackups
          ) {
              // Request next backup to connect
              reactor.dispatchEvent(
                  "switchToBackupWSForSuperNodesOperations",
                  url
              );
          }
      } else {
          if (typeof conn_su_flo_id == "string") {
              my_local_data.lastConnectedTime = +new Date();
              my_local_data.lastConnectedSupernode = conn_su_flo_id;
              updateinDB("localbitcoinUser", my_local_data);
          } else {
              mss = `WARNING: Failed to update current supernode connected status in localbitcoinUser.`;
              showMessage(mss);
              throw new Error(mss);
          }
      }
  }
});

reactor.addEventListener('createClosestSupernodesObject', async function (getClosestSuList = []) {

  if (typeof localbitcoinplusplus.myClosestSupernodes === "object"
      && localbitcoinplusplus.myClosestSupernodes.length ===
      localbitcoinplusplus.master_configurations.supernodesPubKeys.length)
      return;

  if (typeof localbitcoinplusplus.myClosestSupernodes === "object") return;

  const idbData = await readDB("localbitcoinUser", "00-01");

  if (getClosestSuList.length < 1) {
      getClosestSuList = await readAllDB('myClosestSupernodes');
  }

  Object.defineProperty(localbitcoinplusplus, 'myClosestSupernodes', {
      value: {},
      writable: false,
      enumerable: true,
      configurable: false
  });
  for (const m of getClosestSuList) {
      for (let k in m) {
          if (typeof localbitcoinplusplus.myClosestSupernodes[m.trader_flo_address] !== "object") {
              Object.defineProperty(localbitcoinplusplus.myClosestSupernodes, [m.trader_flo_address], {
                  value: {},
                  writable: false,
                  enumerable: true,
                  configurable: false
              });
          }
          if (k === 'is_live') {
              Object.defineProperty(localbitcoinplusplus.myClosestSupernodes[m.trader_flo_address], k, {
                  value: m[k],
                  writable: true,
                  enumerable: true,
                  configurable: false
              });

          } else {
              Object.defineProperty(localbitcoinplusplus.myClosestSupernodes[m.trader_flo_address], k, {
                  value: m[k],
                  writable: false,
                  enumerable: true,
                  configurable: false
              });
          }
      }
  }
  return localbitcoinplusplus.myClosestSupernodes;
});

reactor.addEventListener('createCashierStatusObject', async function () {

  if (typeof localbitcoinplusplus.CashierStatusObject === "object"
      && localbitcoinplusplus.CashierStatusObject.length ===
      localbitcoinplusplus.master_configurations.cashiers.length)
      return;

  if (typeof localbitcoinplusplus.CashierStatusObject === "object") return;

  const cashiers_list = JSON.parse(localbitcoinplusplus.master_configurations.cashiers);

  Object.defineProperty(localbitcoinplusplus, 'CashierStatusObject', {
      value: {},
      writable: false,
      enumerable: true,
      configurable: false
  });

  for (let cashier_pubkey in cashiers_list) {
      for (let vals in cashiers_list[cashier_pubkey]) {
          if (typeof localbitcoinplusplus.CashierStatusObject[cashier_pubkey] !== "object") {
              Object.defineProperty(localbitcoinplusplus.CashierStatusObject, [cashier_pubkey], {
                  value: {},
                  writable: false,
                  enumerable: true,
                  configurable: false
              });
          }
          if (vals === 'is_live') {
              Object.defineProperty(localbitcoinplusplus.CashierStatusObject[cashier_pubkey], vals, {
                  value: cashiers_list[cashier_pubkey][vals],
                  writable: true,
                  enumerable: true,
                  configurable: false
              });

          } else {
              Object.defineProperty(localbitcoinplusplus.CashierStatusObject[cashier_pubkey], vals, {
                  value: cashiers_list[cashier_pubkey][vals],
                  writable: false,
                  enumerable: true,
                  configurable: false
              });
          }
      }
  }
  return localbitcoinplusplus.CashierStatusObject;
});  

/* Function to notify all Supernodes of a particuat event (may or may not releated to a subject flo id) */   
reactor.addEventListener("informAllSuperNode", function(msg_obj={}) {
  if (localbitcoinplusplus.master_configurations.supernodesPubKeys
  .includes(localbitcoinplusplus.wallets.my_local_flo_public_key)) {
      let tempWS = {};
      for(let sn in localbitcoinplusplus.myClosestSupernodes) {
          (function() {
              if((sn!==localbitcoinplusplus.wallets.my_local_flo_address
              && sn!==msg_obj.subject_flo_id)
              && websocket.readyState===1) {

                  const url = `${WS}://${localbitcoinplusplus.myClosestSupernodes[sn].ip}`;
                  
                  tempWS[sn] = new WebSocket(url);
                  tempWS[sn].onopen = async function(evt) {
                      //await localbitcoinplusplus.actions.delay(5000);
                      //if (tempWS[sn].bufferedAmount == 0) {
                          tempWS[sn].send(JSON.stringify(msg_obj));
                          await localbitcoinplusplus.actions.delay(5000);
                          tempWS[sn].close();                 
                      //}
                  };
                  tempWS[sn].onclose = function(evt) {
                      console.info(`Closed ${evt.srcElement.url}`);
                      tempWS[sn] = null;
                      delete tempWS[sn];
                  };
                  tempWS[sn].onerror = function(evt) {
                      tempWS[sn].close();
                  }
              } 
          })();
      }
  }
});  

/* Send user a message */   
reactor.addEventListener("message_for_user", function(response={}) {
  
  if(!localbitcoinplusplus.master_configurations.supernodesPubKeys
  .includes(localbitcoinplusplus.wallets.my_local_flo_public_key)) return;

  const RM_RPC = new localbitcoinplusplus.rpc();
  RM_RPC.send_rpc
      .call(this, "supernode_message", {
          trader_flo_address: response.user_flo_addr,
          receiver_flo_address: response.user_flo_addr,
          server_msg: response.msg
      })
      .then(server_response => doSend(server_response));
});

async function getPrevSupernode(flo_id='') {
  try {
      let prevSupernodeObj = null;
      let allSus = await readAllDB('myClosestSupernodes');
      if(flo_id.length>0) {
          let all_flo_ids = allSus.map(m=>m.trader_flo_address);
          let idx = all_flo_ids.indexOf(flo_id);
          if(idx>=0) {
              allSus = allSus.filter((f,i)=>i<idx);
          }
      }
      for (let i = allSus.length-1; i >= 0; i--) {
          let prevSuObj = allSus[i];
          let nextSu = prevSuObj.trader_flo_address;
          if (nextSu===flo_id) continue;
          prevSupernodeObj = prevSuObj;
          break;
      }
      return prevSupernodeObj;
  } catch (error) {
      throw new Error(error);
  }
}

async function getNextSupernode(flo_id='') {
  try {
      let nextSupernodeObj = null;
      let allSus = await readAllDB('myClosestSupernodes');
      if(flo_id.length>0) {
          let all_flo_ids = allSus.map(m=>m.trader_flo_address);
          let idx = all_flo_ids.indexOf(flo_id);
          if(idx>=0) {
              allSus = allSus.filter((f,i)=>i>=idx);
          }
      }
      for (let i = 0; i < allSus.length-1; i++) {
          let nextSuObj = allSus[i+1];
          let nextSu = nextSuObj.trader_flo_address;
          if (nextSu===flo_id
          ||
          nextSu===localbitcoinplusplus.wallets.my_local_flo_address) continue;
          nextSupernodeObj = nextSuObj;
          break;
      }
      return nextSupernodeObj;
  } catch (error) {
      throw new Error(error);
  }
}

reactor.addEventListener("informRightSuperNode", async function(msg_obj={}) {
  if (localbitcoinplusplus.master_configurations.supernodesPubKeys
  .includes(localbitcoinplusplus.wallets.my_local_flo_public_key)) {
      
      let suList = await getNextSupernode();
      let sn = suList.trader_flo_address;

      if(sn===msg_obj.data.subject_flo_id || sn===localbitcoinplusplus.wallets.my_local_flo_address) {
          suList = await getNextSupernode(sn);
          sn = suList.trader_flo_address;
      }

      if(typeof sn !== "string") return;

      msg_obj.receiverFloAddress = sn;

      tempWS = {};
      //for(let sn in localbitcoinplusplus.myClosestSupernodes) {
          (function informOneSupernode(sn) {
              if(sn!==localbitcoinplusplus.wallets.my_local_flo_address
              && sn!==msg_obj.data.subject_flo_id
              && websocket.readyState===1) {

                  // Check if you already have a ws conn with sn
                  if(typeof localbitcoinplusplus.backupWS[sn]==="object"
                     && localbitcoinplusplus.backupWS[sn].ws_connection.readyState===1) {
                      localbitcoinplusplus.backupWS[sn].ws_connection
                          .send(JSON.stringify(msg_obj));
                      return;
                  }

                  // If a ws conn does not exist with sn, start a temporary conn
                  //const url = `ws://${localbitcoinplusplus.myClosestSupernodes[sn].ip}:${localbitcoinplusplus.myClosestSupernodes[sn].port}`;
                  const url = `${WS}://${localbitcoinplusplus.myClosestSupernodes[sn].ip}`;
                  
                  tempWS[sn] = new WebSocket(url);
                  tempWS[sn].onopen = async function(evt) {
                      await localbitcoinplusplus.actions.delay(5000);
                      tempWS[sn].send(JSON.stringify(msg_obj));
                      await localbitcoinplusplus.actions.delay(5000);
                      tempWS[sn].close();                 
                  };
                  tempWS[sn].onclose = async function(evt) {
                      console.info(`Closed ${evt.srcElement.url}`);
                      if(!evt.wasClean) {
                          let switchMyWS = new backupSupernodesWebSocketObject();
                          let closedFloId = await switchMyWS.getFloIdFromWSUrl(evt.srcElement.url);
                          let nxtSuObj = await getNextSupernode(closedFloId);
                          let nxtSu = nxtSuObj.trader_flo_address;
                          if(typeof nxtSu !== "string") return;
                          msg_obj.receiverFloAddress = nxtSu;
                          if ((nxtSu==localbitcoinplusplus.wallets.my_local_flo_address
                          || nxtSu==msg_obj.data.subject_flo_id)) {
                              let nxtSuObj2 = await getNextSupernode(nxtSu);
                              let nxtSu2 = nxtSuObj2.trader_flo_address;
                              if(typeof nxtSu2 !== "string") return;
                              msg_obj.receiverFloAddress = nxtSu2;
                              informOneSupernode(nxtSu2);
                          } else if(typeof nxtSu !== "undefined") {
                              informOneSupernode(nxtSu);
                          }
                      }
                  };
              } 
          })(sn);
      //}
  }
});  

reactor.addEventListener("informLeftSuperNode", async function(msg_obj={}, n=0) {
  const pubkey = localbitcoinplusplus.wallets.my_local_flo_public_key|| msg_obj.su_pubKey;
  const usrAddr = localbitcoinplusplus.wallets.my_local_flo_address || bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(pubkey);
  if (localbitcoinplusplus.master_configurations.supernodesPubKeys
  .includes(pubkey)) {
      let m = localbitcoinplusplus.master_configurations.MaxBackups;
      let successfully_informed=0;
      if(n>0) m=n;
      let suList = await getPrevSupernode();
      let sn = suList.trader_flo_address;

      if(sn===msg_obj.data.subject_flo_id || sn===usrAddr) {
          suList = await getPrevSupernode(sn);
          if(suList==null) return false;
          sn = suList.trader_flo_address;
      }

      if(typeof sn !== "string") return;

      msg_obj.receiverFloAddress = sn;

      tempWSL = {};
      //for(let sn in localbitcoinplusplus.myClosestSupernodes) {
          (function informOneSupernode(sn) {
              if(sn!==usrAddr
              && sn!==msg_obj.data.subject_flo_id
              && websocket.readyState===1) {
                  const switchMyWS = new backupSupernodesWebSocketObject();
                  //const url = `ws://${localbitcoinplusplus.myClosestSupernodes[sn].ip}:${localbitcoinplusplus.myClosestSupernodes[sn].port}`;
                  const url = `${WS}://${localbitcoinplusplus.myClosestSupernodes[sn].ip}`;
                  
                  tempWSL[sn] = new WebSocket(url);
                  tempWSL[sn].onopen = async function(evt) {
                      await localbitcoinplusplus.actions.delay(5000);
                      tempWSL[sn].send(JSON.stringify(msg_obj));
                      successfully_informed++;
                      console.info("successfully_informed:", successfully_informed);
                      await localbitcoinplusplus.actions.delay(5000);
                      tempWSL[sn].close();
                      if(successfully_informed<m) {
                          let openedFloId = await switchMyWS.getFloIdFromWSUrl(evt.srcElement.url);
                          let nxtSup = await getPrevSupernode(openedFloId);
                          if(typeof nxtSup.trader_flo_address !== "string") return;
                          msg_obj.receiverFloAddress = nxtSup.trader_flo_address;
                          informOneSupernode(nxtSup.trader_flo_address);
                      } else return;
                  };
                  tempWSL[sn].onclose = async function(evt) {
                      console.info(`Closed ${evt.srcElement.url}`);
                      if(!evt.wasClean) {
                          let closedFloId = await switchMyWS.getFloIdFromWSUrl(evt.srcElement.url);
                          let nxtSu = await getPrevSupernode(closedFloId);
                          if(typeof nxtSu.trader_flo_address !== "string") return;
                          msg_obj.receiverFloAddress = nxtSu.trader_flo_address;
                          if ((nxtSu.trader_flo_address==usrAddr
                          || nxtSu.trader_flo_address==msg_obj.data.subject_flo_id)) {
                              let nxtSu2 = await getPrevSupernode(nxtSu.trader_flo_address);
                              if(typeof nxtSu2.trader_flo_address !== "string") return;
                              msg_obj.receiverFloAddress = nxtSu2.trader_flo_address;
                              informOneSupernode(nxtSu2.trader_flo_address);
                          } else if(typeof nxtSu !== "undefined") {
                              informOneSupernode(nxtSu.trader_flo_address);
                          }
                      }
                  };
              } 
          })(sn);
  }
});

reactor.addEventListener("remove_temp_data_from_db", async function() {
   
   let backup_db = null;
   let _readAllDB = readAllDB;
   let _removeinDB = removeinDB;

    const promises = [];
    const datastores = ['buyOrders', 'sellOrders', 'cash_deposits', 'deposit',
    'withdraw_btc', 'withdraw_cash'];
    const timenow = + new Date();
    const lifetime = JSON.parse(localbitcoinplusplus.master_configurations.ordersLife);

    for (let backup_db in localbitcoinplusplus.myClosestSupernodes) {
      if (typeof backup_db == "string" && backup_db.length > 0) {
          if (
          typeof localbitcoinplusplus.newBackupDatabase.db[backup_db] ==
          "object"
          ) {
          let foreign_db =
              localbitcoinplusplus.newBackupDatabase.db[backup_db];
              _readAllDB = foreign_db.backup_readAllDB.bind(foreign_db);
              _removeinDB = foreign_db.backup_removeinDB.bind(foreign_db);
          } else {
              if(backup_db!==localbitcoinplusplus.wallets.my_local_flo_address) {
                  console.error(`WARNING: Invalid Backup DB Instance Id: ${backup_db}.`);
                  continue;
              }
          }
          for (const ds of datastores) {
              switch (ds) {
                  case "buyOrders":
                      let buyOrdersData = await _readAllDB(ds);
                      for (const dbData of buyOrdersData) {
                          if(timenow-dbData.timestamp>=lifetime.trade) {
                              promises.push(_removeinDB(ds, dbData.id));
                          } 
                      }
                      break;
                  case "sellOrders":
                  let sellOrdersData = await _readAllDB(ds);
                      for (const dbData of sellOrdersData) {
                          if(timenow-dbData.timestamp>=lifetime.trade) {
                              promises.push(_removeinDB(ds, dbData.id));
                          } 
                      }
                      break;
                  case "cash_deposits":
                  let cash_depositsData = await _readAllDB(ds);
                      for (const dbData of cash_depositsData) {
                          if(timenow-dbData.timestamp>=lifetime.cashDeposit) {
                              promises.push(_removeinDB(ds, dbData.id));
                          } 
                      }
                      break;
                  case "deposit":
                      reactor.dispatchEvent("remove_redundant_crypto_deposits");
                      break;
                  case "withdraw_btc":
                      let withdraw_btcData = await _readAllDB(ds);
                      for (const dbData of withdraw_btcData) {
                          if(timenow-dbData.timestamp>=lifetime.cryptoWithdraw) {
                              promises.push(_removeinDB(ds, dbData.id));
                          } 
                      }
                      break;
                  case "withdraw_cash":
                      let withdraw_cashData = await _readAllDB(ds);
                      for (const dbData of withdraw_cashData) {
                          if(timenow-dbData.timestamp>=lifetime.cashWithdraw) {
                              promises.push(_removeinDB(ds, dbData.id));
                          } 
                      }
                      break;
                  default: 
                      break;
                  
              }
          }
      }
    }

    console.log(promises);
    promises_res = await Promise.all(promises);
    console.log(promises_res);
    localStorage.setItem(`timestamp_for_last_deletion_of_db_stale_data`, timenow);
    console.info('Updated reserved crypto prices.');
    return true;
 });

reactor.addEventListener("remove_redundant_crypto_deposits", async function(deposit_list=[]) {
  try {
      if(deposit_list.length==0) 
          deposit_list = await readAllDB("deposit");
      if (
          typeof deposit_list == "object" &&
          deposit_list.length > 0
      ) {
          
          for (const dl in deposit_list) {
          if (deposit_list.hasOwnProperty(dl)) {
              const deposit_dl = deposit_list[dl];
              if((
                  typeof deposit_dl.btc_address == "string" &&
                  localbitcoinplusplus.master_configurations.tradableAsset1.includes(
                      deposit_dl.product
                  )
              )) {
                  let blockchain_explorer;
                  let crypto_type = deposit_dl.product;
                  if (crypto_type == "BTC") {
                      blockchain_explorer = localbitcoinplusplus.server.btc_mainnet;
                  } else if (crypto_type == "BTC_TEST") {
                      blockchain_explorer = localbitcoinplusplus.server.btc_testnet;
                  } else if (crypto_type == "FLO") {
                      blockchain_explorer = localbitcoinplusplus.server.flo_mainnet;
                  } else if (crypto_type == "FLO_TEST") {
                      blockchain_explorer = localbitcoinplusplus.server.flo_testnet;
                  }
                  const orderslife = JSON.parse(localbitcoinplusplus.master_configurations.ordersLife)
                  let timenow = + new Date();
                  let url = `${blockchain_explorer}/api/addr/${deposit_dl.btc_address}/utxo`;
                  let deposited_crypto_balance_req = await helper_functions.ajaxGet(url);

                  if(typeof deposited_crypto_balance_req == "undefined"
                  || timenow-deposit_dl.timestamp<orderslife.cryptoDeposit) continue;
                  
                  if(typeof deposited_crypto_balance_req =="object" 
                  && deposited_crypto_balance_req.length>0
                  && deposited_crypto_balance_req[0].amount>0
                  ) continue;
           
                  const res = await readDBbyIndex(
                      "system_btc_reserves_private_keys",
                      "btc_address",
                      deposit_dl.btc_address
                  );
                  if(typeof res[0]!=="object" || typeof res[0].id!=="string") {
                      removeinDB("deposit", deposit_dl.id);
                      continue;
                  }
                  let retrieve_pvtkey_req_id = res[0].id;
                  const RM_RPC = new localbitcoinplusplus.rpc;
                  for (const bpks of res[0].btc_private_key_shamirs_id) {
                      RM_RPC.send_rpc
                      .call(
                          this,
                          "delete_shamirs_secret_btc_pvtkey",
                          {
                              retrieve_pvtkey_req_id: retrieve_pvtkey_req_id,
                              chunk_val: bpks,
                              db_inst: localbitcoinplusplus.wallets.my_local_flo_address
                          }
                      )
                      .then(retrieve_pvtkey_req =>
                          doSend(retrieve_pvtkey_req)
                      );   
                  }

                  removeinDB("deposit", deposit_dl.id);
                  removeinDB("system_btc_reserves_private_keys", retrieve_pvtkey_req_id);

                  RM_RPC.send_rpc(
                      "delete_deposited_crypto_instance",
                      {
                          db_inst: localbitcoinplusplus.wallets.my_local_flo_address,
                          deposit_id: deposit_dl.id,
                          reserves_id: retrieve_pvtkey_req_id,
                          trader_flo_address:
                          localbitcoinplusplus.wallets.my_local_flo_address
                      }
                  ).then(delRequestObject =>
                      doSend(delRequestObject)
                  );

              }
          }
          }
      }
  } catch (error) {
      throw new Error(error)
  }
});

</script>

<!-- Misc functions -->
<script>
function removeWhiteSpaces(text='') {
  return text.replace(/\s/g,'');
}  
// log event in the console
function LogEvent(msg) {
  log.textContent += "> " + msg + "\n";
  var ot = log.scrollHeight - log.clientHeight;
  if (ot > 0) log.scrollTop = ot;
}

function showMessage(msg = "", t = 10000) {
  if (msg.length > 0) LogEvent(msg);
  console.trace(msg);
  setTimeout(function() {
    closeMessage();
    clearTimeout();
  }, t);
}

function rand(a, b, multiple) {
  return Math.floor(Math.random(a, b) * multiple);
}

function quarantineCoronaElements(str = '') {
  try {
      patt = /^[ A-Za-z0-9_@#!./{}\[\]""`',:+-\\]*$/
      let no_unwanted_chars = patt.test(str);
      let hasHtml = hasHTMLTags(str);
      let has_text_script = str.search('script');
      let has_text_eval = str.search('eval');
      let has_text_alert = str.search('alert');

      if (no_unwanted_chars === true
          && hasHtml === -1
          && has_text_script === -1
          && has_text_eval === -1
          && has_text_alert === -1) {
          // secure request
          str = DOMPurify.sanitize(str);
          var sanitized_str = cloneForSanitization(str);
          return sanitized_str;
      } else return true;

  } catch (error) {
      throw new Error(error)
  }
}

function hasHTMLTags(str) {
  if ((str === null) || (str === ''))
      return false;
  else
      str = str.toString();
  return str.search(/(<([^>]+)>)/ig, '');
}

// https://www.tutorialspoint.com/how-to-remove-html-tags-from-a-string-in-javascript
function replaceHTMLTags(str) {
  if ((str === null) || (str === ''))
      return false;
  else
      str = str.toString();
  return str.replace(/(<([^>]+)>)/ig, '');
}
          
/*https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze*/
function deepFreeze(object) {
  // Retrieve the property names defined on object
  var propNames = Object.getOwnPropertyNames(object);

  // Freeze properties before freezing self
  for (let name of propNames) {
    let value = object[name];

    object[name] =
      value && typeof value === "object" ? deepFreeze(value) : value;
  }
  return Object.freeze(object);
}

function randomNoRepeats(array) {
  var copy = array.slice(0);
  return function() {
    if (copy.length < 1) {
      copy = array.slice(0);
    }
    var index = Math.floor(Math.random() * copy.length);
    var item = copy[index];
    copy.splice(index, 1);
    return item;
  };
}

function duplicatesInArray(arr) {
  arr.reduce(function(acc, el, i, arr) {
    if (arr.indexOf(el) !== i && acc.indexOf(el) < 0) acc.push(el);
    return acc;
  }, []);
}
</script>

<!-- Wallet Operations (Generate, Sign and Verify) -->
<script>
var wallets = (localbitcoinplusplus.wallets = function(wallets) {});

const MY_PRIVATE_KEY_SHAMIRS_SHARES = (localbitcoinplusplus.wallets.private_key_shamirs_secrets_shares = []);

wallets.prototype = {
  ecparams: EllipticCurve.getSECCurveByName("secp256k1"),
  generateFloKeys: function(pk, crypto = localbitcoinplusplus.BASE_BLOCKCHAIN) {
    if (crypto == "BTC") {
      privKeyPrefix = 0x80; //mainnet 0x80, testnet: 0xEF
      networkVersion = 0x00; //mainnet 0x23, testnet: 0x6F
    } else if (crypto == "BTC_TEST") {
      privKeyPrefix = 0xef;
      networkVersion = 0x6f;
    } else if (crypto == "FLO") {
      privKeyPrefix = 0xa3; //mainnet 0xa3, testnet: 0xef
      networkVersion = 0x23; //mainnet 0x23, testnet: 0x73
    } else if (crypto == "FLO_TEST") {
      privKeyPrefix = 0xef;
      networkVersion = 0x73;
    } else {
      privKeyPrefix = 0xef;
      networkVersion = 0x73;
    }

    var privateKey =
      pk ||
      Bitcoin.ECDSA.getBigRandom(
        EllipticCurve.getSECCurveByName("secp256k1").getN()
      );
    // changesMadeByAbhishek: Change private key prefix before initing key
    Bitcoin.ECKey.privateKeyPrefix = privKeyPrefix;
    Bitcoin.ECKey.currentBlockchain = crypto;
    var key = new Bitcoin.ECKey(privateKey);

    if(key.compressed!==true) key.setCompressed(true);
    
    var privateKeyHex = key.getBitcoinHexFormat();
    var privateKeyWIF = key.getBitcoinWalletImportFormat();

    var publicKeyHex = localbitcoinplusplus.publicKey
      .getHexFromByteArray(key.getPubPoint().getEncoded(1))
      .toString()
      .toUpperCase();

    var pubKeyHash = key.getPubKeyHash();
    var pubKeyHex = key.getPubKeyHex();
    var address = key.getBitcoinAddress(networkVersion);

    return {
      privateKeyWIF,
      pubKeyHex,
      address
    };
  },
  sign: function(msg, privateKeyHex, crypto = localbitcoinplusplus.BASE_BLOCKCHAIN) {
    if (crypto == "BTC") {
      privKeyPrefix = 0x80; //mainnet 0x80, testnet: 0xEF
      networkVersion = 0x00; //mainnet 0x23, testnet: 0x6F
    } else if (crypto == "BTC_TEST") {
      privKeyPrefix = 0xef;
      networkVersion = 0x6f;
    } else if (crypto == "FLO") {
      privKeyPrefix = 0xa3; //mainnet 0xa3, testnet: 0xef
      networkVersion = 0x23; //mainnet 0x23, testnet: 0x73
    } else if (crypto == "FLO_TEST") {
      privKeyPrefix = 0xef;
      networkVersion = 0x73;
    } else {
      privKeyPrefix = 0xa3;
      networkVersion = 0x23;
    }

    Bitcoin.ECKey.privateKeyPrefix = privKeyPrefix;

    var key = new Bitcoin.ECKey(privateKeyHex);
    if(key.compressed!==true) key.setCompressed(true);

    var privateKeyArr = key.getBitcoinPrivateKeyByteArray(privateKeyHex);
    privateKey = BigInteger.fromByteArrayUnsigned(privateKeyArr);

    var messageHash = Crypto.SHA256(msg);

    var messageHashBigInteger = new BigInteger(messageHash);

    var messageSign = Bitcoin.ECDSA.sign(
      messageHashBigInteger,
      privateKey
    );

    var sighex = Crypto.util.bytesToHex(messageSign);
    return sighex;
  },
  verify: function(msg, signatureHex, publicKeyHex) {
    var msgHash = Crypto.SHA256(msg);
    var messageHashBigInteger = new BigInteger(msgHash);

    var sigBytes = Crypto.util.hexToBytes(signatureHex);
    var signature = Bitcoin.ECDSA.parseSig(sigBytes);

    var publicKeyPoint = this.ecparams
      .getCurve()
      .decodePointHex(publicKeyHex);

    var verify = Bitcoin.ECDSA.verifyRaw(
      messageHashBigInteger,
      signature.r,
      signature.s,
      publicKeyPoint
    );
    return verify;
  },
  createShamirsSecretShares: function(
    str,
    total_shares,
    threshold_limit
  ) {
    if (str.length > 0) {
      // convert the text into a hex string
      var strHex = secrets.str2hex(str);
      // split into total_shares shares, with a threshold of threshold_limit
      var shares = secrets.share(strHex, total_shares, threshold_limit);
      return shares;
    }
    return false;
  },
  verifyShamirsSecret: function(sharesArray, str) {
    // combine sharesArray:
    var comb = secrets.combine(sharesArray);
    //convert back to UTF string:
    comb = secrets.hex2str(comb);
    return comb === str;
  },
  retrieveShamirSecret: function(sharesArray) {
    if (sharesArray.length > 0) {
      // combine sharesArray:
      var comb = secrets.combine(
        sharesArray.slice(0, sharesArray.length)
      );
      //convert back to UTF string:
      comb = secrets.hex2str(comb);
      return comb;
    }
    return false;
  },
  manually_assign_my_private_key: function() {
      return new Promise((resolve, reject)=>{
          document.querySelector('main').classList.add('hide-completely')
          notify('Please provide your FLO private key to Sign in.');
          showPopup('sign_in_popup', 'no');
          const signInBtn = document.getElementById('signInBtn');
          signInBtn.onclick = function() {
          const RM_WALLET = new localbitcoinplusplus.wallets();
          const pk_manual = document.getElementById('get_priv_key_field').value;
          let gen_new_keys = RM_WALLET.generateFloKeys(pk_manual);
          
              Object.defineProperty(
                  localbitcoinplusplus.wallets,
                  "MY_SUPERNODE_PRIVATE_KEY",
                  {
                      value: gen_new_keys.privateKeyWIF,
                      writable: false,
                      configurable: false,
                      enumerable: false
                  }
              );
              Object.defineProperty(
                  localbitcoinplusplus.wallets,
                  "my_local_flo_address",
                  {
                      value: gen_new_keys.address,
                      writable: false,
                      configurable: false,
                      enumerable: false
                  }
              );
              Object.defineProperty(
                  localbitcoinplusplus.wallets,
                  "my_local_flo_public_key",
                  {
                      value: gen_new_keys.pubKeyHex,
                      writable: false,
                      configurable: false,
                      enumerable: false
                  }
              );

              notify('Signed in successfully.')
              document.querySelector('main').classList.remove('hide-completely')
              hidePopup();
              if (localbitcoinplusplus.is_ui_loaded == false) {
                  dataBaseUIOperations();
                  showPopup('main_loader', 'no')
              }

              // Private key is built. Now execute private key dependent functions
              const pubkey = gen_new_keys.pubKeyHex;
              if (localbitcoinplusplus.master_configurations.supernodesPubKeys
                  .includes(pubkey)) {
                  reactor.dispatchEvent("user_flo_keys_active", pubkey);
              }

              return resolve(gen_new_keys.privateKeyWIF);
          }
      });
    
  },
  rebuild_my_private_key: function(transactionKey) {
    const RM_WALLET = new localbitcoinplusplus.wallets();
    let my_pvt_key = RM_WALLET.rebuild_private_key(
      MY_PRIVATE_KEY_SHAMIRS_SHARES,
      transactionKey
    );

    if (typeof my_pvt_key == "undefined")
      return this.manually_assign_my_private_key();

    Object.defineProperty(
      localbitcoinplusplus.wallets,
      "MY_SUPERNODE_PRIVATE_KEY",
      {
        value: my_pvt_key,
        writable: false,
        configurable: false,
        enumerable: false
      }
    );

    let gen_new_keys = RM_WALLET
          .generateFloKeys(localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY)

    Object.defineProperty(
      localbitcoinplusplus.wallets,
      "my_local_flo_address",
      {
          value: gen_new_keys.address,
          writable: false,
          configurable: false,
          enumerable: false
      });
    Object.defineProperty(
      localbitcoinplusplus.wallets,
      "my_local_flo_public_key",
      {
          value: gen_new_keys.pubKeyHex,
          writable: false,
          configurable: false,
          enumerable: false
      });

     // Private key is built. Now execute private key dependent functions
      if(localbitcoinplusplus.master_configurations.supernodesPubKeys
        .includes(localbitcoinplusplus.wallets.my_local_flo_public_key)) {
          reactor.dispatchEvent("user_flo_keys_active", localbitcoinplusplus.wallets.my_local_flo_public_key);
      }
  },
  rebuild_private_key: function(
    private_key_shamirs_shares,
    transactionKey
  ) {
    let decoded_shares = private_key_shamirs_shares.map(
      encryptedShares => {
        return Crypto.AES.decrypt(encryptedShares, transactionKey);
      }
    );
    let my_pvt_key = this.retrieveShamirSecret(decoded_shares);
    return my_pvt_key;
  },
  getUserPublicKey: function(flo_address, callback) {
    readDB("userPublicData", flo_address).then(function(res) {
      if (
        typeof res == "object" &&
        typeof res.trader_flo_pubKey == "string"
      ) {
        return callback(res.trader_flo_pubKey);
      } else {
        return callback();
      }
    });
  },
  getSuperNodePublicKey: async function(user_flo_address) {
    try {
      let getUserData = await readDB("userPublicData", user_flo_address);
      if (typeof getUserData == "object")
        return getUserData.supernode_flo_public_key;
      return false;
    } catch (error) {
      return false;
    }
  },
  wifToDecimal(pk_wif, isPubKeyCompressed = false) {
    let pk = Bitcoin.Base58.decode(pk_wif);
    pk.shift();
    pk.splice(-4, 4);
    //If the private key corresponded to a compressed public key, also drop the last byte (it should be 0x01).
    if (isPubKeyCompressed == true) pk.pop();
    pk.unshift(0);
    privateKeyDecimal = BigInteger(pk).toString();
    privateKeyHex = Crypto.util.bytesToHex(pk);
    return {
      privateKeyDecimal: privateKeyDecimal,
      privateKeyHex: privateKeyHex
    };
  },
  distributeShamirsSecretShares: function(users_entered_private_key) {
    if (users_entered_private_key.length < 0)
      throw new Error("Private key is empty.");

    const RM_WALLET = new localbitcoinplusplus.wallets();
    let publicKey_for_users_entered_private_key;
    try {
      publicKey_for_users_entered_private_key = RM_WALLET.generateFloKeys(
        users_entered_private_key
      ).pubKeyHex;
    } catch (error) {
      throw new Error(error);
    }

    let pvt_key_shamirs_secret_shares = RM_WALLET.createShamirsSecretShares(
      users_entered_private_key,
      10,
      5
    );
    if (
      typeof pvt_key_shamirs_secret_shares == "object" &&
      pvt_key_shamirs_secret_shares.length > 0
    ) {
      // Add suprnode's own private keys to DB
      let supernode_transaction_key = Crypto.util.randomBytes(64);
      let pvt_key_shamirs_secret_shares_array = pvt_key_shamirs_secret_shares.map(
        chunks => {
          let chunk_ids = Crypto.util.bytesToHex(
            Crypto.util.randomBytes(64)
          );
          let chunk_array = {
            id: chunk_ids,
            privateKeyChunks: Crypto.AES.encrypt(
              chunks,
              supernode_transaction_key
            )
          };
          try {
            addDB("my_supernode_private_key_chunks", {
              id: chunk_ids,
              supernode_transaction_key: supernode_transaction_key
            });
          } catch (error) {
            throw new Error(error);
          }
          return chunk_array;
        }
      );

      // Send chunks of private keys to other supernodes
      pvt_key_shamirs_secret_shares_array.map(shares => {
        const RM_RPC = new localbitcoinplusplus.rpc();
        RM_RPC.send_rpc
          .call(this, "store_shamirs_secret_pvtkey_shares", shares)
          .then(store_pvtkey_req => doSend(store_pvtkey_req));
      });

      return Promise.resolve(true);
    }
  },
  getSupernodePublicKeyFromFloId: function(flo_id = "") {
    let su_arr = localbitcoinplusplus.master_configurations.supernodesPubKeys
      .map(s => [s, bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(s)])
      .filter(f => f[1] == flo_id);

    return su_arr[0];
  },
  refresh_reserved_crypto_balances:async (user_flo_addr='', deposited_btc_array={})=> {
      try {
          const getSupernode = await localbitcoinplusplus.kademlia.determineClosestSupernode(user_flo_addr);
          const getSupernodeAddr = getSupernode[0].data.id;
          let backup_db = null;
          let _readAllDB = readAllDB;
          let _updateinDB = updateinDB;
          let _readDBbyIndex = readDBbyIndex;

          if(getSupernodeAddr!==localbitcoinplusplus.wallets.my_local_flo_address) {
              backup_db = getSupernodeAddr;
          }
          if (typeof backup_db == "string" && backup_db.length > 0) {
              if (
              typeof localbitcoinplusplus.newBackupDatabase.db[backup_db] ==
              "object"
              ) {
              const foreign_db =
                  localbitcoinplusplus.newBackupDatabase.db[backup_db];
                  _readAllDB = foreign_db.backup_readAllDB.bind(foreign_db);
                  _updateinDB = foreign_db.backup_updateinDB.bind(foreign_db);
                  _readDBbyIndex = foreign_db.backup_readDBbyIndex.bind(foreign_db);
              } else {
                  if(backup_db!==localbitcoinplusplus.wallets.my_local_flo_address) {
                      err_msg = `WARNING: Invalid Backup DB Instance Id: ${backup_db}.`;
                      showMessage(err_msg);
                      throw new Error(err_msg);
                  }
              }
          }

          let get_crypto_deposits = [];
          if(Object.values(deposited_btc_array).length<=0) {
              get_crypto_deposits = await _readAllDB('deposit');
          } else {
              for (const thisdeposit of Object.values(deposited_btc_array)) {
                  let depo_obj = await _readDBbyIndex('deposit', 'btc_address', thisdeposit);
                  if(typeof depo_obj[0].btc_address !== "string") continue;
                  get_crypto_deposits.push(depo_obj[0]); 
              }
          }

          let deposit_promises = [];

          for (const crypto_deposits of get_crypto_deposits) {
              let crypto_address = crypto_deposits.btc_address;
              let explorer;
              let decimal = 100000000;
              let crypto_diff = localbitcoinplusplus.master_configurations.btcTradeMargin;
              switch (crypto_deposits.product) {
                  case "BTC":
                      explorer = localbitcoinplusplus.server.btc_mainnet;
                      break;
                  case "BTC_TEST":
                      explorer = localbitcoinplusplus.server.btc_testnet;
                      break;
                  case "FLO":
                      explorer = localbitcoinplusplus.server.flo_mainnet;
                      decimal = 1;
                      crypto_diff = crypto_diff/decimal;
                      break;
                  case "FLO_TEST":
                      explorer = localbitcoinplusplus.server.flo_testnet;
                      decimal = 1;
                      crypto_diff = crypto_diff/decimal;
                      break;
                  default:
                      break;
              }

              let url = `${explorer}/api/addr/${crypto_address}/balance`;
              console.log(url);
              let balance = await helper_functions.ajaxGet(url);
              if (!isNaN(balance) && parseFloat(balance) >= 0) {
                  balance = helper_functions.truncateDecimals(balance / decimal);
                  console.log(balance);
                  crypto_deposits.bitcoinToBePaid = balance;
                  
                  if(crypto_deposits.status!==1) {
                      // Do not update status for status=1
                      crypto_deposits.status = 2;
                  }
                  deposit_promises.push(_updateinDB('deposit', crypto_deposits))
                  
              } else {
                  console.warn("Failed to update balance of "+crypto_address);
              }

          }

          Promise.all(deposit_promises).then(res=>{
              console.log(res);
              let timenow = + new Date();
              localStorage.setItem(`refresh_reserved_cryptos_prices_time_${getSupernodeAddr}`, timenow);
              console.info('Updated deposited crypto prices.');
              return res;
          })
          .catch(e=>console.warn("Failed to update deposited crypto balances"));
          
      } catch (error) {
          throw new Error(error)
      }
  },
};
</script>

<!-- RPC Object -->
<script>
var Rpc = (localbitcoinplusplus.rpc = function() {
  this.rpc_req_id;
  this.valid_job = ["trade_buy", "trade_sell", "sync"];
});
Rpc.prototype = {
  send_rpc(method, ...params) {
    return new Promise((resolve, reject) => {
      var request = new JSON_RPC.Request(method, params);
      var id = request.id;
      this.rpc_req_id = id;

      (async function(request) {
        /***************************FOR CASHIERS OPERATIONS****************************************/
        if (
          typeof params[0].cashier_pubKey == "string" 
          && params[0].for_cashier === true
          && Object.keys(
            JSON.parse(
              localbitcoinplusplus.master_configurations.cashiers
            )
          ).includes(params[0].cashier_pubKey)
        ) {
          request.globalParams.senderFloId =
            localbitcoinplusplus.wallets.my_local_flo_address;
          request.globalParams.receiverFloId =
            params[0].receiver_flo_address;
          request.globalParams.rpc_protocol = "__FOR__CASHIER__";
          return resolve(request.toString());
        }
        /********************************************************************************************/

        const all_receivers_methods = [
          "do_you_have_latest_data_for_this_supernode",
          "sync_backup_supernode_from_backup_supernode",
          "sync_backup_supernode_from_backup_supernode_response",
          "refresh_all_supernodes_status"
        ];

        if (
          typeof localbitcoinplusplus.wallets.my_local_flo_address ==
          "string"
        ) {
          request.globalParams.senderFloId =
            localbitcoinplusplus.wallets.my_local_flo_address;

          const mySupernodeObj = await localbitcoinplusplus.kademlia.determineClosestSupernode(
            localbitcoinplusplus.wallets.my_local_flo_address
          );

          request.globalParams.primarySupernode =
            mySupernodeObj[0].data.id;

          if (
            localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
              localbitcoinplusplus.wallets.my_local_flo_public_key
            )
          ) {
            //const my_closest_su = await localbitcoinplusplus.kademlia
            //.determineClosestSupernode('', '', supernodeKBucket, localbitcoinplusplus.wallets.my_local_flo_address);

            const my_closest_su = await readAllDB("myClosestSupernodes");

            if (typeof my_closest_su == "object") {
              if (!all_receivers_methods.includes(method)) {
                request.globalParams["receiversList"] = [];
                let live_nodes = 0;
                for (let j = 1; j <= my_closest_su.length - 1; j++) {
                  if (
                    typeof my_closest_su[j].trader_flo_address !==
                    "string"
                  )
                    continue;
                  if (my_closest_su[j].is_live == true) {
                    live_nodes++;
                  }
                  request.globalParams.receiversList.push(
                    my_closest_su[j].trader_flo_address
                  );
                  /* If a closestNode is dead include it but also include an extra node 
                                         (preferrably live) after him. Idea is that message should reach 
                                         closest 'live' supernode. */
                  if (
                    live_nodes ==
                    localbitcoinplusplus.master_configurations.MaxBackups
                  )
                    break;
                }
              }
            }
          } else {
            if (!all_receivers_methods.includes(method)) {
              request.globalParams["receiversList"] = [];
              request.globalParams.receiversList.push(
                localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS
              );
            }
          }
        } else {
          const resObj = await readDB("localbitcoinUser", "00-01");
          if (
            typeof resObj !== "object" ||
            typeof resObj.myLocalFLOAddress !== "string"
          )
            return;
          request.globalParams.senderFloId = resObj.myLocalFLOAddress;

          const mySupernodeObj = await localbitcoinplusplus.kademlia.determineClosestSupernode(
            resObj.myLocalFLOAddress
          );

          request.globalParams.primarySupernode =
            mySupernodeObj[0].data.id;

          if (
            localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
              resObj.myLocalFLOPublicKey
            )
          ) {
            //const my_closest_su = await localbitcoinplusplus.kademlia
            //.determineClosestSupernode('', '', supernodeKBucket, resObj.myLocalFLOAddress);
            const my_closest_su = await readAllDB("myClosestSupernodes");

            if (typeof my_closest_su == "object") {
              if (!all_receivers_methods.includes(method)) {
                request.globalParams["receiversList"] = [];
                let live_nodes = 0;
                for (let j = 1; j <= my_closest_su.length - 1; j++) {
                  if (
                    typeof my_closest_su[j].trader_flo_address !==
                    "string"
                  )
                    continue;
                  if (my_closest_su[j].is_live == true) {
                    live_nodes++;
                  }
                  request.globalParams.receiversList.push(
                    my_closest_su[j].trader_flo_address
                  );
                  /* If a closestNode is dead include it but also include an extra node 
                                         (preferrably live) after him. Idea is that message should reach 
                                         closest 'live' supernode. */
                  if (
                    live_nodes ==
                    localbitcoinplusplus.master_configurations.MaxBackups
                  )
                    break;
                }
              }
            }
          } else {
            if (!all_receivers_methods.includes(method)) {
              request.globalParams["receiversList"] = [];
              request.globalParams.receiversList.push(
                localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS
              );
            }
          }
        }

        if (typeof params[0].receiver_flo_address == "string") {
          //request.globalParams.receiverFloId = params[0].receiver_flo_address;
          if (typeof request.globalParams.receiversList == "object") {
            if (typeof request.globalParams["receiversList"] !== "object")
              request.globalParams["receiversList"] = [];
            if (
              !request.globalParams.receiversList.includes(
                params[0].receiver_flo_address
              )
            ) {
              request.globalParams.receiversList.push(
                params[0].receiver_flo_address
              );
            }
          }
        }

        return resolve(request.toString());
      })(request);
    });
  },

  filter_legit_requests: function(flo_id = null, callback) {
    if (
      typeof localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY ===
        "string" &&
      localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY.length > 0
    ) {
      const RM_WALLET = new localbitcoinplusplus.wallets();
      let user_keys = RM_WALLET.generateFloKeys(
        localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
      );
      if (
        typeof user_keys == "object" &&
        typeof user_keys.pubKeyHex == "string"
      ) {
        if (
          localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
            user_keys.pubKeyHex
          )
        ) {
          if (typeof flo_id !== null || typeof flo_id !== "undefined") {
            localbitcoinplusplus.kademlia
              .determineClosestSupernode(flo_id)
              .then(my_closest_su => {
                if (user_keys.address === my_closest_su[0].data.id) {
                  return callback(true);
                } else {
                  let su_arr = my_closest_su.map(m => m.data.id);
                  if (su_arr.includes(flo_id)) {
                    return callback(true);
                  } else {
                    return callback(false);
                  }
                }
              });
          } else {
            return callback(false);
          }
        }
      }
    } else {
      return callback(false);
    }
  },
  filter_legit_backup_requests: function(flo_id = null, callback) {
    if (
      typeof localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY ===
        "string" &&
      localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY.length > 0
    ) {
      const RM_WALLET = new localbitcoinplusplus.wallets();
      let user_keys = RM_WALLET.generateFloKeys(
        localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
      );
      if (
        typeof user_keys == "object" &&
        typeof user_keys.pubKeyHex == "string"
      ) {
        if (
          localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
            user_keys.pubKeyHex
          )
        ) {
          return callback(true);
        } else {
          return callback(false);
        }
      }
    } else {
      return callback(false);
    }
  },

  async receive_rpc_response(request) {
    var request = JSON.parse(request);
    var params = request.params[0];
    var method = request.method;

    if (typeof params == "object" && typeof method == "string") {
      const RM_WALLET = new localbitcoinplusplus.wallets();
      const RM_TRADE = new localbitcoinplusplus.trade();
      const RM_RPC = new localbitcoinplusplus.rpc();

      let respective_trader_id = "";
      if (typeof params.trader_flo_address == "string")
        respective_trader_id = params.trader_flo_address;
      request.response = {};
      let err_msg;

      let recvr_flo_id =
        params.receiver_flo_address || request.globalParams.receiverFloId;
      if (
        typeof recvr_flo_id == "string" &&
        recvr_flo_id.length > 0 &&
        recvr_flo_id !== localbitcoinplusplus.wallets.my_local_flo_address
      )
        return;

      if (method == "sync_with_supernode") {
        RM_RPC.filter_legit_requests(params.trader_flo_address, function(
          is_valid_request
        ) {
          if (
            is_valid_request === true &&
            params.job == "SYNC_MY_LOCAL_DB_WITH_SUPERNODE_DB" &&
            params.trader_flo_address.length > 0
          ) {  

            const tableArray = [
              "deposit",
              "cash_deposits",
              "withdraw_cash",
              "withdraw_btc",
              "crypto_balances",
              "cash_balances",
              "buyOrders",
              "sellOrders"
            ];
            localbitcoinplusplus.actions
              .get_sharable_db_data_for_single_user(
                  params.trader_flo_address, 
                  tableArray)
              .then(function(su_db_data) {
                if (typeof su_db_data == "object") {
                  su_db_data.trader_flo_address =
                    params.trader_flo_address;
                  su_db_data.receiver_flo_address =
                    params.trader_flo_address;
                  RM_RPC.send_rpc
                    .call(this, "server_sync_response", su_db_data)
                    .then(server_sync_response =>
                      doSend(server_sync_response)
                    );
                }
              });
          }
        });

        // Refresh reserved cryptos balances if more than a day has passed
        let today = new Date().getTime();
        localbitcoinplusplus.kademlia.determineClosestSupernode(params.trader_flo_address)
        .then(su=>{
            let last_updated = localStorage.getItem(`refresh_reserved_cryptos_prices_time_${su[0].data.id}`);
            
            readDBbyIndex("withdraw_btc", 'trader_flo_address', params.trader_flo_address).then(withdraw_response=>{
              for (const withdraw_res of withdraw_response) {
                  if(today-withdraw_res.timestamp>60 * 60 * 1000) {
                      removeinDB("withdraw_btc", withdraw_res.id);
                  }
              }   
            })
            
            if(last_updated==null
              || (today - last_updated > (24 * 60 * 60 * 1000))) {
                  const RM_WALLET = new localbitcoinplusplus.wallets;
                  RM_WALLET.refresh_reserved_crypto_balances(params.trader_flo_address);
              }
        });

          // And delete redundant data as well
          let timestamp_for_last_deletion_of_db_stale_data = localStorage.getItem(`timestamp_for_last_deletion_of_db_stale_data`);
          if(timestamp_for_last_deletion_of_db_stale_data=null
          || (today - timestamp_for_last_deletion_of_db_stale_data > (24 * 60 * 60 * 1000))) {
              limit_function_calls(async function() {
                  await reactor.dispatchEvent("remove_temp_data_from_db");
              }, 600000); // Its expected in 10 mins all deletion should be complete.   
          }
      }

      if(method=="live_prices_request") {
          RM_RPC.filter_legit_requests(params.trader_flo_address, function(
          is_valid_request
        ) {
          if (
            is_valid_request === true &&
            params.trader_flo_address.length > 0
          ) {
              let live_trading_prices = {};
              localbitcoinplusplus.master_configurations.tradableAsset1.forEach(
                  function(asset1) {
                      localbitcoinplusplus.master_configurations.tradableAsset2.forEach(
                          async function(asset2) {
                              live_trading_prices[`${asset1}_${asset2}`] = localbitcoinplusplus.trade[`current_${asset1}_price_in_${asset2}`];
                          }
                      );
                  }
              );
              let live_trading_prices_response_object = {
                  live_trading_prices: live_trading_prices,
                  receiver_flo_address: params.trader_flo_address
              }
              RM_RPC.send_rpc
                  .call(this, "live_trading_prices_response", live_trading_prices_response_object)
                  .then(response => doSend(response)
              );
          }
        });  
        return true;
      }

      RM_RPC.filter_legit_requests(
        params.trader_flo_address,
        async function(is_valid_request) {
          if (is_valid_request !== true) return false;

          try {
            // CHECK HERE IF USER IS INDULGED IN ANY MORE TRADE. IF TRUE RETURN ERROR
            await readAllDB("deposit").then(function(res) {
              if (typeof res == "object" && res.length > 0) {
                let canUserTrade = res.filter(function(user) {
                  return (
                    respective_trader_id == user.trader_flo_address &&
                    user.status == 1
                  );
                });
                if (canUserTrade.includes(true)) {
                  request.response = `Trader id ${respective_trader_id} is not clear for trade currently.
                                       You must finish your previous pending orders to qualify again to trade.`;

                  const RM_RPC = new localbitcoinplusplus.rpc();
                  RM_RPC.send_rpc
                    .call(this, "supernode_message", {
                      trader_flo_address: respective_trader_id,
                      receiver_flo_address: respective_trader_id,
                      server_msg: request.response
                    })
                    .then(server_response => doSend(server_response));
                  showMessage(request.response);
                  throw new Error(request.response);
                  return false;
                }
              }
            });
          } catch (error) {
            throw new Error(error);
          }
        }
      );

      let is_user_blacklisted = localbitcoinplusplus.actions.is_user_blacklisted(params.trader_flo_address);
      if(is_user_blacklisted===true) {
          console.warn(`Flo Id ${params.trader_flo_address} is blacklisted.`);
          return false;
      }

      switch (method) {
        case "trade_buy":
          RM_RPC.filter_legit_requests(
            params.trader_flo_address,
            async function(is_valid_request) {
              if (is_valid_request !== true) return false;
              await RM_TRADE.resolve_current_crypto_price_in_fiat(
                params.product,
                params.currency
              );
              let trade_margin = await RM_TRADE.getAssetTradeAndWithdrawLimit(
                params.trader_flo_address,
                params.product,
                params.currency
              );
              if (
                typeof trade_margin.remaining_crypto_credit == "number" &&
                typeof trade_margin.remaining_fiat_credit == "number"
              ) {
                if (
                  trade_margin.remaining_fiat_credit > 0 &&
                  trade_margin.remaining_fiat_credit >= params.buy_price
                ) {
                  request.params.receiver_flo_address = params.trader_flo_address;
                  request.response = RM_TRADE.trade_buy.call(
                    this,
                    ...request.params,
                    function(supernode_signed_res) {
                      if (typeof supernode_signed_res == "object") {
                        RM_RPC.send_rpc
                          .call(
                            this,
                            "trade_buy_request_response",
                            supernode_signed_res
                          )
                          .then(buy_request_response =>
                            doSend(buy_request_response)
                          );

                        // Init trading
                        RM_TRADE.createTradePipes(params.currency);
                        return true;
                      }
                    }
                  );
                } else {
                  err_msg = `Trade Margin Check Failed: You can only trade upto ${params.currency} ${trade_margin.remaining_fiat_credit}.`;
                  err_response = {
                      user_flo_addr: params.trader_flo_address,
                      msg: err_msg
                  }
                reactor.dispatchEvent('message_for_user', err_response);
                  throw new Error(err_msg);
                }
              } else {
                err_msg = "Invalid trade margin figures.";
                err_response = {
                  user_flo_addr: params.trader_flo_address,
                  msg: err_msg
                }
                reactor.dispatchEvent('message_for_user', err_response);
                throw new Error(err_msg);
              }
            }
          );
          break;
        case "trade_sell":
          RM_RPC.filter_legit_requests(
            params.trader_flo_address,
            async function(is_valid_request) {
              if (is_valid_request !== true) return false;
              await RM_TRADE.resolve_current_crypto_price_in_fiat(
                params.product,
                params.currency
              );
              let trade_margin = await RM_TRADE.getAssetTradeAndWithdrawLimit(
                params.trader_flo_address,
                params.product,
                params.currency
              );
              if (
                typeof trade_margin.remaining_crypto_credit == "number" &&
                typeof trade_margin.remaining_fiat_credit == "number"
              ) {
                let eqCrypto = RM_TRADE.calculateCryptoEquivalentOfCash(
                  params.buy_price,
                  params.currency,
                  params.product
                );

                if (
                  trade_margin.remaining_crypto_credit > 0 &&
                  trade_margin.remaining_crypto_credit >= eqCrypto
                ) {  
                  request.params.receiver_flo_address = params.trader_flo_address;
                  request.response = RM_TRADE.trade_sell.call(
                    this,
                    ...request.params,
                    function(supernode_signed_res) {
                      if (typeof supernode_signed_res == "object") {
                      //   supernode_signed_res.receiver_flo_address =
                      //     params.trader_flo_address;
                        RM_RPC.send_rpc
                          .call(
                            this,
                            "trade_sell_request_response",
                            supernode_signed_res
                          )
                          .then(sell_request_response =>
                            doSend(sell_request_response)
                          );

                        // Init trading
                        RM_TRADE.createTradePipes(params.currency);
                        return true;
                      }
                    }
                  );
                } else {
                  err_msg = `WARNING: Trade Margin Check Failed: You can only trade upto ${params.currency} ${trade_margin.remaining_fiat_credit}.`;

                  err_response = {
                      user_flo_addr: params.trader_flo_address,
                      msg: err_msg
                  }
                  reactor.dispatchEvent('message_for_user', err_response);
                  
                  throw new Error(err_msg);
                }
              } else {
                err_msg = "Invalid trade margin figures.";
                err_response = {
                      user_flo_addr: params.trader_flo_address,
                      msg: err_msg
                  }
                  reactor.dispatchEvent('message_for_user', err_response);
                  
                throw new Error(err_msg);
              }
            }
          );
          break;
        case "sync_with_supernode":
          // already processed above
          break;
        case "deposit_asset_request":
          RM_RPC.filter_legit_requests(
            params.trader_flo_address,
            async function(is_valid_request) {
              if (is_valid_request !== true) return false;

              // This code will only run for supernodes
              if (
                typeof params.product !== "undefined" &&
                (localbitcoinplusplus.master_configurations.tradableAsset1.includes(
                  params.product
                ) ||
                  localbitcoinplusplus.master_configurations.tradableAsset2.includes(
                    params.product
                  )) &&
                typeof params.depositing_amount !== "undefined" &&
                localbitcoinplusplus.master_configurations.tradableAsset2.includes(
                  params.currency
                ) &&
                typeof params.trader_flo_address == "string" &&
                params.trader_flo_address.length > 0
              ) {
                  const requester_public_key = request.nodePubKey;
                    if (
                      requester_public_key == undefined ||
                      requester_public_key == null ||
                      requester_public_key.length < 1
                    ) {
                      err_msg = "Failed to get public key of the user.";
                      showMessage(err_msg);
                      throw new Error(err_msg);
                    }
                    params.depositor_public_key = requester_public_key;

                    await RM_TRADE.resolve_current_crypto_price_in_fiat(
                      params.product,
                      params.currency
                    );

                    if (
                      localbitcoinplusplus.master_configurations.tradableAsset1.includes(
                        params.product
                      )
                    ) {
                      let generate_btc_keys_for_requester = RM_WALLET.generateFloKeys(
                        null,
                        params.product
                      );

                      console.table(generate_btc_keys_for_requester);

                      params.id = helper_functions.unique_id();
                      params.status = 1;
                      params.btc_address = generate_btc_keys_for_requester.address;

                      params.bitcoinToBePaid = helper_functions.truncateDecimals(params.depositing_amount);

                      let receivedTradeInfo = { ...params };

                      if (
                        typeof localbitcoinplusplus.wallets
                          .MY_SUPERNODE_PRIVATE_KEY == "undefined"
                      ) {
                        err_msg =
                          "Failed to determine Super node signing key.";
                        showMessage(err_msg);
                        throw new Error(err_msg);
                      }

                      readDB("localbitcoinUser", "00-01").then(
                        async function(su_data) {
                          if (
                            typeof su_data == "object" &&
                            typeof su_data.myLocalFLOPublicKey ==
                              "string" &&
                            su_data.myLocalFLOPublicKey.length > 0 &&
                            localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                              su_data.myLocalFLOPublicKey
                            )
                          ) {
                            let receivedTradeInfoHash = Crypto.SHA256(
                              JSON.stringify(receivedTradeInfo)
                            );

                            receivedTradeInfo["depositDataHash"] = receivedTradeInfoHash;
                            receivedTradeInfo["order_validator_sign"] = RM_WALLET.sign(
                              receivedTradeInfoHash,
                              localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
                            );
                            receivedTradeInfo["order_validator_public_key"] = su_data.myLocalFLOPublicKey;

                            try {
                              const this_btc_pvt_key = generate_btc_keys_for_requester.privateKeyWIF;
                              const this_btc_tx_key = Crypto.util.randomBytes(64);
                              const this_btc_pvt_key_shamirs_secret = RM_WALLET.createShamirsSecretShares(
                                this_btc_pvt_key,
                                10,
                                5
                              );
                              if (
                                typeof this_btc_pvt_key_shamirs_secret ==
                                  "object" &&
                                this_btc_pvt_key_shamirs_secret.length > 0
                              ) {
                                const deposit_res = await addDB(
                                  "deposit",
                                  receivedTradeInfo
                                );

                                // Send the address to the requester
                                let deposit_response_object = {
                                  error: false,
                                  method:
                                    "deposit_asset_request_response",
                                  msg: `Please send ${params.product} ${params.bitcoinToBePaid} to ${generate_btc_keys_for_requester.address}`,
                                  data: deposit_res
                                };
                                deposit_response_object.receiver_flo_address =
                                  params.trader_flo_address;
                                deposit_response_object.trader_flo_address =
                                  params.trader_flo_address;
                                RM_RPC.send_rpc
                                  .call(
                                    this,
                                    "deposit_asset_request_response",
                                    deposit_response_object
                                  )
                                  .then(deposit_request_response =>
                                    doSend(deposit_request_response)
                                  );

                                let this_btc_pvt_key_shamirs_secret_array = this_btc_pvt_key_shamirs_secret.map(
                                  chunks => {
                                    let chunk_ids = Crypto.util.bytesToHex(
                                      Crypto.util.randomBytes(64)
                                    );
                                    let chunk_array = {
                                      id: chunk_ids,
                                      privateKeyChunks: Crypto.AES.encrypt(
                                        chunks,
                                        this_btc_tx_key
                                      ),
                                      trader_flo_address:
                                        params.trader_flo_address
                                    };
                                    return chunk_array;
                                  }
                                );

                                // Send chunks of private keys to other supernodes
                                this_btc_pvt_key_shamirs_secret_array.map(
                                  shares => {
                                    RM_RPC.send_rpc
                                      .call(
                                        this,
                                        "store_shamirs_secret_pvtkey_shares",
                                        shares
                                      )
                                      .then(store_pvtkey_req =>
                                        doSend(store_pvtkey_req)
                                      );
                                  }
                                );

                                if (
                                  typeof localbitcoinplusplus.wallets
                                    .my_local_flo_address == "string" &&
                                  typeof localbitcoinplusplus.wallets
                                    .my_local_flo_public_key ==
                                    "string" &&
                                  typeof localbitcoinplusplus
                                    .master_configurations
                                    .supernodesPubKeys == "object" &&
                                  localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                                    localbitcoinplusplus.wallets
                                      .my_local_flo_public_key
                                  )
                                ) {
                                  try {
                                    let this_btc_pvt_key_shamirs_secret__id_array = this_btc_pvt_key_shamirs_secret_array.map(
                                      i => i.id
                                    );
                                    let btc_private_key_shamirs_id = this_btc_pvt_key_shamirs_secret__id_array;
                                    let supernode_transaction_key = localbitcoinplusplus.actions.master_encrypt(this_btc_tx_key);
                                    const system_btc_reserves_private_keys_object = {
                                      id: helper_functions.unique_id(),
                                      product: params.product,
                                      btc_address: params.btc_address,
                                      trader_flo_address: params.trader_flo_address,
                                      btc_private_key_shamirs_id: btc_private_key_shamirs_id,
                                      supernode_transaction_key: supernode_transaction_key
                                    };
                                    addDB(
                                      "system_btc_reserves_private_keys",
                                      system_btc_reserves_private_keys_object
                                    ).then(pk_res => {
                                      // Send it to neighbor nodes to store as backup
                                      reactor.dispatchEvent(
                                        "store_backup_crypto_pk_object",
                                        pk_res
                                      );
                                    });
                                  } catch (error) {
                                    throw new Error(error);
                                  }
                                }
                                return true;
                              }
                            } catch (error) {
                              throw new Error(error);
                            }
                            return true;
                          }
                        }
                      );

                      return false;
                    }
                  
              } else {
                err_msg = "deposit asset request error";
                showMessage(err_msg);
                throw new Error(err_msg);
              }
            }
          );
          break;
        case "deposit_cash_request":
          RM_RPC.filter_legit_requests(
            params.trader_flo_address,
            async function(is_valid_request) {
              if (is_valid_request !== true) return false;

              // This code will only run for supernodes
              if (
                typeof params.depositing_amount !== "undefined" &&
                localbitcoinplusplus.master_configurations.tradableAsset2.includes(
                  params.currency
                ) &&
                typeof params.trader_flo_address == "string" &&
                params.trader_flo_address.length > 0 &&
                typeof params.user_upi == "string" &&
                params.user_upi.length > 0
              ) {
                params.id = helper_functions.unique_id();
                params.status = 1;
                let receivedTradeInfo = { ...params };

                const su_data = await readDB("localbitcoinUser", "00-01");

                if (
                  typeof su_data == "object" &&
                  typeof su_data.myLocalFLOPublicKey == "string" &&
                  su_data.myLocalFLOPublicKey.length > 0 &&
                  localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                    su_data.myLocalFLOPublicKey
                  )
                ) {
                  let receivedTradeInfoHash = Crypto.SHA256(
                    JSON.stringify(receivedTradeInfo)
                  );

                  receivedTradeInfo["depositDataHash"] = receivedTradeInfoHash;
                  receivedTradeInfo["order_validator_sign"] = RM_WALLET.sign(
                    receivedTradeInfoHash,
                    localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
                  );
                  receivedTradeInfo["order_validator_public_key"] = su_data.myLocalFLOPublicKey;

                  try {
                      let cashiersList = Object.keys(localbitcoinplusplus.CashierStatusObject)
                       .filter(f=>localbitcoinplusplus.CashierStatusObject[f].currencies.includes(params.currency));
                      if(cashiersList.length<1) throw new Error('Unknown currency requested. No cashier found.');  
                      let liveCashiersList = cashiersList.filter(f=>localbitcoinplusplus.CashierStatusObject[f].is_live===true);
                      if(liveCashiersList.length>0) {
                          cashiersList = liveCashiersList;
                      }
                    const getAPaymentHandler = randomNoRepeats(cashiersList)();

                    if (!cashiersPubKeysArray.includes(
                        getAPaymentHandler
                      )
                    ) {
                      err_msg = `ERROR: ${getAPaymentHandler} is not recognized as any Cashier's Public Key.`;  
                      err_response = {
                          user_flo_addr: params.trader_flo_address,
                          msg: err_msg
                      }
                      reactor.dispatchEvent('message_for_user', err_response);
                      
                      throw new Error(err_msg);
                    }

                    receivedTradeInfo.cashier_upi = cashiersList[getAPaymentHandler].upi;
                    receivedTradeInfo.cashier_pubKey = getAPaymentHandler;
                    const receivedTradeInfoResp = await addDB(
                      "cash_deposits",
                      receivedTradeInfo
                    );

                    let deposit_response_object = {
                      error: false,
                      method: "deposit_cash_request_response",
                      msg: receivedTradeInfo.cashier_upi,
                      data: receivedTradeInfoResp,
                      receiver_flo_address:
                        receivedTradeInfo.trader_flo_address,
                      trader_flo_address:
                        receivedTradeInfo.trader_flo_address
                    };

                    RM_RPC.send_rpc
                      .call(
                        this,
                        "deposit_cash_request_response",
                        deposit_response_object
                      )
                      .then(deposit_request_response =>
                        doSend(deposit_request_response)
                      );

                    // Delete the request after 24 hours
                    let deposit_life = JSON.parse(localbitcoinplusplus.master_configurations.ordersLife);
                    localbitcoinplusplus.actions.delay(deposit_life.cashWithdraw).then(function() {
                      removeinDB("cash_deposits", receivedTradeInfo.id);
                    });

                    return true;
                  } catch (e) {
                    console.error(e);
                  }
                }
              }
            }
          );
          break;
        case "withdraw_request_method":
        RM_RPC.filter_legit_requests(
            params.trader_flo_address,
            async function(is_valid_request) {
              if (is_valid_request !== true) return false;

              if (
                typeof params.product !== "undefined" &&
                ((localbitcoinplusplus.master_configurations.tradableAsset1.includes(
                  params.product
                ) ||
                  localbitcoinplusplus.master_configurations.tradableAsset2.includes(
                    params.product
                  )) &&
                  localbitcoinplusplus.master_configurations.tradableAsset2.includes(
                    params.currency
                  )) &&
                typeof params.withdrawing_amount !== "undefined" &&
                typeof localbitcoinplusplus.master_configurations
                  .validTradingAmount !== "undefined" &&
                typeof params.trader_flo_address == "string" &&
                params.trader_flo_address.length > 0 &&
                typeof params.receivinAddress == "string" &&
                params.receivinAddress.length > 0 &&
                typeof params.currency == "string"
              ) {
                const get_requester_primary_supernode = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                  params.trader_flo_address
                );
                const primarySupernodeForThisUser = get_requester_primary_supernode[0].data.id;

                await RM_TRADE.resolve_current_crypto_price_in_fiat(
                  params.product,
                  params.currency
                );

                let trade_margin = await RM_TRADE.getAssetTradeAndWithdrawLimit(
                  params.trader_flo_address,
                  params.product,
                  params.currency
                );

                params.id = helper_functions.unique_id();
                params.status = 1;
                
                if (
                  localbitcoinplusplus.master_configurations.tradableAsset1.includes(
                    params.product
                  )
                ) {
                    try {
                        
                      const eqBTC = helper_functions.truncateDecimals(params.withdrawing_amount);

                      if (
                      trade_margin.remaining_crypto_credit < 0 ||
                      eqBTC <= 0 ||
                      trade_margin.remaining_crypto_credit < eqBTC
                      ) {
                      err_msg = `Insufficient crypto balance to withdraw. You can withdraw upto: ${params.product} ${trade_margin.remaining_crypto_credit}`;
                      err_response = {
                              user_flo_addr: params.trader_flo_address,
                              msg: err_msg
                          }
                          reactor.dispatchEvent('message_for_user', err_response);
                          throw new Error(err_msg);
                      }

                      // Check how much cryptos the user can withdraw
                      let withdrawer_btc_id = `${params.trader_flo_address}_${params.product}`;
                      readDB("crypto_balances", withdrawer_btc_id).then(
                      async function(btc_balance_res) {
                          if (
                          typeof btc_balance_res == "object" &&
                          typeof btc_balance_res.trader_flo_address ==
                              "string" &&
                          btc_balance_res.crypto_balance > 0
                          ) {
                          let withdrawer_btc_balance = helper_functions.truncateDecimals(
                              btc_balance_res.crypto_balance
                          );

                          let withdrawer_new_btc_balance =
                              withdrawer_btc_balance - eqBTC;
                          if (
                              withdrawer_new_btc_balance >= 0 &&
                              withdrawer_btc_balance > 0 &&
                              eqBTC > 0 &&
                              eqBTC <= withdrawer_btc_balance
                          ) {
                              // Now details of Bitcoins can be sent to withdrawer

                              let sum_total_btc = 0;
                              let valid_utxo_list = [];
                              let receiverBTCAddress = params.receivinAddress.trim();

                              const deposit_list = await readAllDB("deposit");
                              if (
                                  typeof deposit_list == "object" &&
                                  deposit_list.length > 0
                              ) {
                                  
                                  for (const dl in deposit_list) {
                                  if (deposit_list.hasOwnProperty(dl)) {
                                      const deposit_dl = deposit_list[dl];
                                      if((
                                          deposit_dl.status == 2 &&
                                          localbitcoinplusplus.master_configurations.tradableAsset1.includes(
                                              deposit_dl.product
                                          ) &&
                                          params.product == deposit_dl.product
                                      )) {
                                          // Deposited Bitcoin is under process
                                          deposit_dl.status = 3;
                                          await updateinDB(
                                              "deposit",
                                              deposit_dl,
                                              deposit_dl.id
                                          );
                                          sum_total_btc += helper_functions.truncateDecimals(
                                              deposit_dl.bitcoinToBePaid
                                          );

                                          if (eqBTC <= sum_total_btc) {
                                              valid_utxo_list.push(deposit_dl);
                                              break;
                                          } else {
                                              valid_utxo_list.push(deposit_dl);
                                          }
                                      }
                                  }
                                  }
                                  let deposited_utxo_addr_list = {};
                                  let idx = 0;
                                  for (const deposit_arr of valid_utxo_list) {
                                      
                                      if(idx==valid_utxo_list.length-1) {
                                          deposited_utxo_addr_list[idx]=deposit_arr.btc_address;
                                          // save the address and id in a table
                                          let withdraw_id = helper_functions.unique_id();
                                          const withdraw_btc_order_object = {
                                              id: withdraw_id,
                                              trader_flo_address:
                                                  params.trader_flo_address,
                                              utxo_addr: deposited_utxo_addr_list,
                                              receiverBTCAddress:
                                                  params.receivinAddress,
                                              receivingBTC: eqBTC,
                                              currency: params.currency,
                                              product: params.product,
                                              timestamp: +new Date()
                                          };
                                          
                                          await addDB("withdraw_btc", withdraw_btc_order_object);
                                          
                                          // Delete the withdraw crypto order after 30 mins anyway
                                          let withdraw_order_life = JSON.parse(localbitcoinplusplus.master_configurations.ordersLife);
                                          localbitcoinplusplus.actions.delay(withdraw_order_life.cryptoWithdraw)
                                          .then(()=>{
                                              removeinDB("withdraw_btc", withdraw_id)
                                          });

                                          // doSend btc_private_key_shamirs_id from system_btc_reserves_private_keys
                                          for (const depositedutxoaddr in deposited_utxo_addr_list) {
                                              if (deposited_utxo_addr_list.hasOwnProperty(depositedutxoaddr)) {
                                                  const vbl = deposited_utxo_addr_list[depositedutxoaddr];
                                                  const res = await readDBbyIndex(
                                                      "system_btc_reserves_private_keys",
                                                      "btc_address",
                                                      vbl
                                                  );
                                                  if(typeof res!=="object" || typeof res[0].id!=="string") {
                                                      deposit_arr.status = 2;
                                                          await updateinDB(
                                                          "deposit",
                                                          deposit_arr,
                                                          deposit_arr.id,
                                                          false,
                                                          false
                                                      );
                                                      return;
                                                  }
                                                  let retrieve_pvtkey_req_id = res[0].id;
                                                  res[0].btc_private_key_shamirs_id.map(
                                                  bpks => {
                                                      RM_RPC.send_rpc
                                                      .call(
                                                          this,
                                                          "send_back_shamirs_secret_btc_pvtkey",
                                                          {
                                                          retrieve_pvtkey_req_id: retrieve_pvtkey_req_id,
                                                          chunk_val: bpks,
                                                          withdraw_id: withdraw_id,
                                                          db_inst: primarySupernodeForThisUser
                                                          }
                                                      )
                                                      .then(retrieve_pvtkey_req =>
                                                          doSend(retrieve_pvtkey_req)
                                                      );
                                                  });
                                              }
                                          }

                                      } else {
                                          deposited_utxo_addr_list[idx]=deposit_arr.btc_address;
                                      }
                                      idx++;
                                  }
                              }
                              
                          } else {
                              err_msg = `Withdrawal request failed: You are trying to withdraw more ${params.product} than you have.`;
                              err_response = {
                                  user_flo_addr: params.trader_flo_address,
                                  msg: err_msg
                              }
                              reactor.dispatchEvent('message_for_user', err_response);
                              throw new Error(err_msg);
                          }
                          } else {
                          err_msg = `Withdrawal request failed: You don't seem to have any ${params.product} balance in the system yet.
                                      Please buy some ${params.product} to withdraw.`;
                              err_response = {
                                  user_flo_addr: params.trader_flo_address,
                                  msg: err_msg
                              }
                              reactor.dispatchEvent('message_for_user', err_response);
                          }
                      });

                    } catch (error) {
                        console.log(error);
                    }
                } else if (
                  localbitcoinplusplus.master_configurations.tradableAsset2.includes(
                    params.product
                  )
                ) {
                  if (
                    trade_margin.remaining_fiat_credit <= 0 ||
                    params.withdrawing_amount <= 0 ||
                    trade_margin.remaining_fiat_credit <
                      params.withdrawing_amount
                  ) {
                    err_msg = `Insufficient fiat balance to withdraw. You can withdraw upto: ${params.currency} ${trade_margin.remaining_fiat_credit}`;
                    err_response = {
                          user_flo_addr: params.trader_flo_address,
                          msg: err_msg
                      }
                      reactor.dispatchEvent('message_for_user', err_response);
                    throw new Error(err_msg);
                  }
                  // Check if there's no already a withdraw cash order of this user
                  /* ONLY DELETE A WITHDRAW ORDER WHEN A DEPOSITOR HAS CONFIRMED DEPOSIT
                     AND RECEIVER HAS CONFIRMED WITHDRAW*/

                  // Check how much Cash user can withdraw
                  const trader_cash_id = `${params.trader_flo_address}_${params.currency}`;
                  readDB("cash_balances", trader_cash_id).then(function(
                    cash_balances_res
                  ) {
                    if (
                      typeof cash_balances_res == "object" &&
                      typeof cash_balances_res.trader_flo_address ==
                        "string" &&
                      typeof cash_balances_res.cash_balance == "number" &&
                      cash_balances_res.cash_balance > 0
                    ) {
                      let withdrawer_cash_balance = helper_functions.truncateDecimals(
                        cash_balances_res.cash_balance, 2
                      );
                      let withdrawing_cash_amount = helper_functions.truncateDecimals(
                        params.withdrawing_amount, 2
                      );
                      let bank_details = params.receivinAddress.trim(); // user UPI

                      if (
                        withdrawer_cash_balance > 0 &&
                        withdrawing_cash_amount > 0 &&
                        withdrawer_cash_balance >= withdrawing_cash_amount
                      ) {
                        // Get a cashier
                        const cashiersList = JSON.parse(
                          localbitcoinplusplus.master_configurations
                            .cashiers
                        );
                        
                        const cashiersPubKeysArray = Object.keys(cashiersList);
                        const getAPaymentHandler = randomNoRepeats(cashiersPubKeysArray)();
                        const cashierFloAddr = bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(
                          getAPaymentHandler
                        );

                        if (!cashiersPubKeysArray.includes(
                            getAPaymentHandler
                          )
                        ) {
                          err_msg = `ERROR: ${getAPaymentHandler} is not recognized as any Cashier's Public Key.`;  
                          err_response = {
                              user_flo_addr: params.trader_flo_address,
                              msg: err_msg
                          }
                          reactor.dispatchEvent('message_for_user', err_response);
                          throw new Error(err_msg);
                        }

                        const encoded_bank_details = localbitcoinplusplus.encrypt.encryptMessage(
                          bank_details,
                          getAPaymentHandler
                        );

                        let token_transfer_currency = "";
                        if (params.currency == "INR") {
                          token_transfer_currency = "rupee";
                        }

                        //const flo_withdraw_comment = `transfer ${withdrawing_cash_amount} ${token_transfer_currency}# to ${params.trader_flo_address}.`;
                        const flo_withdraw_comment = `transfer ${withdrawing_cash_amount} ${token_transfer_currency}# to ${cashierFloAddr} for ${params.trader_flo_address}.`;

                        // Add it to cash withdrawal table
                        let withdraw_request_db_object = {
                          id: helper_functions.unique_id(),
                          trader_flo_address: params.trader_flo_address,
                          withdraw_amount: withdrawing_cash_amount,
                          currency: params.currency,
                          receivinAddress: encoded_bank_details,
                          cashier_pubKey: getAPaymentHandler,
                          status: 1 // withdraw request called
                        };

                        readDB("localbitcoinUser", "00-01").then(function(
                          su_data
                        ) {
                          if (
                            typeof su_data == "object" &&
                            typeof su_data.myLocalFLOPublicKey ==
                              "string" &&
                            su_data.myLocalFLOPublicKey.length > 0 &&
                            localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                              su_data.myLocalFLOPublicKey
                            )
                          ) {
                            let withdraw_request_db_object_hash = Crypto.SHA256(
                              JSON.stringify(withdraw_request_db_object)
                            );
                            withdraw_request_db_object[
                              "withdrawDataHash"
                            ] = withdraw_request_db_object_hash;
                            withdraw_request_db_object[
                              "order_validator_sign"
                            ] = RM_WALLET.sign(
                              withdraw_request_db_object_hash,
                              localbitcoinplusplus.wallets
                                .MY_SUPERNODE_PRIVATE_KEY
                            );
                            withdraw_request_db_object[
                              "order_validator_public_key"
                            ] = su_data.myLocalFLOPublicKey;

                            try {
                              // Transfer Token
                              RM_TRADE.sendMultipleInputsTransaction(
                                localbitcoinplusplus.BASE_BLOCKCHAIN,
                                [localbitcoinplusplus.wallets
                                  .MY_SUPERNODE_PRIVATE_KEY],
                                cashierFloAddr,
                                0.01,
                                localbitcoinplusplus.wallets
                                  .my_local_flo_address,
                                async function(res) {
                                  console.log(res);
                                  if (typeof res == "object") {
                                    try {
                                      let msg = "";
                                      let resp_txid = "";
                                      if (
                                        typeof res.txid == "string" &&
                                        res.txid.length > 0
                                      ) {
                                        resp_obj = JSON.parse(res.txid);
                                        resp_txid = resp_obj.txid.result || resp_obj.txid;
                                        msg = `Transaction Id for token transfer to ${params.trader_flo_address}: ${resp_txid}.`;
                                      } else {
                                        console.log(res);
                                        err_response = {
                                              user_flo_addr: cashierFloAddr,
                                              msg: `Failed to transfer token for withdraw order ${withdraw_request_db_object.id}`
                                          }
                                          reactor.dispatchEvent('message_for_user', err_response);
                                        throw new Errror(`ERROR: Failed to transfer token for withdraw order ${withdraw_request_db_object.id}.`);
                                        return false;
                                      }

                                      if (msg.length > 0) {
                                        // Deduct balance of withdrawer
                                        cash_balances_res.cash_balance -= helper_functions.truncateDecimals(
                                          withdrawing_cash_amount, 2
                                        );
                                        const withdrawer_cash_data = await updateinDB(
                                          "cash_balances",
                                          cash_balances_res
                                        );

                                        const update_cash_balance_obj = {
                                          withdrawer_cash_data: withdrawer_cash_data
                                        };
                                        const update_cash_balance_str = JSON.stringify(
                                          update_cash_balance_obj
                                        );
                                        const update_cash_balance_hash = Crypto.SHA256(
                                          update_cash_balance_str
                                        );
                                        const update_cash_balance_sign = RM_WALLET.sign(
                                          update_cash_balance_hash,
                                          localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
                                        );

                                        update_cash_balance_obj.publicKey =
                                          localbitcoinplusplus.wallets.my_local_flo_public_key;
                                        update_cash_balance_obj.sign = update_cash_balance_sign;
                                        update_cash_balance_obj.hash = update_cash_balance_hash;
                                        update_cash_balance_obj.trader_flo_address = cash_balances_res.trader_flo_address;

                                        RM_RPC.send_rpc
                                          .call(
                                            this,
                                            "update_all_new_cash_withdraw_recorded_in_db",
                                            update_cash_balance_obj
                                          )
                                          .then(update_cash_balance_req =>
                                            doSend(
                                              update_cash_balance_req
                                            )
                                          );

                                        //add the request to supernode db
                                        withdraw_request_db_object.token_transfer_txid = resp_txid;

                                        // Add record in Db
                                        const withdraw_request_db_object_res = await addDB(
                                          "withdraw_cash",
                                          withdraw_request_db_object
                                        );

                                        // return back the response to client
                                        withdraw_request_db_object_res.receiver_flo_address =
                                          params.trader_flo_address;
                                        withdraw_request_db_object_res.trader_flo_address =
                                          params.trader_flo_address;
                                        RM_RPC.send_rpc
                                          .call(
                                            this,
                                            "withdrawal_request_response",
                                            withdraw_request_db_object_res
                                          )
                                          .then(
                                            withdrawal_request_response =>
                                              doSend(
                                                withdrawal_request_response
                                              )
                                          );
                                      } else {
                                        throw new Errror(
                                          `ERROR: Failed to make transaction. Message length is 0: ${msg}`
                                        );
                                        return false;
                                      }
                                    } catch (e) {
                                      throw new Error(e);
                                    }
                                  }
                                },
                                flo_withdraw_comment
                              );
                            } catch (error) {
                              console.log(error);
                            }
                          }
                        });
                      } else {
                        // Return error to the requester
                        err_msg =
                          "Withdrawal request failed: You are trying to withdraw more cash than you have in localbitcoinplusplus account.";
                          err_response = {
                              user_flo_addr: params.trader_flo_address,
                              msg: err_msg
                          }
                          reactor.dispatchEvent('message_for_user', err_response);
                        throw new Error(err_msg);
                      }
                    }
                  });
                } else {
                  err_msg = "Unknown asset withdraw request error.";
                  err_response = {
                      user_flo_addr: params.trader_flo_address,
                      msg: err_msg
                  }
                  reactor.dispatchEvent('message_for_user', err_response);
                  throw new Error(err_msg);
                }
              }
            }
          );
          break;

        case "cancel_trade":

          RM_RPC.filter_legit_requests(
              params.trader_flo_address,
              async function(is_valid_request) {
                  if (is_valid_request !== true) return false;
              
                  let cancel_request = params;
                  if (cancel_request.job == "cancel_trade_request") {
                      tradeDB =
                      cancel_request.trade_type == "buy"
                          ? "buyOrders"
                          : "sellOrders";
                      if (
                      RM_WALLET.verify(
                          cancel_request.trade_id,
                          cancel_request.signed_trade_id,
                          request.nodePubKey
                      )
                      ) {
                          removeinDB(tradeDB, cancel_request.trade_id).then(
                              id => {
                                  msg_response = {
                                      user_flo_addr: cancel_request.trader_flo_address,
                                      msg: `Order id ${cancel_request.trade_id} is deleted.`
                                  }
                                  reactor.dispatchEvent('message_for_user', msg_response);
                                  // Ask other Supernodes to delete this order
                                  RM_RPC.send_rpc
                                  .call(this, "cancel_trade_in_backup", {
                                      trader_flo_address: cancel_request.trader_flo_address,
                                      trader_flo_pubkey: request.nodePubKey,
                                      cancel_trade_obj: cancel_request,
                                  })
                                  .then(server_response => doSend(server_response));
                              }
                          ).catch(e=>{
                              msg_response = {
                                  user_flo_addr: cancel_request.trader_flo_address,
                                  msg: `Failed to delete Order id ${cancel_request.trade_id}.`
                              }
                              reactor.dispatchEvent('message_for_user', msg_response);
                          });
                      } else {
                      err_response = {
                              user_flo_addr: cancel_request.trader_flo_address,
                              msg: `Failed to verify order for order id ${cancel_request.trade_id}`
                          }
                          reactor.dispatchEvent('message_for_user', err_response);
                      }
                  }
              });
            break;  

        case "retrieve_shamirs_secret_btc_pvtkey":
          RM_RPC.filter_legit_requests(
              params.trader_flo_address,
              async function (is_valid_request) {
                  try {
                      if (is_valid_request !== true) return false;

                      if (
                          typeof params.btc_private_key_array !== "object"
                      )
                          return false;

                      let rec_flo_id =
                          params.receiver_flo_address ||
                          request.globalParams.receiverFloId;
                      if (
                          typeof rec_flo_id == "undefined" ||
                          rec_flo_id !==
                          localbitcoinplusplus.wallets.my_local_flo_address
                      )
                          return;

                      if (typeof params.db_inst !== "string")
                          throw new Error(`ERROR: No DB instance provided.`);
                      if (
                          params.db_inst !==
                          localbitcoinplusplus.wallets.my_local_flo_address
                      ) return;

                      const withdraw_id = params.withdraw_id;

                      const withdraw_res = await readDB("withdraw_btc", withdraw_id);
                      if (typeof withdraw_res == "object") {
                          const withdrawer_crypto_bal_id = `${withdraw_res.trader_flo_address}_${withdraw_res.product}`;
                          const withdrawer_crypto_bal_response = await readDB("crypto_balances", withdrawer_crypto_bal_id);
                          const withdrawer_crypto_bal_response_before_update = JSON.parse(JSON.stringify(withdrawer_crypto_bal_response));

                          if (typeof withdrawer_crypto_bal_response !== "object"
                              || typeof withdrawer_crypto_bal_response.crypto_balance !== "number") {
                              err_response = {
                                  user_flo_addr: params.trader_flo_address,
                                  msg: `You do not have any balance to withdraw ${withdraw_res.product}.`
                              }
                              reactor.dispatchEvent('message_for_user', err_response);
                              return false;
                          }

                          let explorer;
                          let decimal = 100000000;
                          switch (withdraw_res.product) {
                              case "BTC":
                                  explorer =
                                      localbitcoinplusplus.server
                                          .btc_mainnet;
                                  break;
                              case "BTC_TEST":
                                  explorer =
                                      localbitcoinplusplus.server
                                          .btc_testnet;
                                  break;
                              case "FLO":
                                  explorer =
                                      localbitcoinplusplus.server
                                          .flo_mainnet;
                                  decimal = 1;
                                  break;
                              case "FLO_TEST":
                                  explorer =
                                      localbitcoinplusplus.server
                                          .flo_testnet;
                                  decimal = 1;
                                  break;
                              default:
                                  break;
                          }

                          if (typeof explorer !== "string") {
                              throw new Error(
                                  `WARNING: Invalid product value: ${withdraw_res.product}.`
                              );
                              return false;
                          }

                          // Get the balance before sending the tx. It is important to get balance before
                          // tx than to after because fetching balance after can return older or newer balance 
                          // on random events
                          let current_utxos_balance = 0;
                          //const RM_WALLET = new localbitcoinplusplus.wallets;
                          let total_balance_promises = [];
                          // Send change to the first utxo 
                          for (const utxo_pk of params.btc_private_key_array) {
                              let utxo_addr = RM_WALLET.generateFloKeys(utxo_pk, withdraw_res.product).address;
                              const bal_url = `${explorer}/api/addr/${utxo_addr}/balance`;
                              total_balance_promises.push(helper_functions.ajaxGet(bal_url));
                          }
                          let total_balance_promises_resp = await Promise.all(total_balance_promises);
                          current_utxos_balance = total_balance_promises_resp.reduce((acc, c) => acc + c, 0);
                          console.log(current_utxos_balance);

                          if (typeof current_utxos_balance !== "number" || current_utxos_balance <= 0) {
                              throw new Error(
                                  "Failed to determine utxo balance of deposits in withdraw_id " + withdraw_res.id
                              );
                          }

                          const totalWithdrawingAmount = helper_functions.truncateDecimals(withdraw_res.receivingBTC);

                          if (totalWithdrawingAmount > withdrawer_crypto_bal_response.crypto_balance) {
                              err_response = {
                                  user_flo_addr: params.trader_flo_address,
                                  msg: `You are withdrawing ${withdraw_res.product} more than your balance.`
                              }
                              reactor.dispatchEvent('message_for_user', err_response);
                              return false;
                          }

                          if (totalWithdrawingAmount > current_utxos_balance) {
                              err_response = {
                                  user_flo_addr: params.trader_flo_address,
                                  msg: `${withdraw_res.product} Withdrawal request failed: System does not have sufficient balance.
                                          Please try later.`
                              }
                              reactor.dispatchEvent('message_for_user', err_response);
                              return false;
                          }

                          // Deduct balance before sending crypto
                          withdrawer_crypto_bal_response.crypto_balance -= totalWithdrawingAmount;
                          withdrawer_crypto_bal_response.crypto_balance =
                              helper_functions.truncateDecimals(withdrawer_crypto_bal_response.crypto_balance);
                          const updated_crypto_balance = await updateinDB(
                              "crypto_balances",
                              withdrawer_crypto_bal_response,
                              withdrawer_crypto_bal_id
                          );

                          RM_TRADE.sendMultipleInputsTransaction(
                              withdraw_res.product,
                              params.btc_private_key_array,
                              withdraw_res.receiverBTCAddress,
                              totalWithdrawingAmount,
                              withdraw_res.utxo_addr[0],
                              async function (res) {
                                  console.log(res);
                                  try {
                                      if (typeof res == "object") {
                                          let msg = "";
                                          if (
                                              typeof res.txid == "string" &&
                                              res.txid.length > 0
                                          ) {
                                              resp_obj = JSON.parse(res.txid);
                                              resp_txid = resp_obj.txid.result || resp_obj.txid;
                                              msg = `Transaction Id for your withdrawn crypto asset: ${resp_txid}.`;

                                              const RM_RPC = new localbitcoinplusplus.rpc();
                                              RM_RPC.send_rpc
                                                  .call(this, "supernode_message", {
                                                      trader_flo_address:
                                                          withdraw_res.trader_flo_address,
                                                      receiver_flo_address:
                                                          withdraw_res.trader_flo_address,
                                                      server_msg: msg
                                                  })
                                                  .then(server_response =>
                                                      doSend(server_response)
                                                  );

                                              const res_obj_str = JSON.stringify(updated_crypto_balance);
                                              const res_obj_hash = Crypto.SHA256(res_obj_str);
                                              const res_obj_sign = RM_WALLET.sign(
                                                  res_obj_hash,
                                                  localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
                                              );

                                              const updateUserCryptoBalanceObject = {
                                                  updatedBTCBalanceObject: updated_crypto_balance,
                                                  updatedBTCBalanceObjectSign: res_obj_sign,
                                                  trader_flo_address: withdraw_res.trader_flo_address,
                                                  receiver_flo_address: withdraw_res.trader_flo_address
                                              };

                                              RM_RPC.send_rpc(
                                                  "updateUserCryptoBalanceRequest",
                                                  updateUserCryptoBalanceObject
                                              ).then(
                                                  updateUserCryptoBalanceRequestObject =>
                                                      doSend(updateUserCryptoBalanceRequestObject)
                                              );

                                              // Validate txid
                                              let withdrawTxCounter=1;
                                              (async function validateWithdrawTxidInBlockchain() {
                                                  await localbitcoinplusplus.actions.delay(180000); 
                                                  const validate_withdraw_txid = await helper_functions
                                                  .ajaxGet(`${explorer}/api/tx/${resp_txid}`);
                                                  console.log(validate_withdraw_txid);
                                                  if(typeof validate_withdraw_txid=="object"
                                                  && validate_withdraw_txid.txid===resp_txid
                                                  && validate_withdraw_txid.confirmations>0) {

                                                      const deposited_utxos_latest_status = 
                                                      await RM_WALLET.refresh_reserved_crypto_balances(
                                                          withdraw_res.trader_flo_address, 
                                                          withdraw_res.utxo_addr    
                                                      );

                                                      // Send the resp to backups
                                                      RM_RPC.send_rpc(
                                                          "update_deposited_crypto_instance",
                                                          {
                                                              deposit_data: deposited_utxos_latest_status,
                                                              db_inst: params.db_inst,
                                                              trader_flo_address:
                                                              withdraw_res.trader_flo_address
                                                          }
                                                      ).then(delRequestObject =>
                                                          doSend(delRequestObject)
                                                      );

                                                      removeinDB("withdraw_btc", withdraw_id);

                                                      RM_RPC.send_rpc(
                                                          "delete_deposited_crypto_instance",
                                                          {
                                                              withdraw_btc_id: withdraw_id,
                                                              db_inst: params.db_inst,
                                                              trader_flo_address:
                                                              withdraw_res.trader_flo_address
                                                          }
                                                      ).then(delRequestObject =>
                                                          doSend(delRequestObject)
                                                      );

                                                  } else if(n<=20) {
                                                      validateWithdrawTxidInBlockchain();
                                                      withdrawTxCounter++;
                                                  } else {
                                                      throw new Error(`Txid ${resp_txid} not registered in ${withdraw_res.product} Blockhain`);
                                                  }
                                              })();

                                          } else {
                                              console.log(res);
                                              throw new Errror(`ERROR: Failed to make transaction.`);
                                          }
                                      } else {
                                          console.error("Waithdraw transaction is not an object");
                                          //throw new Errror(`ERROR: Failed to make transaction.`);
                                      }

                                  } catch (error) {
                                      console.warn(error);
                                      err_response = {
                                          user_flo_addr: params.trader_flo_address,
                                          msg: `Withdraw of crypto failed. Network issue:- Please try again after 30 minutes.`
                                      }
                                      reactor.dispatchEvent('message_for_user', err_response);

                                      // update deposits status back to 2 in db
                                      for (const deposited_utxo_idx in withdraw_res.utxo_addr) {
                                          let deposited_utxo_addr = withdraw_res.utxo_addr[deposited_utxo_idx];
                                          const deposit_arr_resp = await readDBbyIndex(
                                              "deposit",
                                              "btc_address",
                                              deposited_utxo_addr
                                          )
                                          if (typeof deposit_arr_resp[0] == "object") {
                                              deposit_arr_resp[0].status = 2; // UTXO ready to be used again
                                              await updateinDB(
                                                  "deposit",
                                                  deposit_arr_resp[0],
                                                  deposit_arr_resp[0].id
                                              );
                                          }
                                      }
                                      await removeinDB("withdraw_btc", withdraw_id);

                                  }
                              }
                          );
                      }

                  } catch (error) {

                      const withdraw_res = await readDB("withdraw_btc", params.withdraw_id);
                      for (const deposited_utxo_idx in withdraw_res.utxo_addr) {
                          let deposited_utxo_addr = withdraw_res.utxo_addr[deposited_utxo_idx];
                          // update deposits status back to 2 in db
                          const deposit_arr_resp = await readDBbyIndex(
                              "deposit",
                              "btc_address",
                              deposited_utxo_addr
                          )
                          if (typeof deposit_arr_resp[0] == "object") {
                              deposit_arr_resp[0].status = 2; // UTXO ready to be used again
                              updateinDB(
                                  "deposit",
                                  deposit_arr_resp[0],
                                  deposit_arr_resp[0].id
                              );
                          }
                      }
                      removeinDB("withdraw_btc", params.withdraw_id);
                      // Revert user balance
                      updateinDB("crypto_balances", 
                      withdrawer_crypto_bal_response_before_update, 
                      withdrawer_crypto_bal_response_before_update.id,
                      false,
                      false
                      );

                      throw new Error(error);
                  }
              }
          );
          break;

        case "superNodeSignedAddUserPublicData":
          if (
            typeof params == "object" &&
            typeof params.data == "object"
          ) {
            RM_RPC.filter_legit_requests(
              params.data.trader_flo_address,
              function(is_valid_request) {
                if (is_valid_request !== true) return false;

                if (
                  typeof params.su_pubKey == "string" &&
                  localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                    params.su_pubKey
                  )
                ) {
                  let res_data_obj = {
                    trader_flo_address: params.data.trader_flo_address,
                    trader_flo_pubKey: params.data.trader_flo_pubKey,
                    trader_reputation: params.data.trader_reputation,
                    timestamp: params.data.timestamp
                  };
                  let res_data_hash = Crypto.SHA256(
                    JSON.stringify(res_data_obj)
                  );
                  let res_data_verification = RM_WALLET.verify(
                    res_data_hash,
                    params.sign,
                    params.su_pubKey
                  );
                  if (
                    res_data_verification == true &&
                    res_data_hash == params.data_hash
                  ) {
                    addDB("userPublicData", params.data);
                    return true;
                  }
                }
              }
            );
          }
          break;

        default:
          showMessage("WARNING: Unknown method called for execution.");
          break;
      }
    }
    return request.toString(); // return to client
  },

  async backup_receive_rpc_response(request) {
    var request = JSON.parse(request);
    var params = request.params[0];
    var method = request.method;

    if (typeof params == "object" && typeof method == "string") {
      if (
        typeof params.receiver_flo_address == "string" &&
        params.receiver_flo_address.length > 0
      ) {
        if (
          params.receiver_flo_address !==
          localbitcoinplusplus.wallets.my_local_flo_address
        )
          return;
      }

      let recvr_flo_id =
        params.receiver_flo_address || request.globalParams.receiverFloId;
      if (
        typeof recvr_flo_id == "string" &&
        recvr_flo_id.length > 0 &&
        recvr_flo_id !== localbitcoinplusplus.wallets.my_local_flo_address
      )
        return;

      const RM_WALLET = new localbitcoinplusplus.wallets();
      const RM_TRADE = new localbitcoinplusplus.trade();
      const RM_RPC = new localbitcoinplusplus.rpc();

      let respective_trader_id = "";
      if (typeof params.trader_flo_address == "string")
        respective_trader_id = params.trader_flo_address;
      request.response = {};
      let err_msg;

      if (typeof params.trader_flo_address !== "string") return;
      const my_closest_su_list = await localbitcoinplusplus.kademlia.determineClosestSupernode(
        params.trader_flo_address
      );
      const primarySupernodeOfThisUser = my_closest_su_list[0].data.id;

      if (method == "sync_with_supernode") {
        RM_RPC.filter_legit_backup_requests(
          params.trader_flo_address,
          function(is_valid_request) {
            if (
              is_valid_request === true &&
              params.job == "SYNC_MY_LOCAL_DB_WITH_SUPERNODE_DB" &&
              params.trader_flo_address.length > 0
            ) {
              const tableArray = [
                "deposit",
                "cash_deposits",
                "withdraw_cash",
                "withdraw_btc",
                "crypto_balances",
                "cash_balances",
                "buyOrders",
                "sellOrders"
              ];

              localbitcoinplusplus.actions
                .get_sharable_db_data_for_single_user(
                  params.trader_flo_address,  
                  tableArray,
                  primarySupernodeOfThisUser
                )
                .then(function(su_db_data) {
                  if (typeof su_db_data == "object") {

                      /*The below check for stale data should only run by backup supernode 
                      serving other's users. 
                      Primary supernode is assumed to have the latest data of user always. 
                      And hence this check should not be performed by Primary supernode. It 
                      should always send the sync data response to user. */

                      if(typeof params.user_crypto_balances == "object" 
                      && params.user_crypto_balances.length>0
                      && typeof params.user_crypto_balances == "object" 
                      && params.user_crypto_balances.length>0) {

                          let user_stale_crypto_data_in_server=true;
                          let user_stale_cash_data_in_server=true;

                          user_stale_crypto_data_in_server = su_db_data["crypto_balances"].filter(server_data=>{
                              return params.user_crypto_balances.some(function(user_data){
                                  if(server_data.id === user_data.id) {
                                      return (server_data.crypto_balance!=user_data.crypto_balance
                                          || server_data.vectorClock<user_data.vectorClock
                                          || server_data.timestamp<user_data.timestamp)
                                  }
                              });
                          });

                          user_stale_cash_data_in_server = su_db_data["cash_balances"].filter(server_data=>{
                              return params.user_cash_balances.some(function(user_data){
                                  if(server_data.id === user_data.id) {
                                      return (server_data.cash_balance!=user_data.cash_balance
                                          || server_data.vectorClock<user_data.vectorClock
                                          || server_data.timestamp<user_data.timestamp)
                                  }
                              });
                          });

                          if(user_stale_crypto_data_in_server.length 
                          || user_stale_cash_data_in_server.length) {

                              // Server has old data, don't serve the user
                              localbitcoinplusplus.actions.blacklist_flo_id(params.trader_flo_address);
                              
                              let service_denied_response = {};
                              
                              service_denied_response.msg = `Supernode ${localbitcoinplusplus.wallets.my_local_flo_address} denied access. 
                              The server does not have latest data. Please retry after sometime.`;
                              
                              service_denied_response.trader_flo_address = params.trader_flo_address;
                              service_denied_response.receiver_flo_address = params.trader_flo_address;
                              RM_RPC.send_rpc
                                  .call(this, "service_denied", service_denied_response)
                                  .then(server_response =>
                                  doSend(server_response)
                                  );                                    

                              return false;

                          } else {
                              localbitcoinplusplus.actions.whitelist_flo_id(params.trader_flo_address);
                              su_db_data.trader_flo_address = params.trader_flo_address;
                              su_db_data.receiver_flo_address = params.trader_flo_address;
                              RM_RPC.send_rpc
                                  .call(this, "server_sync_response", su_db_data)
                                  .then(server_sync_response =>
                                  doSend(server_sync_response)
                                  );

                              return false;    
                          }    
                      } else if(
                          params.user_cash_balances.length==0
                          || params.user_crypto_balances.length==0
                          || su_db_data["crypto_balances"].length==0
                          || su_db_data["cash_balances"].length==0
                      ) {
                          // If either of user or server has no data of the user, deny service
                            // Server has old data, don't serve the user
                            localbitcoinplusplus.actions.blacklist_flo_id(params.trader_flo_address);
                              
                              let service_denied_response = {};
                              
                              service_denied_response.msg = `Supernode ${localbitcoinplusplus.wallets.my_local_flo_address} denied access. 
                              The server does not have latest data. Please retry after sometime.`;
                              
                              service_denied_response.trader_flo_address = params.trader_flo_address;
                              service_denied_response.receiver_flo_address = params.trader_flo_address;
                              RM_RPC.send_rpc
                                  .call(this, "service_denied", service_denied_response)
                                  .then(server_response =>
                                  doSend(server_response)
                                  );                                    

                              return false;
                      }
                  }
                });
            }

              // Refresh reserved cryptos balances if more than a day has passed
              let today = new Date().getTime();
              localbitcoinplusplus.kademlia.determineClosestSupernode(params.trader_flo_address)
              .then(su=>{
                  let last_updated = localStorage.getItem(`refresh_reserved_cryptos_prices_time_${su[0].data.id}`);
                  let backup_db = localbitcoinplusplus.newBackupDatabase.db[su[0].data.id];
                  backup_db.backup_readDBbyIndex("withdraw_btc", 'trader_flo_address', params.trader_flo_address).then(withdraw_response=>{
                      for (const withdraw_res of withdraw_response) {
                          if(typeof withdraw_res=="object") {                        
                              if(today-withdraw_res.timestamp>60 * 60 * 1000) {
                                  backup_db.backup_removeinDB("withdraw_btc", withdraw_res.id);
                              }
                          }
                      }
                  });
                  
                  if(last_updated==null
                  || (today - last_updated > (24 * 60 * 60 * 1000))) {                            
                      limit_function_calls(async function() {
                          const RM_WALLET = new localbitcoinplusplus.wallets;
                          RM_WALLET.refresh_reserved_crypto_balances(params.trader_flo_address);
                      }, 600000);
                  }
              });

              // And delete redundant data as well
              let timestamp_for_last_deletion_of_db_stale_data = localStorage.getItem(`timestamp_for_last_deletion_of_db_stale_data`);
              if(timestamp_for_last_deletion_of_db_stale_data=null
              || (today - timestamp_for_last_deletion_of_db_stale_data > (24 * 60 * 60 * 1000))) {
                  limit_function_calls(async function() {
                      await reactor.dispatchEvent("remove_temp_data_from_db");
                  }, 600000); // Its expected in 10 mins all deletion should be complete.   
              }

          }
        );
        return;
      }

      let backup_server_db_instance;
      if (method !== "retrieve_shamirs_secret_btc_pvtkey") {
        if (
          typeof localbitcoinplusplus.newBackupDatabase.db[
            primarySupernodeOfThisUser
          ] == "object"
        ) {
          backup_server_db_instance =
            localbitcoinplusplus.newBackupDatabase.db[
              primarySupernodeOfThisUser
            ];
        }

        if (typeof backup_server_db_instance !== "object") {
          let backup_db_error_msg = `WARNING: Unknown DB instance. DB Backup failed.`;
          showMessage(backup_db_error_msg);
          throw new Error(backup_db_error_msg);
        }

        RM_RPC.filter_legit_backup_requests(
          params.trader_flo_address,
          async function(is_valid_request) {
            if (is_valid_request !== true) return false;

            try {
              // CHECK HERE IF USER IS INDULGED IN ANY MORE TRADE. IF TRUE RETURN ERROR
              await backup_server_db_instance
                .backup_readAllDB("deposit")
                .then(function(res) {
                  if (typeof res == "object" && res.length > 0) {
                    let canUserTrade = res.filter(function(user) {
                      return (
                        respective_trader_id == user.trader_flo_address &&
                        user.status == 1
                      );
                    });
                    if (canUserTrade.includes(true)) {
                      request.response = `Trader id ${respective_trader_id} is not clear for trade currently.
                                          You must finish your previous pending orders to qualify again to trade.`;

                      const RM_RPC = new localbitcoinplusplus.rpc();
                      RM_RPC.send_rpc
                        .call(this, "supernode_message", {
                          trader_flo_address: respective_trader_id,
                          receiver_flo_address: respective_trader_id,
                          server_msg: request.response
                        })
                        .then(server_response => doSend(server_response));

                      showMessage(request.response);
                      throw new Error(request.response);
                      return false;
                    }
                  }
                });
            } catch (error) {
              throw new Error(error);
            }
          }
        );
      }

      let is_user_blacklisted = localbitcoinplusplus.actions.is_user_blacklisted(params.trader_flo_address);
      if(is_user_blacklisted===true) {
          console.warn(`Flo Id ${params.trader_flo_address} is blacklisted.`);
          return false;
      }

      switch (method) {
        case "trade_buy":
          RM_RPC.filter_legit_backup_requests(
            params.trader_flo_address,
            async function(is_valid_request) {
              if (is_valid_request !== true) return false;
              await RM_TRADE.resolve_current_crypto_price_in_fiat(
                params.product,
                params.currency
              );
              const get_requester_primary_supernode = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                params.trader_flo_address
              );
              const primarySupernodeForThisUser =
                get_requester_primary_supernode[0].data.id;
              let trade_margin = await RM_TRADE.getAssetTradeAndWithdrawLimit(
                params.trader_flo_address,
                params.product,
                params.currency,
                primarySupernodeForThisUser
              );
              if (
                typeof trade_margin.remaining_crypto_credit == "number" &&
                typeof trade_margin.remaining_fiat_credit == "number"
              ) {
                if (
                  trade_margin.remaining_fiat_credit > 0 &&
                  trade_margin.remaining_fiat_credit >= params.buy_price
                ) {

                  request.params.receiver_flo_address = params.trader_flo_address;
                  request.response = RM_TRADE.trade_buy.call(
                    this,
                    ...request.params,
                    function(supernode_signed_res) {
                      // supernode_signed_res.receiver_flo_address =
                      //   params.trader_flo_address;
                      if (typeof supernode_signed_res == "object") {
                        RM_RPC.send_rpc
                          .call(
                            this,
                            "trade_buy_request_response",
                            supernode_signed_res
                          )
                          .then(buy_request_response =>
                            doSend(buy_request_response)
                          );

                        // Init trading
                        RM_TRADE.createTradePipes(
                          params.currency,
                          primarySupernodeForThisUser
                        );
                        return true;
                      }
                    },
                    primarySupernodeForThisUser
                  );
                } else {
                  err_msg = `Trade Margin Check Failed: You can only trade upto ${params.currency} ${trade_margin.remaining_fiat_credit}.`;
                  err_response = {
                      user_flo_addr: params.trader_flo_address,
                      msg: err_msg
                  }
                  reactor.dispatchEvent('message_for_user', err_response);
                  throw new Error(err_msg);
                }
              } else {
                err_msg = "Invalid trade margin figures.";
                err_response = {
                      user_flo_addr: params.trader_flo_address,
                      msg: err_msg
                  }
                  reactor.dispatchEvent('message_for_user', err_response);
                throw new Error(err_msg);
              }
            }
          );
          break;
        case "trade_sell":
          RM_RPC.filter_legit_backup_requests(
            params.trader_flo_address,
            async function(is_valid_request) {
              if (is_valid_request !== true) return false;
              await RM_TRADE.resolve_current_crypto_price_in_fiat(
                params.product,
                params.currency
              );
              const get_requester_primary_supernode = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                params.trader_flo_address
              );
              const primarySupernodeForThisUser = get_requester_primary_supernode[0].data.id;
              let trade_margin = await RM_TRADE.getAssetTradeAndWithdrawLimit(
                params.trader_flo_address,
                params.product,
                params.currency,
                primarySupernodeForThisUser
              );
              if (
                typeof trade_margin.remaining_crypto_credit == "number" &&
                typeof trade_margin.remaining_fiat_credit == "number"
              ) {
                let eqCrypto = RM_TRADE.calculateCryptoEquivalentOfCash(
                  params.buy_price,
                  params.currency,
                  params.product
                );

                if (
                  trade_margin.remaining_crypto_credit > 0 &&
                  trade_margin.remaining_crypto_credit >= eqCrypto
                ) {
                  request.params.receiver_flo_address = params.trader_flo_address;  
                  request.response = RM_TRADE.trade_sell.call(
                    this,
                    ...request.params,
                    function(supernode_signed_res) {
                      if (typeof supernode_signed_res == "object") {
                      //   supernode_signed_res.receiver_flo_address =
                      //     params.trader_flo_address;
                        RM_RPC.send_rpc
                          .call(
                            this,
                            "trade_sell_request_response",
                            supernode_signed_res
                          )
                          .then(sell_request_response =>
                            doSend(sell_request_response)
                          );

                        // Init trading
                        RM_TRADE.createTradePipes(
                          params.currency,
                          primarySupernodeForThisUser
                        );
                        return true;
                      }
                    },
                    primarySupernodeForThisUser
                  );
                } else {
                  err_msg = `WARNING: Trade Margin Check Failed: 
                                  You can only trade upto ${params.currency} ${trade_margin.remaining_fiat_credit}.`;

                  err_response = {
                      user_flo_addr: params.trader_flo_address,
                      msg: err_msg
                  }
                  reactor.dispatchEvent('message_for_user', err_response);
                  throw new Error(err_msg);
                }
              } else {
                err_msg = "Invalid trade margin figures.";
                err_response = {
                      user_flo_addr: params.trader_flo_address,
                      msg: err_msg
                  }
                  reactor.dispatchEvent('message_for_user', err_response);
                throw new Error(err_msg);
              }
            }
          );
          break;
        case "sync_with_supernode":
          // already processed above
          break;
        case "deposit_asset_request":
          RM_RPC.filter_legit_backup_requests(
            params.trader_flo_address,
            async function(is_valid_request) {
              if (is_valid_request !== true) return false;

              // This code will only run for supernodes
              if (
                typeof params.product !== "undefined" &&
                (localbitcoinplusplus.master_configurations.tradableAsset1.includes(
                  params.product
                ) ||
                  localbitcoinplusplus.master_configurations.tradableAsset2.includes(
                    params.product
                  )) &&
                typeof params.depositing_amount !== "undefined" &&
                localbitcoinplusplus.master_configurations.tradableAsset2.includes(
                  params.currency
                ) &&
                typeof params.trader_flo_address == "string" &&
                params.trader_flo_address.length > 0
              ) {
                  const requester_public_key = request.nodePubKey;
                    if (
                      requester_public_key == undefined ||
                      requester_public_key == null ||
                      requester_public_key.length < 1
                    ) {
                      err_msg = "Failed to get your public key. Please refresh and try again.";
                      err_response = {
                          user_flo_addr: params.trader_flo_address,
                          msg: err_msg
                      }
                      reactor.dispatchEvent('message_for_user', err_response);
                      throw new Error(err_msg);
                    }
                    params.depositor_public_key = requester_public_key;

                await RM_TRADE.resolve_current_crypto_price_in_fiat(
                  params.product,
                  params.currency
                );

                if (
                  localbitcoinplusplus.master_configurations.tradableAsset1.includes(
                    params.product
                  )
                ) {
                  let generate_btc_keys_for_requester = RM_WALLET.generateFloKeys(
                    null,
                    params.product
                  );

                  console.table(generate_btc_keys_for_requester);

                  params.id = helper_functions.unique_id();
                  params.status = 1;
                  params.btc_address =
                    generate_btc_keys_for_requester.address;

                  params.bitcoinToBePaid = helper_functions.truncateDecimals(params.depositing_amount);

                  let receivedTradeInfo = { ...params };

                  if (
                    typeof localbitcoinplusplus.wallets
                      .MY_SUPERNODE_PRIVATE_KEY == "undefined"
                  ) {
                    err_msg =
                      "Failed to determine Super node signing key.";
                    showMessage(err_msg);
                    throw new Error(err_msg);
                  }

                  readDB("localbitcoinUser", "00-01").then(async function(
                    su_data
                  ) {
                    if (
                      typeof su_data == "object" &&
                      typeof su_data.myLocalFLOPublicKey == "string" &&
                      su_data.myLocalFLOPublicKey.length > 0 &&
                      localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                        su_data.myLocalFLOPublicKey
                      )
                    ) {
                      let receivedTradeInfoHash = Crypto.SHA256(
                        JSON.stringify(receivedTradeInfo)
                      );

                      receivedTradeInfo["depositDataHash"] = receivedTradeInfoHash;
                      receivedTradeInfo["order_validator_sign"] = RM_WALLET.sign(
                        receivedTradeInfoHash,
                        localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
                      );
                      receivedTradeInfo["order_validator_public_key"] = su_data.myLocalFLOPublicKey;

                      try {
                        const this_btc_pvt_key =
                          generate_btc_keys_for_requester.privateKeyWIF;
                        const this_btc_tx_key = Crypto.util.randomBytes(
                          64
                        );
                        const this_btc_pvt_key_shamirs_secret = RM_WALLET.createShamirsSecretShares(
                          this_btc_pvt_key,
                          10,
                          5
                        );
                        if (
                          typeof this_btc_pvt_key_shamirs_secret ==
                            "object" &&
                          this_btc_pvt_key_shamirs_secret.length > 0
                        ) {
                          const deposit_res = await backup_server_db_instance.backup_addDB(
                            "deposit",
                            receivedTradeInfo
                          );

                          // Send the address to the requester
                          let deposit_response_object = {
                            error: false,
                            method: "deposit_asset_request_response",
                            msg: `Please send ${params.product} ${params.bitcoinToBePaid} to the following addres: ${generate_btc_keys_for_requester.address}`,
                            data: deposit_res
                          };
                          deposit_response_object.receiver_flo_address =
                            params.trader_flo_address;
                          deposit_response_object.trader_flo_address =
                            params.trader_flo_address;

                          RM_RPC.send_rpc
                            .call(
                              this,
                              "deposit_asset_request_response",
                              deposit_response_object
                            )
                            .then(deposit_request_response =>
                              doSend(deposit_request_response)
                            );

                          let this_btc_pvt_key_shamirs_secret_array = this_btc_pvt_key_shamirs_secret.map(
                            chunks => {
                              let chunk_ids = Crypto.util.bytesToHex(
                                Crypto.util.randomBytes(64)
                              );
                              let chunk_array = {
                                id: chunk_ids,
                                privateKeyChunks: Crypto.AES.encrypt(
                                  chunks,
                                  this_btc_tx_key
                                ),
                                trader_flo_address:
                                  params.trader_flo_address
                              };
                              return chunk_array;
                            }
                          );

                          // Send chunks of private keys to other supernodes
                          this_btc_pvt_key_shamirs_secret_array.map(
                            shares => {
                              RM_RPC.send_rpc
                                .call(
                                  this,
                                  "store_shamirs_secret_pvtkey_shares",
                                  shares
                                )
                                .then(store_pvtkey_req =>
                                  doSend(store_pvtkey_req)
                                );
                            }
                          );

                          if (
                            typeof localbitcoinplusplus.wallets
                              .my_local_flo_address == "string" &&
                            typeof localbitcoinplusplus.wallets
                              .my_local_flo_public_key == "string" &&
                            typeof localbitcoinplusplus
                              .master_configurations.supernodesPubKeys ==
                              "object" &&
                            localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                              localbitcoinplusplus.wallets
                                .my_local_flo_public_key
                            )
                          ) {
                            try {
                              let this_btc_pvt_key_shamirs_secret__id_array = this_btc_pvt_key_shamirs_secret_array.map(
                                i => i.id
                              );
                              let btc_private_key_shamirs_id = this_btc_pvt_key_shamirs_secret__id_array;
                              let supernode_transaction_key = localbitcoinplusplus.actions.master_encrypt(this_btc_tx_key);
                              const system_btc_reserves_private_keys_object = {
                                id: helper_functions.unique_id(),
                                product: params.product,
                                btc_address: params.btc_address,
                                trader_flo_address: params.trader_flo_address,
                                btc_private_key_shamirs_id: btc_private_key_shamirs_id,
                                supernode_transaction_key: supernode_transaction_key
                              };
                              backup_server_db_instance
                                .backup_addDB(
                                  "system_btc_reserves_private_keys",
                                  system_btc_reserves_private_keys_object
                                )
                                .then(pk_res => {
                                  // Send it to neighbor nodes to store as backup
                                  reactor.dispatchEvent(
                                    "store_backup_crypto_pk_object",
                                    pk_res
                                  );
                                });
                            } catch (error) {
                              throw new Error(error);
                            }
                          }
                          return true;
                        }
                      } catch (error) {
                        throw new Error(error);
                      }

                      return true;
                    }
                  });

                  return false;
                }
              } else {
                err_msg = "deposit asset request error";
                showMessage(err_msg);
                throw new Error(err_msg);
              }
            }
          );
          break;
        case "deposit_cash_request":

          RM_RPC.filter_legit_backup_requests(
            params.trader_flo_address,
            async function(is_valid_request) {
              if (is_valid_request !== true) return false;

              // This code will only run for supernodes
              if (
                  typeof params.depositing_amount !== "undefined" &&
                  localbitcoinplusplus.master_configurations.tradableAsset2.includes(
                      params.currency
                  ) &&
                  typeof params.trader_flo_address == "string" &&
                  params.trader_flo_address.length > 0 &&
                  typeof params.user_upi == "string" &&
                  params.user_upi.length > 0
              ) {
                  params.id = helper_functions.unique_id();
                  params.status = 1;
                  let receivedTradeInfo = { ...params };

                  const su_data = await readDB("localbitcoinUser", "00-01");

                  if (
                      typeof su_data == "object" &&
                      typeof su_data.myLocalFLOPublicKey == "string" &&
                      su_data.myLocalFLOPublicKey.length > 0 &&
                      localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                          su_data.myLocalFLOPublicKey
                      )
                  ) {
                      let receivedTradeInfoHash = Crypto.SHA256(
                          JSON.stringify(receivedTradeInfo)
                      );

                      receivedTradeInfo["depositDataHash"] = receivedTradeInfoHash;
                      receivedTradeInfo["order_validator_sign"] = RM_WALLET.sign(
                          receivedTradeInfoHash,
                          localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
                      );
                      receivedTradeInfo["order_validator_public_key"] = su_data.myLocalFLOPublicKey;

                      try {
                          let cashiersList = Object.keys(localbitcoinplusplus.CashierStatusObject)
                              .filter(f=>localbitcoinplusplus.CashierStatusObject[f].currencies.includes(params.currency));
                          if(cashiersList.length<1) throw new Error('Unknown currency requested. No cashier found.');  
                          let liveCashiersList = cashiersList.filter(f=>localbitcoinplusplus.CashierStatusObject[f].is_live===true);
                          if(liveCashiersList.length>0) {
                              cashiersList = liveCashiersList;
                          }
                          const getAPaymentHandler = randomNoRepeats(cashiersList)();

                          if (!cashiersPubKeysArray.includes(
                              getAPaymentHandler
                          )) {
                              err_msg = `ERROR: ${getAPaymentHandler} is not recognized as any Cashier's Public Key.`;
                              err_response = {
                                  user_flo_addr: params.trader_flo_address,
                                  msg: err_msg
                              }
                              reactor.dispatchEvent('message_for_user', err_response);

                              throw new Error(err_msg);
                          }

                          receivedTradeInfo.cashier_upi = cashiersList[getAPaymentHandler].upi;
                          receivedTradeInfo.cashier_pubKey = getAPaymentHandler;
                          const receivedTradeInfoResp = await backup_server_db_instance
                              .backup_addDB("cash_deposits", receivedTradeInfo);

                          let deposit_response_object = {
                              error: false,
                              method: "deposit_cash_request_response",
                              msg: receivedTradeInfo.cashier_upi,
                              data: receivedTradeInfoResp,
                              receiver_flo_address:
                                  receivedTradeInfo.trader_flo_address,
                              trader_flo_address:
                                  receivedTradeInfo.trader_flo_address
                          };

                          RM_RPC.send_rpc
                              .call(
                                  this,
                                  "deposit_cash_request_response",
                                  deposit_response_object
                              )
                              .then(deposit_request_response =>
                                  doSend(deposit_request_response)
                              );

                          // Delete the request after 24 hours
                          let deposit_cash_order_life = JSON.parse(localbitcoinplusplus.master_configurations.ordersLife);
                          localbitcoinplusplus.actions.delay(deposit_cash_order_life.cashDeposit).then(function () {
                              backup_server_db_instance
                                  .backup_removeinDB("cash_deposits", receivedTradeInfo.id);
                          });

                      } catch (e) {
                          console.error(e);
                      }
                  }
              }
              return true;        
            }
          );
          break;
        case "withdraw_request_method":
          RM_RPC.filter_legit_backup_requests(
            params.trader_flo_address,
            async function(is_valid_request) {
              if (is_valid_request !== true) return false;

              if (
                typeof params.product !== "undefined" &&
                ((localbitcoinplusplus.master_configurations.tradableAsset1.includes(
                  params.product
                ) ||
                  localbitcoinplusplus.master_configurations.tradableAsset2.includes(
                    params.product
                  )) &&
                  localbitcoinplusplus.master_configurations.tradableAsset2.includes(
                    params.currency
                  )) &&
                typeof params.withdrawing_amount !== "undefined" &&
                typeof localbitcoinplusplus.master_configurations
                  .validTradingAmount !== "undefined" &&
                typeof params.trader_flo_address == "string" &&
                params.trader_flo_address.length > 0 &&
                typeof params.receivinAddress == "string" &&
                params.receivinAddress.length > 0 &&
                typeof params.currency == "string"
              ) {
                const get_requester_primary_supernode = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                  params.trader_flo_address
                );
                const primarySupernodeForThisUser =
                  get_requester_primary_supernode[0].data.id;

                await RM_TRADE.resolve_current_crypto_price_in_fiat(
                  params.product,
                  params.currency
                );
                let trade_margin = await RM_TRADE.getAssetTradeAndWithdrawLimit(
                  params.trader_flo_address,
                  params.product,
                  params.currency,
                  primarySupernodeForThisUser
                );

                if (
                  localbitcoinplusplus.master_configurations.tradableAsset1.includes(
                    params.product
                  )
                ) {
                  if (
                    trade_margin.remaining_crypto_credit < 0 ||
                    params.withdrawing_amount <= 0 ||
                    trade_margin.remaining_crypto_credit <
                      params.withdrawing_amount
                  ) {
                    err_msg = `Insufficient ${params.product} balance to withdraw. You can withdraw upto: ${params.product} ${trade_margin.remaining_crypto_credit}`;
                    err_response = {
                          user_flo_addr: params.trader_flo_address,
                          msg: err_msg
                      }
                      reactor.dispatchEvent('message_for_user', err_response);
                    throw new Error(err_msg);
                  }
                } else if(localbitcoinplusplus.master_configurations.tradableAsset2.includes(
                    params.product)) {
                  if (
                    trade_margin.remaining_fiat_credit < 0 ||
                    params.withdrawing_amount <= 0 ||
                    trade_margin.remaining_fiat_credit <
                      params.withdrawing_amount
                  ) {
                    err_msg = `Insufficient cash balance to withdraw. You can withdraw upto: ${params.currency} ${trade_margin.remaining_fiat_credit}`;
                    err_response = {
                          user_flo_addr: params.trader_flo_address,
                          msg: err_msg
                      }
                      reactor.dispatchEvent('message_for_user', err_response);
                    throw new Error(err_msg);
                  }
                } else return;

                params.id = helper_functions.unique_id();
                params.status = 1;
                if (
                  localbitcoinplusplus.master_configurations.tradableAsset1.includes(
                    params.product
                  )
                ) {
                  try {
                        
                        const eqBTC = helper_functions.truncateDecimals(params.withdrawing_amount);

                        if (
                        trade_margin.remaining_crypto_credit < 0 ||
                        eqBTC <= 0 ||
                        trade_margin.remaining_crypto_credit <
                            eqBTC
                        ) {
                        err_msg = `Insufficient crypto balance to withdraw. You can withdraw upto: ${params.product} ${trade_margin.remaining_crypto_credit}`;
                        err_response = {
                                user_flo_addr: params.trader_flo_address,
                                msg: err_msg
                            }
                            reactor.dispatchEvent('message_for_user', err_response);
                            throw new Error(err_msg);
                        }

                        // Check how much cryptos the user can withdraw
                        let withdrawer_btc_id = `${params.trader_flo_address}_${params.product}`;
                        backup_server_db_instance
                          .backup_readDB("crypto_balances", withdrawer_btc_id).then(
                        async function(btc_balance_res) {
                            if (
                            typeof btc_balance_res == "object" &&
                            typeof btc_balance_res.trader_flo_address ==
                                "string" &&
                            btc_balance_res.crypto_balance > 0
                            ) {
                            let withdrawer_btc_balance = helper_functions.truncateDecimals(
                                btc_balance_res.crypto_balance
                            );

                            let withdrawer_new_btc_balance =
                                withdrawer_btc_balance - eqBTC;
                            if (
                                withdrawer_new_btc_balance >= 0 &&
                                withdrawer_btc_balance > 0 &&
                                eqBTC > 0 &&
                                eqBTC <= withdrawer_btc_balance
                            ) {
                                // Now details of Bitcoins can be sent to withdrawer

                                let sum_total_btc = 0;
                                let valid_utxo_list = [];
                                let receiverBTCAddress = params.receivinAddress.trim();

                                const deposit_list = await backup_server_db_instance
                                      .backup_readAllDB("deposit");
                                if (
                                    typeof deposit_list == "object" &&
                                    deposit_list.length > 0
                                ) {
                                    
                                    for (const dl in deposit_list) {
                                    if (deposit_list.hasOwnProperty(dl)) {
                                        const deposit_dl = deposit_list[dl];
                                        if((
                                            deposit_dl.status == 2 &&
                                            localbitcoinplusplus.master_configurations.tradableAsset1.includes(
                                                deposit_dl.product
                                            ) &&
                                            params.product == deposit_dl.product
                                        )) {
                                            // Deposited Bitcoin is under process
                                            deposit_dl.status = 3;
                                            await backup_server_db_instance
                                              .backup_updateinDB(
                                                "deposit",
                                                deposit_dl,
                                                deposit_dl.id
                                            );
                                            sum_total_btc += helper_functions.truncateDecimals(
                                                deposit_dl.bitcoinToBePaid
                                            );

                                            if (eqBTC <= sum_total_btc) {
                                                valid_utxo_list.push(deposit_dl);
                                                break;
                                            } else {
                                                valid_utxo_list.push(deposit_dl);
                                            }
                                        }
                                    }
                                    }
                                    let deposited_utxo_addr_list = {};
                                    let idx = 0;
                                    for (const deposit_arr of valid_utxo_list) {
                                        
                                        if(idx==valid_utxo_list.length-1) {
                                            deposited_utxo_addr_list[idx]=deposit_arr.btc_address;
                                            // save the address and id in a table
                                            let withdraw_id = helper_functions.unique_id();
                                            const withdraw_btc_order_object = {
                                                id: withdraw_id,
                                                trader_flo_address:
                                                    params.trader_flo_address,
                                                utxo_addr: deposited_utxo_addr_list,
                                                receiverBTCAddress:
                                                    params.receivinAddress,
                                                receivingBTC: eqBTC,
                                                currency: params.currency,
                                                product: params.product,
                                                timestamp: +new Date()
                                            };
                                            
                                            await backup_server_db_instance
                                              .backup_addDB("withdraw_btc", withdraw_btc_order_object);
                                            
                                            // Delete the withdraw crypto order after 30 mins anyway
                                            let withdraw_order_life = JSON.parse(localbitcoinplusplus.master_configurations.ordersLife);
                                            localbitcoinplusplus.actions.delay(withdraw_order_life.cryptoWithdraw)
                                            .then(()=>{
                                              backup_server_db_instance
                                                  .backup_removeinDB("withdraw_btc", withdraw_id)
                                            });

                                            // doSend btc_private_key_shamirs_id from system_btc_reserves_private_keys
                                            for (const depositedutxoaddr in deposited_utxo_addr_list) {
                                                if (deposited_utxo_addr_list.hasOwnProperty(depositedutxoaddr)) {
                                                    const vbl = deposited_utxo_addr_list[depositedutxoaddr];
                                                    const res = await backup_server_db_instance
                                                      .backup_readDBbyIndex(
                                                        "system_btc_reserves_private_keys",
                                                        "btc_address",
                                                        vbl
                                                    );
                                                    if(typeof res!=="object" || typeof res[0].id!=="string") {
                                                        deposit_arr.status = 2;
                                                            await backup_server_db_instance
                                                            .backup_updateinDB(
                                                            "deposit",
                                                            deposit_arr,
                                                            deposit_arr.id,
                                                            false,
                                                            false
                                                        );
                                                        return;
                                                    }
                                                    let retrieve_pvtkey_req_id = res[0].id;
                                                    res[0].btc_private_key_shamirs_id.map(
                                                    bpks => {
                                                        RM_RPC.send_rpc
                                                        .call(
                                                            this,
                                                            "send_back_shamirs_secret_btc_pvtkey",
                                                            {
                                                            retrieve_pvtkey_req_id: retrieve_pvtkey_req_id,
                                                            chunk_val: bpks,
                                                            withdraw_id: withdraw_id,
                                                            db_inst: primarySupernodeForThisUser
                                                            }
                                                        )
                                                        .then(retrieve_pvtkey_req =>
                                                            doSend(retrieve_pvtkey_req)
                                                        );
                                                    });
                                                }
                                            }

                                        } else {
                                            deposited_utxo_addr_list[idx]=deposit_arr.btc_address;
                                        }
                                        idx++;
                                    }
                                }
                                
                            } else {
                                err_msg = `Withdrawal request failed: You are trying to withdraw more ${params.product} than you have.`;
                                err_response = {
                                    user_flo_addr: params.trader_flo_address,
                                    msg: err_msg
                                }
                                reactor.dispatchEvent('message_for_user', err_response);
                                throw new Error(err_msg);
                            }
                            } else {
                            err_msg = `Withdrawal request failed: You don't seem to have any ${params.product} balance in the system yet.
                                        Please buy some ${params.product} to withdraw.`;
                                err_response = {
                                    user_flo_addr: params.trader_flo_address,
                                    msg: err_msg
                                }
                                reactor.dispatchEvent('message_for_user', err_response);
                            }
                        });

                      } catch (error) {
                          console.log(error);
                      }
                } else if (
                  localbitcoinplusplus.master_configurations.tradableAsset2.includes(
                    params.product
                  )
                ) {

                  if (
                    !localbitcoinplusplus.master_configurations.validTradingAmount.includes(
                      parseFloat(params.withdrawing_amount)
                    )
                  ) {
                    err_msg = `Withdrawal request failed: Please enter valid fiat amount.`;
                    err_response = {
                          user_flo_addr: params.trader_flo_address,
                          msg: err_msg
                      }
                      reactor.dispatchEvent('message_for_user', err_response);
                    throw new Error(err_msg);
                  }
                  // Check if there's no already a withdraw cash order of this user
                  /*ONLY DELETE A WITHDRAW ORDER WHEN A DEPOSITOR HAS CONFIRMED DEPOSIT
                                  AND RECEIVER HAS CONFIRMED WITHDRAW*/

                  // Check how much Cash user can withdraw
                  const trader_cash_id = `${params.trader_flo_address}_${params.currency}`;
                  backup_server_db_instance
                    .backup_readDB("cash_balances", trader_cash_id)
                    .then(function(cash_balances_res) {
                      if (
                        typeof cash_balances_res == "object" &&
                        typeof cash_balances_res.trader_flo_address ==
                          "string" &&
                        typeof cash_balances_res.cash_balance ==
                          "number" &&
                        cash_balances_res.cash_balance > 0
                      ) {
                        let withdrawer_cash_balance = helper_functions.truncateDecimals(
                          cash_balances_res.cash_balance, 2
                        );
                        let withdrawing_cash_amount = helper_functions.truncateDecimals(
                          params.withdrawing_amount, 2
                        );
                        let bank_details = params.receivinAddress.trim(); // user UPI

                        if (
                          withdrawer_cash_balance > 0 &&
                          withdrawing_cash_amount > 0 &&
                          withdrawer_cash_balance >=
                            withdrawing_cash_amount
                        ) {
                          // Get a cashier
                          const cashiersList = JSON.parse(
                            localbitcoinplusplus.master_configurations
                              .cashiers
                          );
                          const cashiersPubKeysArray = Object.keys(cashiersList);
                          const getAPaymentHandler = randomNoRepeats(cashiersPubKeysArray)();
                          const cashierFloAddr = bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(
                            getAPaymentHandler
                          );

                          if (!cashiersPubKeysArray.includes(
                              getAPaymentHandler
                            )
                          ) {
                            throw new Error(
                              `ERROR: ${getAPaymentHandler} is not recognized as any Cashier's Public Key.`
                            );
                          }

                          const encoded_bank_details = localbitcoinplusplus.encrypt.encryptMessage(
                            bank_details,
                            getAPaymentHandler
                          );

                          let token_transfer_currency = "";
                          if (params.currency == "INR") {
                            token_transfer_currency = "rupee";
                          }

                          const flo_withdraw_comment = `transfer ${withdrawing_cash_amount} ${token_transfer_currency}# to ${params.trader_flo_address}.`;

                          // Add it to cash withdrawal table
                          let withdraw_request_db_object = {
                            id: helper_functions.unique_id(),
                            trader_flo_address: params.trader_flo_address,
                            withdraw_amount: withdrawing_cash_amount,
                            currency: params.currency,
                            receivinAddress: encoded_bank_details,
                            cashier_pubKey: getAPaymentHandler,
                            status: 1 // withdraw request called
                          };

                          readDB("localbitcoinUser", "00-01").then(
                            function(su_data) {
                              if (
                                typeof su_data == "object" &&
                                typeof su_data.myLocalFLOPublicKey ==
                                  "string" &&
                                su_data.myLocalFLOPublicKey.length > 0 &&
                                localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                                  su_data.myLocalFLOPublicKey
                                )
                              ) {
                                let withdraw_request_db_object_hash = Crypto.SHA256(
                                  JSON.stringify(
                                    withdraw_request_db_object
                                  )
                                );
                                withdraw_request_db_object[
                                  "withdrawDataHash"
                                ] = withdraw_request_db_object_hash;
                                withdraw_request_db_object[
                                  "order_validator_sign"
                                ] = RM_WALLET.sign(
                                  withdraw_request_db_object_hash,
                                  localbitcoinplusplus.wallets
                                    .MY_SUPERNODE_PRIVATE_KEY
                                );
                                withdraw_request_db_object[
                                  "order_validator_public_key"
                                ] = su_data.myLocalFLOPublicKey;

                                try {
                                  // Transfer Token
                                  RM_TRADE.sendMultipleInputsTransaction(
                                      localbitcoinplusplus.BASE_BLOCKCHAIN,
                                    [localbitcoinplusplus.wallets
                                      .MY_SUPERNODE_PRIVATE_KEY],
                                    cashierFloAddr,
                                    0.01,
                                    localbitcoinplusplus.wallets
                                      .my_local_flo_address,
                                    async function(res) {
                                      console.log(res);
                                      if (typeof res == "object") {
                                        try {
                                          let msg = "";
                                          let resp_txid = "";
                                          if (
                                            typeof res.txid == "string" &&
                                            res.txid.length > 0
                                          ) {
                                            resp_obj = JSON.parse(
                                              res.txid
                                            );
                                            resp_txid =
                                              resp_obj.txid.result ||
                                              resp_obj.txid;
                                            msg = `Transaction Id for token transfer to ${params.trader_flo_address}: ${resp_txid}.`;
                                          } else {
                                              err_response = {
                                                  user_flo_addr: cashierFloAddr,
                                                  msg: `Failed to transfer token for withdraw id ${withdraw_request_db_object.id}`
                                              }
                                              reactor.dispatchEvent('message_for_user', err_response);
                                            throw new Errror(
                                              `ERROR: Failed to make transaction.`
                                            );
                                            return false;
                                          }

                                          if (msg.length > 0) {
                                            // Deduct balance of withdrawer
                                            cash_balances_res.cash_balance -= helper_functions.truncateDecimals(
                                              withdrawing_cash_amount, 2
                                            );
                                            const withdrawer_cash_data = await backup_server_db_instance.backup_updateinDB(
                                              "cash_balances",
                                              cash_balances_res
                                            );

                                            const update_cash_balance_obj = {
                                              withdrawer_cash_data: withdrawer_cash_data
                                            };
                                            const update_cash_balance_str = JSON.stringify(
                                              update_cash_balance_obj
                                            );
                                            const update_cash_balance_hash = Crypto.SHA256(
                                              update_cash_balance_str
                                            );
                                            const update_cash_balance_sign = RM_WALLET.sign(
                                              update_cash_balance_hash,
                                              localbitcoinplusplus.wallets
                                                .MY_SUPERNODE_PRIVATE_KEY
                                            );

                                            update_cash_balance_obj.publicKey =
                                              localbitcoinplusplus.wallets.my_local_flo_public_key;
                                            update_cash_balance_obj.sign = update_cash_balance_sign;
                                            update_cash_balance_obj.hash = update_cash_balance_hash;
                                            update_cash_balance_obj.trader_flo_address = cash_balances_res.trader_flo_address;

                                            RM_RPC.send_rpc
                                              .call(
                                                this,
                                                "update_all_new_cash_withdraw_recorded_in_db",
                                                update_cash_balance_obj
                                              )
                                              .then(
                                                update_cash_balance_req =>
                                                  doSend(
                                                    update_cash_balance_req
                                                  )
                                              );

                                            //add the request to supernode db
                                            withdraw_request_db_object.token_transfer_txid =
                                              resp_txid ||
                                              res.signedTxHash;

                                            // Add record in Db
                                            const withdraw_request_db_object_res = await backup_server_db_instance.backup_addDB(
                                              "withdraw_cash",
                                              withdraw_request_db_object
                                            );

                                            // return back the response to client
                                            withdraw_request_db_object_res.receiver_flo_address =
                                              params.trader_flo_address;
                                            withdraw_request_db_object_res.trader_flo_address =
                                              params.trader_flo_address;
                                            RM_RPC.send_rpc
                                              .call(
                                                this,
                                                "withdrawal_request_response",
                                                withdraw_request_db_object_res
                                              )
                                              .then(
                                                withdrawal_request_response =>
                                                  doSend(
                                                    withdrawal_request_response
                                                  )
                                              );
                                          } else {
                                            throw new Errror(
                                              `ERROR: Failed to make transaction. Message length is 0: ${msg}`
                                            );
                                            return false;
                                          }
                                        } catch (e) {
                                          throw new Error(e);
                                        }
                                      }
                                    },
                                    flo_withdraw_comment
                                  );
                                } catch (error) {
                                  console.log(error);
                                }
                              }
                            }
                          );
                        } else {
                          // Return error to the requester
                          err_msg =
                            "Withdrawal request failed: You are trying to withdraw more cash than you have in localbitcoinplusplus account.";
                            err_response = {
                              user_flo_addr: params.trader_flo_address,
                              msg: err_msg
                          }
                          reactor.dispatchEvent('message_for_user', err_response);
                          throw new Error(err_msg);
                        }
                      }
                    });
                } else {
                  err_msg = "withdraw request error";
                  showMessage(err_msg);
                  throw new Error(err_msg);
                }
              }
            }
          );
          break;

        case "cancel_trade":

          RM_RPC.filter_legit_backup_requests(
              params.trader_flo_address,
              async function (is_valid_request) {
                  if (is_valid_request !== true) return false;
              
                  let cancel_request = params;
                  if (cancel_request.job == "cancel_trade_request") {
                  if (
                      typeof cancel_request.trader_flo_address != "string"
                  )
                      return;
                  localbitcoinplusplus.kademlia
                      .determineClosestSupernode(
                          cancel_request.trader_flo_address
                      )
                      .then(my_closest_su_list => {
                      const primarySupernodeOfThisUser =
                          my_closest_su_list[0].data.id;
                      const backup_server_db_instance =
                          localbitcoinplusplus.newBackupDatabase.db[
                          primarySupernodeOfThisUser
                          ];

                      if (typeof backup_server_db_instance !== "object") {
                          let backup_db_error_msg = `WARNING: Unknown DB instance. DB Backup failed.`;
                          showMessage(backup_db_error_msg);
                          throw new Error(backup_db_error_msg);
                      }
                          tradeDB =
                              cancel_request.trade_type == "buy"
                              ? "buyOrders"
                              : "sellOrders";
                          if (
                              RM_WALLET.verify(
                              cancel_request.trade_id,
                              cancel_request.signed_trade_id,
                              request.nodePubKey
                              )
                          ) {
                              backup_server_db_instance
                              .backup_removeinDB(
                                  tradeDB,
                                  cancel_request.trade_id
                              )
                              .then(id =>
                                  {
                                      err_response = {
                                          user_flo_addr: cancel_request.trader_flo_address,
                                          msg: `Order Id ${id} deleted.`
                                      }
                                      reactor.dispatchEvent('message_for_user', err_response);

                                      // Ask other Supernodes to delete this order
                                      RM_RPC.send_rpc
                                      .call(this, "cancel_trade_in_backup", {
                                          trader_flo_address: cancel_request.trader_flo_address,
                                          trader_flo_pubkey: request.nodePubKey,
                                          cancel_trade_obj: cancel_request,
                                      })
                                      .then(server_response => doSend(server_response));
                                  }
                                  
                              ).catch(e=>{
                                  msg_response = {
                                      user_flo_addr: cancel_request.trader_flo_address,
                                      msg: `Failed to delete Order id ${cancel_request.trade_id}.`
                                  }
                                  reactor.dispatchEvent('message_for_user', msg_response);
                              });
                          } else {
                              err_response = {
                                  user_flo_addr: cancel_request.trader_flo_address,
                                  msg: `Failed to verify order for order id ${cancel_request.trade_id}`
                              }
                              reactor.dispatchEvent('message_for_user', err_response);
                          }
                  });
              } else {
                err_response = {
                      user_flo_addr: params.trader_flo_address,
                      msg: `Failed to cancel order for order id ${cancel_request.trade_id}`
                  }
                  reactor.dispatchEvent('message_for_user', err_response);
              }
                     
          });
        
            break;    

        case "retrieve_shamirs_secret_btc_pvtkey":
          RM_RPC.filter_legit_backup_requests(
              params.trader_flo_address,
              async function (is_valid_request) {
                  try {
                      if (is_valid_request !== true) return false;

                      if (
                          typeof params.btc_private_key_array !== "object"
                      )
                          return false;

                      let rec_flo_id =
                          params.receiver_flo_address ||
                          request.globalParams.receiverFloId;
                      if (
                          typeof rec_flo_id == "undefined" ||
                          rec_flo_id !==
                          localbitcoinplusplus.wallets.my_local_flo_address
                      )
                          return;

                      if (typeof params.db_inst !== "string")
                          throw new Error(`ERROR: No DB instance provided.`);
                      if (
                          params.db_inst ==
                          localbitcoinplusplus.wallets.my_local_flo_address
                      ) return;

                      backup_server_db_instance =
                          localbitcoinplusplus.newBackupDatabase.db[params.db_inst];
                      
                      if (typeof backup_server_db_instance !== "object") return;

                      const withdraw_id = params.withdraw_id;

                      const withdraw_res = await backup_server_db_instance
                          .backup_readDB("withdraw_btc", withdraw_id);
                      if (typeof withdraw_res == "object") {
                          const withdrawer_crypto_bal_id = `${withdraw_res.trader_flo_address}_${withdraw_res.product}`;
                          const withdrawer_crypto_bal_response = await backup_server_db_instance
                              .backup_readDB("crypto_balances", withdrawer_crypto_bal_id);
                          const withdrawer_crypto_bal_response_before_update = JSON.parse(JSON.stringify(withdrawer_crypto_bal_response));

                          if (typeof withdrawer_crypto_bal_response !== "object"
                              || typeof withdrawer_crypto_bal_response.crypto_balance !== "number") {
                              err_response = {
                                  user_flo_addr: params.trader_flo_address,
                                  msg: `You do not have any balance to withdraw ${withdraw_res.product}.`
                              }
                              reactor.dispatchEvent('message_for_user', err_response);
                              return false;
                          }

                          let explorer;
                          let decimal = 100000000;
                          switch (withdraw_res.product) {
                              case "BTC":
                                  explorer =
                                      localbitcoinplusplus.server
                                          .btc_mainnet;
                                  break;
                              case "BTC_TEST":
                                  explorer =
                                      localbitcoinplusplus.server
                                          .btc_testnet;
                                  break;
                              case "FLO":
                                  explorer =
                                      localbitcoinplusplus.server
                                          .flo_mainnet;
                                  decimal = 1;
                                  break;
                              case "FLO_TEST":
                                  explorer =
                                      localbitcoinplusplus.server
                                          .flo_testnet;
                                  decimal = 1;
                                  break;
                              default:
                                  break;
                          }

                          if (typeof explorer !== "string") {
                              throw new Error(
                                  `WARNING: Invalid product value: ${withdraw_res.product}.`
                              );
                              return false;
                          }

                          // Get the balance before sending the tx. It is important to get balance before
                          // tx than to after because fetching balance after can return older or newer balance 
                          // on random events
                          let current_utxos_balance = 0;
                          const RM_WALLET = new localbitcoinplusplus.wallets;
                          let total_balance_promises = [];
                          for (const utxo_pk of params.btc_private_key_array) {
                              let utxo_addr = RM_WALLET.generateFloKeys(utxo_pk, withdraw_res.product).address;
                              const bal_url = `${explorer}/api/addr/${utxo_addr}/balance`;
                              total_balance_promises.push(helper_functions.ajaxGet(bal_url));
                          }
                          let total_balance_promises_resp = await Promise.all(total_balance_promises);
                          current_utxos_balance = total_balance_promises_resp.reduce((acc, c) => acc + c, 0);
                          console.log(current_utxos_balance);

                          if (typeof current_utxos_balance !== "number" || current_utxos_balance <= 0) {
                              throw new Error(
                                  "Failed to determine utxo balance of deposits in withdraw_id " + withdraw_res.id
                              );
                          }

                          const totalWithdrawingAmount = helper_functions.truncateDecimals(withdraw_res.receivingBTC);

                          if (totalWithdrawingAmount > withdrawer_crypto_bal_response.crypto_balance) {
                              err_response = {
                                  user_flo_addr: params.trader_flo_address,
                                  msg: `You are withdrawing ${withdraw_res.product} more than your balance.`
                              }
                              reactor.dispatchEvent('message_for_user', err_response);
                              return false;
                          }

                          if (totalWithdrawingAmount > current_utxos_balance) {
                              err_response = {
                                  user_flo_addr: params.trader_flo_address,
                                  msg: `${withdraw_res.product} Withdrawal request failed: System does not have sufficient balance.
                                          Please try later.`
                              }
                              reactor.dispatchEvent('message_for_user', err_response);
                              return false;
                          }

                          // Deduct balance before sending crypto
                          withdrawer_crypto_bal_response.crypto_balance -= totalWithdrawingAmount;
                          withdrawer_crypto_bal_response.crypto_balance =
                              helper_functions.truncateDecimals(withdrawer_crypto_bal_response.crypto_balance);
                          const updated_crypto_balance = await backup_server_db_instance.backup_updateinDB(
                              "crypto_balances",
                              withdrawer_crypto_bal_response,
                              withdrawer_crypto_bal_id
                          );

                          RM_TRADE.sendMultipleInputsTransaction(
                              withdraw_res.product,
                              params.btc_private_key_array,
                              withdraw_res.receiverBTCAddress,
                              totalWithdrawingAmount,
                              withdraw_res.utxo_addr[0],
                              async function (res) {
                                  console.log(res);
                                  try {
                                      if (typeof res == "object") {
                                          let msg = "";
                                          if (
                                              typeof res.txid == "string" &&
                                              res.txid.length > 0
                                          ) {
                                              resp_obj = JSON.parse(res.txid);
                                              resp_txid = resp_obj.txid.result || resp_obj.txid;
                                              msg = `Transaction Id for your withdrawn crypto asset: ${resp_txid}.`;

                                              const RM_RPC = new localbitcoinplusplus.rpc();
                                              RM_RPC.send_rpc
                                                  .call(this, "supernode_message", {
                                                      trader_flo_address:
                                                          withdraw_res.trader_flo_address,
                                                      receiver_flo_address:
                                                          withdraw_res.trader_flo_address,
                                                      server_msg: msg
                                                  })
                                                  .then(server_response =>
                                                      doSend(server_response)
                                                  );

                                              const res_obj_str = JSON.stringify(updated_crypto_balance);
                                              const res_obj_hash = Crypto.SHA256(res_obj_str);
                                              const res_obj_sign = RM_WALLET.sign(
                                                  res_obj_hash,
                                                  localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
                                              );

                                              const updateUserCryptoBalanceObject = {
                                                  updatedBTCBalanceObject: updated_crypto_balance,
                                                  updatedBTCBalanceObjectSign: res_obj_sign,
                                                  trader_flo_address: withdraw_res.trader_flo_address,
                                                  receiver_flo_address: withdraw_res.trader_flo_address
                                              };

                                              RM_RPC.send_rpc(
                                                  "updateUserCryptoBalanceRequest",
                                                  updateUserCryptoBalanceObject
                                              ).then(
                                                  updateUserCryptoBalanceRequestObject =>
                                                      doSend(updateUserCryptoBalanceRequestObject)
                                              );

                                              // Validate txid
                                              let withdrawTxCounter=1;
                                              (async function validateWithdrawTxidInBlockchain() {
                                                  await localbitcoinplusplus.actions.delay(180000); 
                                                  const validate_withdraw_txid = await helper_functions
                                                  .ajaxGet(`${explorer}/api/tx/${resp_txid}`);
                                                  console.log(validate_withdraw_txid);
                                                  if(typeof validate_withdraw_txid=="object"
                                                  && validate_withdraw_txid.txid===resp_txid
                                                  && validate_withdraw_txid.confirmations>0) {

                                                      const deposited_utxos_latest_status = 
                                                      await RM_WALLET.refresh_reserved_crypto_balances(
                                                          withdraw_res.trader_flo_address, 
                                                          withdraw_res.utxo_addr    
                                                      );

                                                      // Send the resp to backups
                                                      RM_RPC.send_rpc(
                                                          "update_deposited_crypto_instance",
                                                          {
                                                              deposit_data: deposited_utxos_latest_status,
                                                              db_inst: params.db_inst,
                                                              trader_flo_address:
                                                              withdraw_res.trader_flo_address
                                                          }
                                                      ).then(delRequestObject =>
                                                          doSend(delRequestObject)
                                                      );

                                                      backup_server_db_instance
                                                      .backup_removeinDB("withdraw_btc", withdraw_id);

                                                      RM_RPC.send_rpc(
                                                          "delete_deposited_crypto_instance",
                                                          {
                                                              withdraw_btc_id: withdraw_id,
                                                              db_inst: params.db_inst,
                                                              trader_flo_address:
                                                              withdraw_res.trader_flo_address
                                                          }
                                                      ).then(delRequestObject =>
                                                          doSend(delRequestObject)
                                                      );

                                                  } else if(n<=20) {
                                                      validateWithdrawTxidInBlockchain();
                                                      withdrawTxCounter++;
                                                  } else {
                                                      throw new Error(`Txid ${resp_txid} not registered in ${withdraw_res.product} Blockhain`);
                                                  }
                                              })();
                                              return true; 

                                          } else {
                                              console.log(res);
                                              throw new Errror(`ERROR: Failed to make transaction.`);
                                          }
                                      } else {
                                          console.error("Waithdraw transaction is not an object");
                                          throw new Errror(`ERROR: Failed to make transaction.`);
                                      }

                                  } catch (error) {
                                      console.warn(error);
                                      err_response = {
                                          user_flo_addr: params.trader_flo_address,
                                          msg: `Withdraw of crypto failed. Network issue:- Please try again after 30 minutes.`
                                      }
                                      reactor.dispatchEvent('message_for_user', err_response);

                                      // update deposits status back to 2 in db
                                      for (const deposited_utxo_idx in withdraw_res.utxo_addr) {
                                          let deposited_utxo_addr = withdraw_res.utxo_addr[deposited_utxo_idx];
                                          const deposit_arr_resp = await backup_server_db_instance
                                          .backup_readDBbyIndex(
                                              "deposit",
                                              "btc_address",
                                              deposited_utxo_addr
                                          )
                                          if (typeof deposit_arr_resp[0] == "object") {
                                              deposit_arr_resp[0].status = 2; // UTXO ready to be used again
                                              await backup_server_db_instance
                                              .backup_updateinDB(
                                                  "deposit",
                                                  deposit_arr_resp[0],
                                                  deposit_arr_resp[0].id
                                              );
                                          }
                                      }
                                      await backup_server_db_instance
                                          .backup_removeinDB("withdraw_btc", withdraw_id);

                                  }
                              }
                          );
                      }

                  } catch (error) {

                      const withdraw_res = await backup_server_db_instance
                          .backup_readDB("withdraw_btc", params.withdraw_id);
                      for (const deposited_utxo_idx in withdraw_res.utxo_addr) {
                          let deposited_utxo_addr = withdraw_res.utxo_addr[deposited_utxo_idx];
                          // update deposits status back to 2 in db
                          const deposit_arr_resp = await backup_server_db_instance
                          .backup_readDBbyIndex(
                              "deposit",
                              "btc_address",
                              deposited_utxo_addr
                          )
                          if (typeof deposit_arr_resp[0] == "object") {
                              deposit_arr_resp[0].status = 2; // UTXO ready to be used again
                              backup_server_db_instance
                              .backup_updateinDB(
                                  "deposit",
                                  deposit_arr_resp[0],
                                  deposit_arr_resp[0].id
                              );
                          }
                      }
                      backup_server_db_instance
                      .backup_removeinDB("withdraw_btc", params.withdraw_id);
                      // Revert user balance
                      backup_server_db_instance
                      .backup_updateinDB("crypto_balances", 
                      withdrawer_crypto_bal_response_before_update, 
                      withdrawer_crypto_bal_response_before_update.id,
                      false,
                      false
                      );

                      throw new Error(error);
                  }
              }
          );
        break;

        case "superNodeSignedAddUserPublicData":
          if (
            typeof params == "object" &&
            typeof params.data == "object"
          ) {
            RM_RPC.filter_legit_backup_requests(
              params.data.trader_flo_address,
              function(is_valid_request) {
                if (is_valid_request !== true) return false;

                if (
                  typeof params.su_pubKey == "string" &&
                  localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                    params.su_pubKey
                  )
                ) {
                  let res_data_obj = {
                    trader_flo_address: params.data.trader_flo_address,
                    trader_flo_pubKey: params.data.trader_flo_pubKey,
                    trader_reputation: params.data.trader_reputation,
                    timestamp: params.data.timestamp
                  };
                  let res_data_hash = Crypto.SHA256(
                    JSON.stringify(res_data_obj)
                  );
                  let res_data_verification = RM_WALLET.verify(
                    res_data_hash,
                    params.sign,
                    params.su_pubKey
                  );
                  if (
                    res_data_verification == true &&
                    res_data_hash == params.data_hash
                  ) {
                    backup_server_db_instance.backup_addDB(
                      "userPublicData",
                      params.data
                    );
                    return true;
                  }
                }
              }
            );
          }
          break;

        default:
          break;
      }
    }
    return request.toString(); // return to client
  },

  async receive_cashiers_rpc_response(request) {
    const isMsgFromCashier = request.search("__FOR__CASHIER__");
    if (isMsgFromCashier < 0) return;

    request = JSON.parse(request);
    const params = request.params[0];
    const method = request.method;

    if (typeof params == "object" && typeof method == "string") {
      if (
        typeof request.globalParams !== "object" 
        || (!Object.keys(
          JSON.parse(localbitcoinplusplus.master_configurations.cashiers)
          ).includes(request.nodePubKey) 
        && !(localbitcoinplusplus.master_configurations.supernodesPubKeys)
        .includes(request.nodePubKey)
        )
        || (typeof request.globalParams.receiversList == "object" &&
          !request.globalParams.receiversList.includes(
            localbitcoinplusplus.wallets.my_local_flo_address
        ))            
      )
        return;

      /************************************
          #todo: VALIDATE CASHIER'S SIGNATURE HERE
      *************************************/

      const RM_WALLET = new localbitcoinplusplus.wallets();
      const RM_RPC = new localbitcoinplusplus.rpc();

      let respective_trader_id = "";
      if (typeof params.trader_flo_address == "string")
        respective_trader_id = params.trader_flo_address;
      request.response = {};
      let err_msg;

      let recvr_flo_id =
        params.receiver_flo_address || request.globalParams.receiverFloId;

      if (
        typeof recvr_flo_id == "string" &&
        recvr_flo_id.length > 0 &&
        recvr_flo_id !== localbitcoinplusplus.wallets.my_local_flo_address
      )
        return;

      switch (method) {
        case "give_cashier_latest_pending_cash_deposits":
          (async function() {
              let _readDBbyIndex = readDBbyIndex;
              if(typeof params.parent_supernode==="string" 
              && params.parent_supernode.length
              && localbitcoinplusplus.wallets.my_local_flo_address 
                  !== params.parent_supernode ) {
                      
                  const foreign_db =
                      localbitcoinplusplus.newBackupDatabase.db[params.parent_supernode];
                  if(typeof foreign_db !== "object") return;
                  _readDBbyIndex = foreign_db.backup_readDBbyIndex.bind(foreign_db);
              }
              const get_all_deposit_reqs_for_this_cashier = await _readDBbyIndex(
              "cash_deposits",
              "cashier_pubKey",
              params.cashier_pubKey
              );

              RM_RPC.send_rpc
                  .call(
                  this,
                  "list_of_cashier_latest_pending_cash_deposits",
                  {
                      for_cashier: true,
                      cashier_pubKey: request.nodePubKey,
                      receiver_flo_address: request.globalParams.senderFloId,
                      data: get_all_deposit_reqs_for_this_cashier,
                      requesting_supernode: params.requesting_supernode,
                      parent_supernode: params.parent_supernode
                  }
                  )
                  .then(resp => doSend(resp, localbitcoinplusplus.wallets.my_local_flo_address));
              
             })();
          break;
        case "give_cashier_latest_pending_cash_withdraws":
          (async function() {
              let _readDBbyIndex = readDBbyIndex;
              if(typeof params.parent_supernode==="string" 
              && params.parent_supernode.length
              && localbitcoinplusplus.wallets.my_local_flo_address 
                  !== params.parent_supernode ) {
                      return false;
                  // const foreign_db =
                  //     localbitcoinplusplus.newBackupDatabase.db[params.parent_supernode];
                  // if(typeof foreign_db !== "object") return;
                  // _readDBbyIndex = foreign_db.backup_readDBbyIndex.bind(foreign_db);
              }
              const get_all_withdraws_reqs_for_this_cashier = await _readDBbyIndex(
              "withdraw_cash",
              "cashier_pubKey",
              params.cashier_pubKey
              );

              RM_RPC.send_rpc
                  .call(
                  this,
                  "list_of_cashier_latest_pending_cash_withdrawals",
                  {
                      for_cashier: true,
                      cashier_pubKey: request.nodePubKey,
                      receiver_flo_address: request.globalParams.senderFloId,
                      data: get_all_withdraws_reqs_for_this_cashier,
                      requesting_supernode: params.requesting_supernode,
                      parent_supernode: params.parent_supernode
                  })
                  .then(resp => doSend(resp, localbitcoinplusplus.wallets.my_local_flo_address));
          })();   

          break;

        case "cashier_confirms_user_cash_deposit":
            (async function() {

              try {

                  if (params.flo_txid===null
                      || params.flo_txid.length<1
                      || params.deposit_id==null
                      || params.deposit_id.length<1
                  ) {
                      throw new Error(`Error: Incomplete or invalid data received for Cash Deposit Id: ${params.deposit_id}`);
                  }      
                  const parent_supernode = params.parent_supernode;

                  if(localbitcoinplusplus.wallets.my_local_flo_address!==params.receiver_flo_address) return;

                  let _readDB = readDB;
                  let _updateinDB = updateinDB;
                  let _removeinDB = removeinDB;

                  if (localbitcoinplusplus.wallets.my_local_flo_address!==parent_supernode &&
                      typeof localbitcoinplusplus.newBackupDatabase.db[parent_supernode] ==
                      "object"
                  ) {
                      const foreign_db =
                          localbitcoinplusplus.newBackupDatabase.db[parent_supernode];
                      _readDB = foreign_db.backup_readDB.bind(foreign_db);
                      _updateinDB = foreign_db.backup_updateinDB.bind(foreign_db);
                      _removeinDB = foreign_db.backup_removeinDB.bind(foreign_db);
                  }

                  // Validate deposit_id
                  const user_deposit_req = await _readDB("cash_deposits", params.deposit_id);
                  if (typeof user_deposit_req!=="object" 
                      || user_deposit_req===null) return;       

                  let txidUrlDeposit = '';
                  if(ENVR==="LIVE") {
                      txidUrlDeposit = `${localbitcoinplusplus.server
                      .flo_api_mainnet}/api/v1.0/getTransactionDetails/${params.flo_txid}`;
                  } else {
                      txidUrlDeposit = `${localbitcoinplusplus.server
                      .flo_api_testnet}/api/v1.0/getTransactionDetails/${params.flo_txid}`;
                  }
                  
                  // Validate Flo txid
                  const validate_flo_txid = await helper_functions.ajaxGet(txidUrlDeposit);
                  
                  if(typeof validate_flo_txid !== "object"
                  || typeof validate_flo_txid.transactionDetails !== "object"
                  || typeof validate_flo_txid.transactionDetails.floData !== "string"
                  || validate_flo_txid.transactionDetails.floData.length < 5 // without ':text'
                  )
                  throw new Error(`Error: Txid ${params.flo_txid} not found in Blockchain.`);
              
                  /** IMP: CHECK WHETHER VIN IS A VALID SUPERNODE FLO ID HERE **/ 
                  const cashiers_pub_keys = Object.keys(JSON.parse(localbitcoinplusplus.master_configurations.cashiers));
                  const cashiers_flo_keys = Object.values(cashiers_pub_keys).map(m=>bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(m));
                  if(!cashiers_flo_keys.includes(validate_flo_txid.transactionDetails.vin[0].addr)) return;

                  let amount_deposited = Number(validate_flo_txid.transactionDetails.floData.match(/\d+/g)[0]);
                                  
                  // Update balances datastore
                  const user_cash_id = `${user_deposit_req.trader_flo_address}_${user_deposit_req.currency}`;
                  const get_user_balance = await _readDB('cash_balances',user_cash_id);
                  let updateUserBalance;

                  if(typeof get_user_balance=="object" 
                      && typeof get_user_balance.cash_balance==="number"
                  ) {
                      get_user_balance.cash_balance += amount_deposited;
                      updateUserBalance = await _updateinDB("cash_balances", get_user_balance);

                  } else {
                      let cash_obj = {
                          cash_balance: amount_deposited,
                          currency: user_deposit_req.currency,
                          id: user_cash_id,
                          trader_flo_address: user_deposit_req.trader_flo_address,
                      }
                      updateUserBalance = await _updateinDB("cash_balances", cash_obj);
                  }

                  if (typeof updateUserBalance!=="object" && updateUserBalance==null) 
                      throw new Error(`Error: Failed to update balance of User Cash Id: ${user_cash_id}.`);
                  
                  // Delete data from deposits
                  await _removeinDB("cash_deposits", params.deposit_id);    
                                                              
                  // Broadcast deposit and cash balances datastore data to backups
                  let update_cash_balance_obj = {
                      depositor_cash_data: updateUserBalance,
                      deposit_req_id: params.deposit_id
                  }
                  let update_cash_balance_str = JSON.stringify(update_cash_balance_obj);
                  let update_cash_balance_hash = Crypto.SHA256(update_cash_balance_str);
                  let update_cash_balance_sign =
                      RM_WALLET
                      .sign(update_cash_balance_hash,
                          localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
                      );

                  update_cash_balance_obj.publicKey =
                      localbitcoinplusplus.wallets.my_local_flo_public_key;
                  update_cash_balance_obj.sign = update_cash_balance_sign;
                  update_cash_balance_obj.hash = update_cash_balance_hash;
                  update_cash_balance_obj.trader_flo_address 
                      = user_deposit_req.trader_flo_address;

                  RM_RPC
                      .send_rpc
                      .call(this,
                          "update_all_deposit_success",
                          update_cash_balance_obj)
                      .then(update_cash_balance_req=>
                  doSend(update_cash_balance_req));

              } catch (error) {
                  throw new Error(error);
              }
            })()

          break;

        case "cashier_confirms_user_cash_withdraw":

          (async function() {
              try {
                  if (typeof params.withdraw_id!=="string"
                  || params.withdraw_id.length<1
                  || typeof params.upi_txid!=="string"
                  || params.upi_txid.length<1)
                  throw new Error(`Error: Invalid/Incomplete message sent by cashier.`);
  
                  // Fetch and update withdraw request from db
                  // #todo 
                  // Note: Remove withdraw requests older than 1 week using 
                  // window.requestIdleCallback function

                  if(localbitcoinplusplus.wallets.my_local_flo_address!==params.receiver_flo_address) return;

                  let _readDB = readDB;
                  let _updateinDB = updateinDB;
                  let _removeinDB = removeinDB;

                  const parent_supernode = params.parent_supernode;

                  if (localbitcoinplusplus.wallets.my_local_flo_address!==parent_supernode &&
                      typeof localbitcoinplusplus.newBackupDatabase.db[parent_supernode] ==
                      "object"
                  ) {
                      const foreign_db =
                          localbitcoinplusplus.newBackupDatabase.db[parent_supernode];
                      _readDB = foreign_db.backup_readDB.bind(foreign_db);
                      _updateinDB = foreign_db.backup_updateinDB.bind(foreign_db);
                      _removeinDB = foreign_db.backup_removeinDB.bind(foreign_db);
                  }
  
                  const withdraw_req = await _readDB('withdraw_cash', params.withdraw_id);
                  if(typeof withdraw_req!=="object" 
                  || withdraw_req.id.length<=0) return;
  
                  withdraw_req.upi_txid = params.upi_txid;
                  withdraw_req.status = 2; // Cashier sent money to Withdrawer
                  const updated_withdraw_req = await _updateinDB('withdraw_cash', withdraw_req, withdraw_req.id);

                  if(typeof updated_withdraw_req.id !=="string") 
                      throw new Error(`Error: Failed to update "cashier_confirms_user_cash_withdraw" data.`);
              
                  // Broadcast to backups
                  RM_RPC
                      .send_rpc
                      .call(this,
                          "record_upi_tx_of_successfull_withdraw",
                          updated_withdraw_req)
                      .then(resp=> doSend(resp));

                  // Delete the request after 24 hours
                  let withdraw_order_life = JSON.parse(localbitcoinplusplus.master_configurations.ordersLife);
                  localbitcoinplusplus.actions.delay(withdraw_order_life.cashWithdraw).then(function() {
                      _removeinDB("withdraw_cash", withdraw_req.id);
                  });
                  
              } catch (error) {
                  throw new Error(error);
              }
          })() 

          break;

        default:
          break;
      }
    }
  },

  parse_server_rpc_response(request) {
    var request = JSON_RPC.parse(request);
    var response;
    if (request.id == this.rpc_req_id) {
      // the request ID is maintained
      response = request.response; // if successful
    }
    console.log("res:", response);
    return response;
  }
};
</script>

<!-- Trade Object -->
<script>
/*Initiate trade level with 0*/
var Trade = (localbitcoinplusplus.trade = function processTrade() {
  this.errors = [];
  this.level = 0; // default
  this.order_type = null;
  this.valid_order_type = ["buy", "sell"];
  this.product = null;
  this.currency = null;
  this.buy_price = null;
  this.buyer_public_key = null;
  this.buyer_key_signature = null;
  this.order_validator_public_key = null;
  this.rpc_job = null;
  this.floAddress = null;
  this.user_flo_address = null;
  this.sorted_trade_list = [];
});

Trade.prototype = {
  getTrustLevel() {
    return this.level;
  },

  setTrustLevel(level) {
    if (
      typeof level === "number" &&
      level === parseInt(level, 10) &&
      level > 0 &&
      level < 6
    ) {
      this.level = level;
    }
  },

  validate_order(
    order_type,
    user_flo_address,
    product,
    currency,
    buy_price
  ) {
    if (this.valid_order_type.indexOf(order_type) >= 0) {
      this.order_type = order_type;
    } else {
      this.errors.push("Inavlid trade type value.");
    }
    if (user_flo_address.trim() !== "") {
      this.user_flo_address = user_flo_address;
    } else {
      this.errors.push("No receiving BTC or Bank address provided.");
    }
    if (
      typeof localbitcoinplusplus.master_configurations.tradableAsset1 !==
        "undefined" &&
      localbitcoinplusplus.master_configurations.tradableAsset1.indexOf(
        product
      ) >= 0
    ) {
      this.product = product;
    } else {
      this.errors.push("Invalid trading product.");
    }
    if (
      typeof localbitcoinplusplus.master_configurations.tradableAsset2 !==
        "undefined" &&
      localbitcoinplusplus.master_configurations.tradableAsset2.indexOf(
        currency
      ) >= 0
    ) {
      this.currency = currency;
    } else {
      this.errors.push("Invalid exchanging currency or asset.");
    }
    if (
      localbitcoinplusplus.master_configurations.validTradingAmount.includes(
        buy_price
      )
    ) {
      this.buy_price = buy_price;
    } else {
      this.errors.push(
        "Invalid buying price. Please place a valid buy amount."
      );
    }

    if (this.errors.length > 0) {
      return this.errors;
    }
    return true;
  },
  place_order(
    order_type,
    user_flo_address,
    product,
    currency,
    buy_price
  ) {
    var is_valid_order = this.validate_order(
      order_type,
      user_flo_address,
      product,
      currency,
      buy_price
    );
    if (is_valid_order === true) {
      this.rpc_job = "trade_" + this.order_type;

      let newOrderDataObj = {
        order_type: this.order_type,
        trader_flo_address: this.user_flo_address,
        product: this.product,
        currency: this.currency,
        buy_price: this.buy_price,
        receiver_flo_address:
          localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS
      };
      const RM_RPC = new localbitcoinplusplus.rpc();
      let placeNewOrder = RM_RPC.send_rpc.call(
        this,
        this.rpc_job,
        newOrderDataObj
      );
      return placeNewOrder;
    } else if (typeof is_valid_order == "object") {
      var err;
      for (err = 0; err < is_valid_order.length; err++) {
        showMessage(`ERROR: ${is_valid_order[err]}`);
      }
      return false;
    }
  },
  trade_buy(params, callback, backup_db = "") {
    let err_msg;
    let _addDB = addDB;
    let _readDB = readDB;
    for (var key in params) {
      if (params.hasOwnProperty(key)) {
        if (typeof key == undefined || key.trim() == "" || key == null) {
          err_msg = "Incomplete or invalid request!";
          showMessage(err_msg);
          throw new Error(err_msg);
        }
      }
    }
    if (
      params.order_type != "buy" ||
      !localbitcoinplusplus.master_configurations.tradableAsset1.includes(
        params.product
      ) ||
      !localbitcoinplusplus.master_configurations.tradableAsset2.includes(
        params.currency
      ) ||
      params.currency == params.product
    ) {
      err_msg = "WARNING: Invalid buy request.";
      showMessage(err_msg);
      throw new Error(err_msg);
    }

    if (typeof backup_db == "string" && backup_db.length > 0) {
      if (
        typeof localbitcoinplusplus.newBackupDatabase.db[backup_db] ==
        "object"
      ) {
        const foreign_db =
          localbitcoinplusplus.newBackupDatabase.db[backup_db];
        _addDB = foreign_db.backup_addDB.bind(foreign_db);
        _readDB = foreign_db.backup_readDB.bind(foreign_db);
      } else {
        err_msg = `WARNING: Invalid Backup DB Instance Id: ${backup_db}.`;
        showMessage(err_msg);
        throw new Error(err_msg);
      }
    }

    const RM_WALLET = new localbitcoinplusplus.wallets();
    const RM_TRADE = new localbitcoinplusplus.trade();
    const RM_RPC = new localbitcoinplusplus.rpc();

    //Check buyer's fiat balance
    const trader_cash_id = `${params.trader_flo_address}_${params.currency}`;
    _readDB("cash_balances", trader_cash_id).then(function(res) {
      if (
        typeof res !== "undefined" &&
        typeof res.cash_balance == "number" &&
        !isNaN(res.cash_balance)
      ) {
        let buyer_cash_balance = helper_functions.truncateDecimals(res.cash_balance, 2);
        let buy_price_btc = parseFloat(params.buy_price);
        if (buyer_cash_balance < buy_price_btc) {
          err_msg = "WARNING: Insufficient balance of buyer.";
          showMessage(err_msg);
          throw new Error(err_msg);
        }
        // calculate equivalent BTC for x amount of Cash
        let eqBTC = RM_TRADE.calculateCryptoEquivalentOfCash(
          buy_price_btc,
          params.currency,
          params.product
        );
        eqBTC = helper_functions.truncateDecimals(eqBTC);
        if (typeof eqBTC == "number" && eqBTC > 0) {
          let res_btc;

          // supernode data query
          readDB("localbitcoinUser", "00-01").then(function(user_data) {
            if (
              typeof user_data == "object" &&
              typeof localbitcoinplusplus.wallets
                .MY_SUPERNODE_PRIVATE_KEY == "string" &&
              localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
                .length > 0
            ) {
              try {
                // Add buy oder
                params["id"] = helper_functions.unique_id();

                let hashed_data = Crypto.SHA256(JSON.stringify(params));
                // Signing of the data by Supernode
                let signed_data = RM_WALLET.sign(
                  hashed_data,
                  localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
                );

                params["data_hash"] = hashed_data;
                params["supernode_sign"] = signed_data;
                params["supernodePubKey"] = user_data.myLocalFLOPublicKey;
                params["status"] = 1;

                _addDB("buyOrders", params).then(resp => callback(resp));
              } catch (error) {
                console.error(error);
                callback(false);
              }
            }
          });
          callback(false);
        } else {
          err_msg = "Failed to fetch current BTC price.";
          showMessage(err_msg);
          throw new Error(err_msg);
        }
      } else {
        err_msg = "Failed to read cash balance from DB.";
        showMessage(err_msg);
        throw new Error(err_msg);
      }
    });
  },
  trade_sell(params, callback, backup_db = "") {
    let err_msg;
    let _addDB = addDB;
    let _readDB = readDB;
    for (var key in params) {
      if (params.hasOwnProperty(key)) {
        if (
          typeof key == "undefined" ||
          key.trim() == "" ||
          key == null
        ) {
          err_msg = "Incomplete or invalid request!";
          showMessage(err_msg);
          throw new Error(err_msg);
        }
      }
    }
    if (
      params.order_type != "sell" ||
      !localbitcoinplusplus.master_configurations.tradableAsset1.includes(
        params.product
      ) ||
      !localbitcoinplusplus.master_configurations.tradableAsset2.includes(
        params.currency
      ) ||
      params.currency == params.product
    ) {
      err_msg = "Invalid sell request.";
      showMessage(err_msg);
      throw new Error(err_msg);
    }

    if (typeof backup_db == "string" && backup_db.length > 0) {
      if (
        typeof localbitcoinplusplus.newBackupDatabase.db[backup_db] ==
        "object"
      ) {
        const foreign_db =
          localbitcoinplusplus.newBackupDatabase.db[backup_db];
        _addDB = foreign_db.backup_addDB.bind(foreign_db);
        _readDB = foreign_db.backup_readDB.bind(foreign_db);
      } else {
        err_msg = `WARNING: Invalid Backup DB Instance Id: ${backup_db}.`;
        showMessage(err_msg);
        throw new Error(err_msg);
      }
    }

    const RM_WALLET = new localbitcoinplusplus.wallets();
    const RM_TRADE = new localbitcoinplusplus.trade();
    const RM_RPC = new localbitcoinplusplus.rpc();

    // Check crypto balance of the seller
    let seller_btc_id = `${params.trader_flo_address}_${params.product}`;
    _readDB("crypto_balances", seller_btc_id).then(function(res) {
      if (
        typeof res !== "undefined" &&
        typeof res.trader_flo_address == "string" &&
        res.trader_flo_address.length > 0 &&
        res.crypto_balance > 0
      ) {
        let seller_btc_balance = helper_functions.truncateDecimals(res.crypto_balance);
        let sell_price_in_inr = parseFloat(params.buy_price);
        let eqBTC = RM_TRADE.calculateCryptoEquivalentOfCash(
          sell_price_in_inr,
          params.currency,
          params.product
        );
        eqBTC = helper_functions.truncateDecimals(eqBTC);
        if (typeof eqBTC == "number" && eqBTC > 0) {
          if (seller_btc_balance < eqBTC) {
            err_msg = "Insufficient BTC balance.";
            showMessage(err_msg);
            throw new Error(err_msg);
          }

          // supernode data query
          readDB("localbitcoinUser", "00-01").then(function(user_data) {
            if (
              typeof user_data == "object" &&
              typeof localbitcoinplusplus.wallets
                .MY_SUPERNODE_PRIVATE_KEY == "string" &&
              localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
                .length > 0
            ) {
              //Add cash balance
              params["id"] = helper_functions.unique_id();

              let hashed_data = Crypto.SHA256(JSON.stringify(params));
              // Signing of the data by Supernode
              let signed_data = RM_WALLET.sign(
                hashed_data,
                localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
              );

              params["data_hash"] = hashed_data;
              params["supernode_sign"] = signed_data;
              params["supernodePubKey"] = user_data.myLocalFLOPublicKey;
              params["status"] = 1;

              _addDB("sellOrders", params).then(resp => callback(resp));
            }
          });
          callback(false);
        } else {
          err_msg = "Failed to fetch current BTC price.";
          showMessage(err_msg);
          throw new Error(err_msg);
        }
      } else {
        err_msg = "Failed to read BTC balance from DB.";
        showMessage(err_msg);
        throw new Error(err_msg);
      }
    });
  },
  depositAsset(assetType, amount, currency, userFLOaddress) {
    if (
      typeof localbitcoinplusplus.master_configurations.tradableAsset1 ==
        "undefined" ||
      typeof localbitcoinplusplus.master_configurations.tradableAsset2 ==
        "undefined" ||
      (!localbitcoinplusplus.master_configurations.tradableAsset1.includes(
        assetType
      ) &&
        !localbitcoinplusplus.master_configurations.tradableAsset2.includes(
          assetType
        ))
    ) {
      err_msg = "Invalid asset error";
      showMessage(err_msg);
      throw new Error(err_msg);
    } else if (parseFloat(amount) <= 0) {
      err_msg = "Invalid amount error.";
      showMessage(err_msg);
      throw new Error(err_msg);
    } else if (userFLOaddress.length < 0) {
      err_msg = "User address required.";
      showMessage(err_msg);
      throw new Error(err_msg);
    }
    let deposit_request_object = {
      trader_flo_address: userFLOaddress,
      depositing_amount: amount,
      currency: currency,
      depositor_key_signature: null,
      depositor_public_key: null,
      operation_type: "deposit",
      order_validator_public_key: null,
      product: assetType,
      receiver_flo_address: localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS
    };
    const RM_RPC = new localbitcoinplusplus.rpc();
    RM_RPC.send_rpc
      .call(this, "deposit_asset_request", deposit_request_object)
      .then(deposit_request => doSend(deposit_request));
  },
  depositCash(amount, currency, userFLOaddress, user_upi) {
    if (
      typeof localbitcoinplusplus.master_configurations.tradableAsset2 ==
        "undefined" ||
      !localbitcoinplusplus.master_configurations.tradableAsset2.includes(
        currency
      )
    ) {
      err_msg = "Invalid asset error";
      showMessage(err_msg);
      throw new Error(err_msg);
    } else if (parseFloat(amount) <= 0) {
      err_msg = "Invalid amount error.";
      showMessage(err_msg);
      throw new Error(err_msg);
    } else if (userFLOaddress.length <= 0) {
      err_msg = "User address required.";
      showMessage(err_msg);
      throw new Error(err_msg);
    } else if (typeof user_upi !== "string" || user_upi.length < 1) {
      err_msg = "Error: Invalid UPI id.";
      showMessage(err_msg);
      throw new Error(err_msg);
    }
    let deposit_request_object = {
      trader_flo_address: userFLOaddress,
      depositing_amount: amount,
      currency: currency,
      user_upi: user_upi,
      operation_type: "deposit_cash",
      receiver_flo_address: localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS
    };
    const RM_RPC = new localbitcoinplusplus.rpc();
    RM_RPC.send_rpc
      .call(this, "deposit_cash_request", deposit_request_object)
      .then(deposit_request => doSend(deposit_request));
  },
  withdrawAsset(
    assetType,
    amount,
    receivinAddress,
    userFLOaddress,
    currency,
    callback
  ) {
    let err_msg;
    if (
      typeof localbitcoinplusplus.master_configurations.tradableAsset1 ==
        "undefined" ||
      typeof localbitcoinplusplus.master_configurations.tradableAsset2 ==
        "undefined" ||
      (!localbitcoinplusplus.master_configurations.tradableAsset1.includes(
        assetType
      ) &&
        !localbitcoinplusplus.master_configurations.tradableAsset2.includes(
          assetType
        ) &&
        !localbitcoinplusplus.master_configurations.tradableAsset1.includes(
          currency
        ))
    ) {
      err_msg = "Invalid asset error";
      showMessage(err_msg);
      throw new Error(err_msg);
    } else if (parseFloat(amount) <= 0) {
      err_msg = "Invalid amount error.";
      showMessage(err_msg);
      throw new Error(err_msg);
    } else if (userFLOaddress.length < 0) {
      err_msg = "User address required.";
      showMessage(err_msg);
      throw new Error(err_msg);
    } else if (receivinAddress.trim() == "") {
      err_msg =
        "You must provide a vaid Bitcoin address to receive funds.";
      showMessage(err_msg);
      throw new Error(err_msg);
    }

    let withdraw_request_object = {
      trader_flo_address: userFLOaddress,
      receivinAddress: receivinAddress,
      withdrawing_amount: amount,
      wihdrawer_key_signature: null,
      wihdrawer_public_key: null,
      operation_type: "withdraw",
      order_validator_public_key: null,
      product: assetType,
      currency: currency,
      receiver_flo_address: localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS
    };
    const RM_RPC = new localbitcoinplusplus.rpc();
    RM_RPC.send_rpc
      .call(this, "withdraw_request_method", withdraw_request_object)
      .then(withdraw_request => doSend(withdraw_request));
  },
  calculateCryptoEquivalentOfCash(price, currency = "USD", crypto_code) {
    if (
      localbitcoinplusplus.master_configurations.validTradingAmount.includes(
        price
      )
    ) {
      if (
        !localbitcoinplusplus.master_configurations.tradableAsset1.includes(
          crypto_code
        )
      )
        return false;
      if (
        !localbitcoinplusplus.master_configurations.tradableAsset2.includes(
          currency
        )
      )
        return false;
      const RM_TRADE = new localbitcoinplusplus.trade();
      let current_crypto_price = RM_TRADE.get_current_crypto_price_in_fiat(
        crypto_code,
        currency
      );
      if (
        typeof current_crypto_price == "object" &&
        current_crypto_price.rate > 0
      ) {
        return helper_functions.truncateDecimals(price / current_crypto_price.rate);
      }
    }
    let err_msg = `WARNING: Failed to calculate crypto equivalent of cash.`;
    showMessage(err_msg);
    throw new Error(err_msg);
  },
  get_current_crypto_price_in_fiat(crypto_code, currency_code) {
    let current_rate_obj =
      localbitcoinplusplus.trade[
        `current_${crypto_code}_price_in_${currency_code}`
      ];
    if (
      typeof current_rate_obj == "object" &&
      localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
        current_rate_obj.supernode_pub_key
      )
    ) {
      if (crypto_code == "BTC_TEST") {
        crypto_code = "BTC";
      }
      if (crypto_code == "FLO_TEST") {
        crypto_code = "FLO";
      }
      let rate_obj = {
        id: `${crypto_code}_${currency_code}`,
        crypto_code: crypto_code,
        currency_code: currency_code,
        rate: current_rate_obj.rate,
        timestamp: current_rate_obj.timestamp
      };
      const rate_obj_str = JSON.stringify(rate_obj);
      const rate_obj_hash = Crypto.SHA256(rate_obj_str);

      const RM_WALLET = new localbitcoinplusplus.wallets();
      if (
        RM_WALLET.verify(
          rate_obj_hash,
          current_rate_obj.sign,
          current_rate_obj.supernode_pub_key
        )
      ) {
        return current_rate_obj;
      }
      return false;
    }
  },
  async resolve_current_crypto_price_in_fiat(crypto_code, currency_code) {
    let today = +new Date();
    const RM_TRADE = new localbitcoinplusplus.trade();
    let last_update_of_fiat_price_obj = RM_TRADE.get_current_crypto_price_in_fiat(
      crypto_code,
      currency_code
    );
    if (
      typeof last_update_of_fiat_price_obj !== "object" ||
      today - last_update_of_fiat_price_obj.timestamp > 3600000
    ) {
      last_update_of_fiat_price_obj = await RM_TRADE.set_current_crypto_price_in_fiat(
        crypto_code,
        currency_code
      );
      return last_update_of_fiat_price_obj;
    } else {
      return last_update_of_fiat_price_obj;
    }
  },
  usd_to_fiat_exchange_rate(currency_code = "INR") {
    return new Promise((resolve, reject) => {
      helper_functions
        .ajaxGet(
          `${localbitcoinplusplus.server.flo_api_mainnet}/api/v1.0/getPrices`
        )
        .then(res => {
          if (
            typeof res == "object" &&
            typeof res.prices.USDINR == "number"
          ) {
            Object.defineProperty(
              localbitcoinplusplus.trade,
              `current_USD_price_in_${currency_code}`,
              {
                value: {
                  rate: res.prices.USDINR,
                  timestamp: +new Date()
                },
                writable: true,
                configurable: false,
                enumerable: true
              }
            );

            localbitcoinplusplus.trade[
              `current_USD_price_in_${currency_code}`
            ];

            resolve(res["quotes"][`USD${currency_code}`]);
            return;
          }
          reject(false);
        });
    });
  },
  // This function should be run periodically maybe through cron job
  update_fiat_to_crypto_exchange_rate(crypto_code = "", fiat = "") {
      if(crypto_code=="BTC_TEST") {
          crypto_code = "BTC";
      } else if(crypto_code == "FLO_TEST") {
          crypto_code = "FLO";
      } 
    this.fiat_to_crypto_exchange_rate_from_API(crypto_code, fiat)
      .then(new_price => {
        console.log(new_price);
        if (typeof new_price == "number") {
          let rate_obj = {
            id: `${crypto_code}_${fiat}`,
            crypto_code: crypto_code,
            currency_code: fiat,
            rate: new_price,
            timestamp: +new Date()
          };
          const rate_obj_str = JSON.stringify(rate_obj);
          const rate_obj_hash = Crypto.SHA256(rate_obj_str);
          const RM_WALLET = new localbitcoinplusplus.wallets();
          const rate_obj_sign = RM_WALLET.sign(
            rate_obj_hash,
            localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
          );
          rate_obj["supernode_pub_key"] =
            localbitcoinplusplus.wallets.my_local_flo_public_key;
          rate_obj["sign"] = rate_obj_sign;

          updateinDB("crypto_fiat_rates", rate_obj)
            .then(() => {
              showMessage(`INFO: ${crypto_code}<=>${fiat} rate updated.`);
              this.resolve_current_crypto_price_in_fiat(
                crypto_code,
                fiat
              );
            })
            .catch(() =>
              console.error(
                `ERROR: Failed to update ${crypto_code}<=>${fiat} rate.`
              )
            );

          return true;
        } else {
          console.error(
            `ERROR: Failed to get valid response while fetching ${crypto_code}<=>${fiat} rate.`
          );
        }
      })
      .catch(e => {
        console.error(e);
      });
  },
  fiat_to_crypto_exchange_rate_from_API(crypto_code = "", fiat = "") {
    return new Promise((resolve, reject) => {
      if(crypto_code=="BTC_TEST") {
          crypto_code = "BTC";
      } else if(crypto_code == "FLO_TEST") {
          crypto_code = "FLO";
      } 
      helper_functions
          .ajaxGet(`${localbitcoinplusplus.server.flo_api_mainnet}/api/v1.0/getPrices`)
          .then(async res => {
            if (
              typeof res == "object" &&
              typeof res.prices == "object"
            ) {
              let new_price = res.prices[`${crypto_code}${fiat}`];
              resolve(new_price);
              return;
            } else {
              reject(false);
            }
          })
          .catch(e => {
            console.error(e);
            reject(false);
          });
    });
  },
  fiat_to_crypto_exchange_rate(crypto_code = "", fiat = "") {
    return new Promise((resolve, reject) => {
      try {
          if(crypto_code=="BTC_TEST") {
              crypto_code = "BTC";
          } else if(crypto_code == "FLO_TEST") {
              crypto_code = "FLO";
          } 
        let id = `${crypto_code}_${fiat}`;
        readDB("crypto_fiat_rates", id).then(res => {
          if (typeof res == "object") {
            return resolve(res);
          }
          reject(false);
        });
      } catch (e) {
        reject(e);
      }
    });
  },
  async set_current_crypto_price_in_fiat(crypto_code, currency_code) {
    if (
      !localbitcoinplusplus.master_configurations.tradableAsset1.includes(
        crypto_code
      ) ||
      !localbitcoinplusplus.master_configurations.tradableAsset2.includes(
        currency_code
      ) ||
      !localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
        localbitcoinplusplus.wallets.my_local_flo_public_key
      )
    )
      return false;

    let rate_obj = null;

    if (crypto_code == "BTC" && currency_code == "USD") {
      rate_obj = await this.fiat_to_crypto_exchange_rate(
        crypto_code,
        currency_code
      );
    }
    if (crypto_code == "BTC_TEST" && currency_code == "USD") {
      rate_obj = await this.fiat_to_crypto_exchange_rate(
        "BTC",
        currency_code
      );
    }
    if (crypto_code == "BTC" && currency_code == "INR") {
      rate_obj = await this.fiat_to_crypto_exchange_rate(
        crypto_code,
        currency_code
      );
    }
    if (crypto_code == "BTC_TEST" && currency_code == "INR") {
      rate_obj = await this.fiat_to_crypto_exchange_rate(
        "BTC",
        currency_code
      );
    }
    if (crypto_code == "FLO" && currency_code == "USD") {
      rate_obj = await this.fiat_to_crypto_exchange_rate(
        crypto_code,
        currency_code
      );
    }
    if (crypto_code == "FLO_TEST" && currency_code == "USD") {
      rate_obj = await this.fiat_to_crypto_exchange_rate(
        "FLO",
        currency_code
      );
    }
    if (crypto_code == "FLO" && currency_code == "INR") {
      rate_obj = await this.fiat_to_crypto_exchange_rate(
        crypto_code,
        currency_code
      );
    }
    if (crypto_code == "FLO_TEST" && currency_code == "INR") {
      rate_obj = await this.fiat_to_crypto_exchange_rate(
        "FLO",
        currency_code
      );
    }

    if (rate_obj == null)
      throw new Error(`WARNING: Failed to get price.`);

    Object.defineProperty(
      localbitcoinplusplus.trade,
      `current_${crypto_code}_price_in_${currency_code}`,
      {
        value: rate_obj,
        writable: true,
        configurable: false,
        enumerable: true
      }
    );
    return localbitcoinplusplus.trade[
      `current_${crypto_code}_price_in_${currency_code}`
    ];
  },
  // Send transaction for multiple inputs and outputs
  sendMultipleInputsTransaction(
        crypto_type,
        utxo_addr_wif,
        receiver_address,
        receiving_amount,
        change_adress,
        callback,
        custom_floData = ""
    ) {
        let blockchain_explorer;
        let miners_fee = 0.0003;
        const miner_fee_obj = JSON.parse(
            localbitcoinplusplus.master_configurations.miners_fee
        );
        if (crypto_type == "BTC") {
            blockchain_explorer = localbitcoinplusplus.server.btc_mainnet;
            miners_fee = miner_fee_obj.btc;
        } else if (crypto_type == "BTC_TEST") {
            blockchain_explorer = localbitcoinplusplus.server.btc_testnet;
            miners_fee = miner_fee_obj.btc;
        } else if (crypto_type == "FLO") {
            blockchain_explorer = localbitcoinplusplus.server.flo_mainnet;
            miners_fee = miner_fee_obj.flo;
        } else if (crypto_type == "FLO_TEST") {
            blockchain_explorer = localbitcoinplusplus.server.flo_testnet;
            miners_fee = miner_fee_obj.flo;
        }

        if (typeof blockchain_explorer !== "string") {
            notify(
                `WARNING: Please select cryptocurrency/fiat value from select bar.`
            );
            return false;
        }

        let err_msg;
        let utxo_list_req = [];
        const RM_WALLET = new localbitcoinplusplus.wallets;

        for (const pk of utxo_addr_wif) {
            let keygen = RM_WALLET.generateFloKeys(pk);
            let utxo_addr = keygen.address;
            let url = `${blockchain_explorer}/api/addr/${utxo_addr}/utxo`;
            utxo_list_req.push(helper_functions.ajaxGet(url));
        }

        Promise.all(utxo_list_req).then(all_utxos => {
            if (all_utxos.length > 0) {
                try {
                    const utxo_list = [].concat(...all_utxos);
                    utxo_list.sort((a, b) => b.confirmations - a.confirmations);
                    let btc_eq_receiving_amount = receiving_amount;

                    let trx = bitjs[crypto_type].transaction();
                    let sum = 0;
                    let signing_private_keys_array = [];

                    for (var key in utxo_list) {
                        if (utxo_list[key].confirmations > 0) {
                            var obj = utxo_list[key];
                            // Find the private key of this utxo (signingPk)
                            let signingPk = utxo_addr_wif
                            .filter(pk=>RM_WALLET.generateFloKeys(pk).address===obj.address); 
                            
                            if(typeof signingPk[0]=="string") {
                              signing_private_keys_array.push(signingPk[0]);
                            } else continue;
                            sum += obj.amount;

                            if (btc_eq_receiving_amount <= sum) {
                                trx.addinput(obj.txid, obj.vout, obj.scriptPubKey);
                                break;
                            } else {
                                trx.addinput(obj.txid, obj.vout, obj.scriptPubKey);
                            }
                        }
                    }

                    if (sum <= 0) {
                        console.log(utxo_list);
                        throw new Error("ERROR: No amount found in UTXO.");
                    }

                    // Output cannot be greater than input
                    if (sum < btc_eq_receiving_amount) {
                        btc_eq_receiving_amount = sum;
                    }

                    if (btc_eq_receiving_amount - miners_fee <= 0)
                        throw new Error(
                            `Error: btc_eq_receiving_amount cannot be less than miners_fee.`
                        );

                    btc_eq_receiving_amount = btc_eq_receiving_amount - miners_fee;
                    
                    trx.addoutput(receiver_address, btc_eq_receiving_amount);

                    let change_amount = 0;
                    if (sum - btc_eq_receiving_amount - miners_fee > 0) {
                        change_amount = sum - btc_eq_receiving_amount - miners_fee;
                    }

                    if (change_amount > 0) {
                        if(typeof change_adress !== "string"
                        || change_adress.length<1) {
                          let change_adress_keygen = RM_WALLET.generateFloKeys(utxo_addr_wif[0]);
                          change_adress = change_adress_keygen.address;
                        }
                        trx.addoutput(change_adress, change_amount);
                    }
                    var sendFloData = `localbitcoinpluslus tx: Send ${btc_eq_receiving_amount} ${crypto_type} to ${receiver_address}.`; //flochange adding place for flodata -- need a validation of 1024 chars
                    if (custom_floData.length > 0) {
                        sendFloData = custom_floData;
                    }
                    if (crypto_type == "FLO" || crypto_type == "FLO_TEST") {
                        trx.addflodata(sendFloData); // flochange .. create this function
                    }

                    try {
                        console.log(trx);

                        let signedTxHash = trx.sign(signing_private_keys_array, 1); //SIGHASH_ALL DEFAULT 1
                        console.log(signedTxHash);

                        var http = new XMLHttpRequest();
                        var tx_send_url = `${blockchain_explorer}/api/tx/send`;
                        var params = `{"rawtx":"${signedTxHash}"}`;
                        http.open("POST", tx_send_url, true);
                        http.setRequestHeader("Content-type", "application/json");
                        http.onreadystatechange = function () {
                            if (http.readyState == 4) {
                                if (http.status == 200) {
                                    console.log(http.responseText);
                                    let response_obj = {
                                        signedTxHash: signedTxHash,
                                        txid: http.responseText
                                    };
                                    callback(response_obj);
                                } else {
                                    let response_obj = {
                                        signedTxHash: signedTxHash,
                                        txid: ""
                                    };
                                    callback(response_obj);
                                }
                            }
                        };
                        http.onerror = function () {
                            let response_obj = {
                                signedTxHash: signedTxHash,
                                txid: ""
                            };
                            callback(response_obj);
                        };
                        http.send(params);
                    } catch (error) {
                        showMessage(error);
                        throw new Error(error);
                    }
                } catch (error) {
                    throw new Error(error);
                }
            }
        })
    },
  /*Finds the best buy sell id match for a trade*/
  createTradePipes(trading_currency = "USD", backup_db = "") {
    let _readAllDB = readAllDB;
    if (typeof backup_db == "string" && backup_db.length > 0) {
      if (
        typeof localbitcoinplusplus.newBackupDatabase.db[backup_db] ==
        "object"
      ) {
        const foreign_db =
          localbitcoinplusplus.newBackupDatabase.db[backup_db];
        _readAllDB = foreign_db.backup_readAllDB.bind(foreign_db);
      } else {
        err_msg = `WARNING: Invalid Backup DB Instance Id: ${backup_db}.`;
        showMessage(err_msg);
        throw new Error(err_msg);
      }
    }
    try {
      _readAllDB("sellOrders").then(function(sellOrdersList) {
        if (sellOrdersList.length > 0) {
          sellOrdersList = sellOrdersList.filter(
            sellOrder => sellOrder.currency == trading_currency
          );
          _readAllDB("buyOrders").then(function(buyOrdersList) {
            if (buyOrdersList.length > 0) {
              buyOrdersList = buyOrdersList.filter(
                buyOrder => buyOrder.currency == trading_currency
              );
              let buy = [];
              let sell = [];
              let buysell = [];
              let buysellArray = [];
              let buyPipe = [];
              let sellPipe = [];
              localbitcoinplusplus.master_configurations.validTradingAmount.map(
                li => {
                  buy[li] = buyOrdersList.filter(
                    buyOrder => buyOrder.buy_price == li
                  );
                  sell[li] = sellOrdersList.filter(
                    sellOrder => sellOrder.buy_price == li
                  );
                  buysell[li] = {
                    buy: buy[li],
                    sell: sell[li]
                  };
                  buysellArray[li] = Object.entries(buysell[li]).map(
                    ([key, value]) => ({
                      key,
                      value
                    })
                  );
                  buyPipe = buysellArray[li][0];
                  sellPipe = buysellArray[li][1];
                  let n =
                    buyPipe.value.length < sellPipe.value.length
                      ? buyPipe.value.length
                      : sellPipe.value.length;

                  if (
                    buyPipe.value.length > 0 &&
                    sellPipe.value.length > 0
                  ) {
                    const RM_TRADE = new localbitcoinplusplus.trade();
                    const RM_RPC = new localbitcoinplusplus.rpc();
                    for (let i = 0; i < n; i++) {
                      RM_TRADE.launchTrade(
                        buyPipe.value[i],
                        sellPipe.value[i],
                        backup_db
                      ).then(supernode_res=>{
                          if (supernode_res!==false
                          && typeof supernode_res == "object") {
                              RM_RPC.send_rpc
                              .call(
                                  this,
                                  "trade_balance_updates",
                                  supernode_res
                              )
                              .then(server_res => doSend(server_res));
                          }
                      });
                    }
                  }
                }
              );
            }
          });
        }
      });
    } catch (e) {
      console.error(e);
    }
  },
  async launchTrade(buyPipeObj, sellPipeObj, backup_db = "") {
      let _addDB = addDB;
      let _readDB = readDB;
      let _readDBbyIndex = readDBbyIndex;
      let _readAllDB = readAllDB;
      let _updateinDB = updateinDB;
      let _removeinDB = removeinDB;
      let _removeByIndex = removeByIndex;
      let _removeAllinDB = removeAllinDB;
      if (typeof backup_db == "string" && backup_db.length > 0) {
          if (
              typeof localbitcoinplusplus.newBackupDatabase.db[backup_db] ==
              "object"
          ) {
              const foreign_db =
                  localbitcoinplusplus.newBackupDatabase.db[backup_db];
              _addDB = foreign_db.backup_addDB.bind(foreign_db);
              _readDB = foreign_db.backup_readDB.bind(foreign_db);
              _readDBbyIndex = foreign_db.backup_readDBbyIndex.bind(foreign_db);
              _readAllDB = foreign_db.backup_readAllDB.bind(foreign_db);
              _updateinDB = foreign_db.backup_updateinDB.bind(foreign_db);
              _removeinDB = foreign_db.backup_removeinDB.bind(foreign_db);
              _removeByIndex = foreign_db.backup_removeByIndex.bind(foreign_db);
          } else {
              err_msg = `WARNING: Invalid Backup DB Instance Id: ${backup_db}.`;
              showMessage(err_msg);
              throw new Error(err_msg);
          }
      }
      if (
          buyPipeObj.order_type == "buy" &&
          sellPipeObj.order_type == "sell" &&
          buyPipeObj.buy_price == sellPipeObj.buy_price &&
          buyPipeObj.currency == sellPipeObj.currency &&
          buyPipeObj.product == sellPipeObj.product
      ) {
          const RM_TRADE = new localbitcoinplusplus.trade();
          const RM_WALLET = new localbitcoinplusplus.wallets();
          let err_msg;
          // Check buyer's cash balance
          const buyer_cash_id = `${buyPipeObj.trader_flo_address}_${buyPipeObj.currency}`;
          const buyPipeCashRes = await _readDB("cash_balances", buyer_cash_id);
          if (
              typeof buyPipeCashRes == "object" &&
              typeof buyPipeCashRes.cash_balance == "number"
          ) {
              let buyer_cash_balance = parseFloat(buyPipeCashRes.cash_balance);

              let buy_price_btc = parseFloat(buyPipeObj.buy_price);
              if (buyer_cash_balance < buy_price_btc) {
                  err_msg = "Insufficient cash balance of buyer.";
                  console.warn(err_msg);
                  return false;
              }
              // calculate equivalent BTC for x amount of Cash
              let eqBTCBuyer = RM_TRADE.calculateCryptoEquivalentOfCash(
                  buy_price_btc,
                  buyPipeObj.currency,
                  buyPipeObj.product
              );

              if (
                  !isNaN(eqBTCBuyer) &&
                  eqBTCBuyer != "" &&
                  eqBTCBuyer != undefined
              ) {
                  eqBTCBuyer = helper_functions.truncateDecimals(eqBTCBuyer);
              }

              // Check seller's crypto balance
              let seller_btc_id = `${sellPipeObj.trader_flo_address}_${sellPipeObj.product}`;
              const sellPipeBTCRes = await _readDB("crypto_balances", seller_btc_id);
              if (
                  typeof sellPipeBTCRes == "object" &&
                  typeof sellPipeBTCRes.crypto_balance == "number"
              ) {
                  let seller_btc_balance = helper_functions.truncateDecimals(sellPipeBTCRes.crypto_balance);
                  let sell_price_in_inr = parseFloat(sellPipeObj.buy_price);
                  let eqBTCSeller = RM_TRADE.calculateCryptoEquivalentOfCash(
                      sell_price_in_inr,
                      buyPipeObj.currency,
                      buyPipeObj.product
                  );
                  if (
                      !isNaN(eqBTCSeller) &&
                      eqBTCSeller != "" &&
                      eqBTCSeller != undefined
                  ) {
                      eqBTCSeller = helper_functions.truncateDecimals(eqBTCSeller);
                      if (seller_btc_balance < eqBTCSeller) {
                          err_msg = "Insufficient BTC balance of seller.";
                          console.warn(err_msg);
                          return false;
                      }

                      // Get Buyer's crypto balance
                      let buyerBTCResponseObject;
                      let buyer_btc_id = `${buyPipeObj.trader_flo_address}_${buyPipeObj.product}`;
                      const buyPipeBTCRes = await _readDB("crypto_balances", buyer_btc_id);

                      // Increase buyer's crypto balance
                      if (
                          typeof buyPipeBTCRes == "object" &&
                          typeof buyPipeBTCRes.crypto_balance == "number"
                      ) {
                          buyPipeBTCRes.crypto_balance =
                              helper_functions.truncateDecimals(buyPipeBTCRes.crypto_balance) +
                              eqBTCBuyer;
                          buyerBTCResponseObject = buyPipeBTCRes;
                      } else {
                          // The user bought BTC for first time
                          buyerBTCResponseObject = {
                              id: buyer_btc_id,
                              trader_flo_address: buyPipeObj.trader_flo_address,
                              crypto_balance: eqBTCBuyer,
                              crypto_currency: buyPipeObj.product
                          };
                      }
                      
                      // Get Seller's cash balance
                      let sellerCashResponseObject;
                      const seller_cash_id = `${sellPipeObj.trader_flo_address}_${buyPipeObj.currency}`;
                      const sellPipeCashRes = await _readDB("cash_balances", seller_cash_id);

                      // Increase seller's Cash balance
                      if (
                          typeof sellPipeCashRes == "object" &&
                          typeof sellPipeCashRes.cash_balance == "number" &&
                          !isNaN(sellPipeCashRes.cash_balance)
                      ) {
                          sellPipeCashRes.cash_balance =
                              parseFloat(sellPipeCashRes.cash_balance) +
                              sell_price_in_inr;
                          sellerCashResponseObject = sellPipeCashRes;
                      } else {
                          // User got cash for the first time
                          let seller_cash_id = `${sellPipeObj.trader_flo_address}_${buyPipeObj.currency}`;
                          sellerCashResponseObject = {
                              id: seller_cash_id,
                              trader_flo_address:
                                  sellPipeObj.trader_flo_address,
                              currency: buyPipeObj.currency,
                              cash_balance: sell_price_in_inr
                          };
                      }

                      // Decrease buyer cash balance
                      buyPipeCashRes.cash_balance = buyer_cash_balance - buy_price_btc;
                      let buyerCashResponseObject = buyPipeCashRes;

                      // Decrease seller BTC balance
                      sellPipeBTCRes.crypto_balance = helper_functions.truncateDecimals(seller_btc_balance - eqBTCSeller);
                      
                      let sellerBTCResponseObject = sellPipeBTCRes;

                      // supernode data query
                      const user_data = await readDB("localbitcoinUser", "00-01");
                      if (
                          typeof user_data == "object" &&
                          typeof localbitcoinplusplus.wallets
                              .MY_SUPERNODE_PRIVATE_KEY == "string" &&
                          localbitcoinplusplus.wallets
                              .MY_SUPERNODE_PRIVATE_KEY.length > 0
                      ) {
                          // Delete orders
                          try {
                              await _removeinDB("buyOrders", buyPipeObj.id);
                              await _removeinDB("sellOrders", sellPipeObj.id);
                          } catch (error) {
                              console.error(`WARNING: Failed to delete respective buy 
                                  and sell orders in an operation: 
                                  ${error} `);
                              return false;
                          }

                          // Update balances

                          let buyerCashResponseObjectPromise = await _updateinDB(
                              "cash_balances",
                              buyerCashResponseObject
                          );
                          console.log("buyerCashResponseObjectPromise", buyerCashResponseObjectPromise);
                          
                          let sellerCashResponseObjectPromise = await _updateinDB(
                              "cash_balances",
                              sellerCashResponseObject
                          );
                          console.log("sellerCashResponseObjectPromise", sellerCashResponseObjectPromise);
                          
                          let buyerBTCResponseObjectPromise = await _updateinDB(
                              "crypto_balances",
                              buyerBTCResponseObject
                          );
                          console.log("buyerBTCResponseObjectPromise", buyerBTCResponseObjectPromise);
                          
                          let sellerBTCResponseObjectPromise = await _updateinDB(
                              "crypto_balances",
                              sellerBTCResponseObject
                          );
                          console.log("sellerBTCResponseObjectPromise", sellerBTCResponseObjectPromise);

                          // Prepare response
                          let trade_infos = {
                              buy_order_id: buyPipeObj.id,
                              sell_order_id: sellPipeObj.id,
                              buyer_flo_id: buyPipeObj.trader_flo_address,
                              seller_flo_id: sellPipeObj.trader_flo_address
                          };

                          let trade_infos_str = JSON.stringify(trade_infos);
                          let buyerCashResponseObjectStr = JSON.stringify(
                              buyerCashResponseObjectPromise
                          );
                          let sellerCashResponseObjectStr = JSON.stringify(
                              sellerCashResponseObjectPromise
                          );
                          let buyerBTCResponseObjectStr = JSON.stringify(
                              buyerBTCResponseObjectPromise
                          );
                          let sellerBTCResponseObjectStr = JSON.stringify(
                              sellerBTCResponseObjectPromise
                          );

                          let res_str = `${trade_infos_str}${buyerCashResponseObjectStr}${sellerCashResponseObjectStr}${buyerBTCResponseObjectStr}${sellerBTCResponseObjectStr}`;

                          let hashed_data = Crypto.SHA256(res_str);

                          // Signing of the data by Supernode
                          let signed_data = RM_WALLET.sign(
                              hashed_data,
                              localbitcoinplusplus.wallets
                                  .MY_SUPERNODE_PRIVATE_KEY
                          );

                          const getPrimarySuObj = await localbitcoinplusplus.kademlia
                              .determineClosestSupernode(buyPipeObj.trader_flo_address);
                          let response_for_client = {
                              trade_infos: trade_infos,
                              buyer_cash_data: buyerCashResponseObjectPromise,
                              seller_cash_data: sellerCashResponseObjectPromise,
                              buyer_btc_data: buyerBTCResponseObjectPromise,
                              seller_btc_data: sellerBTCResponseObjectPromise,
                              data_hash: hashed_data,
                              supernode_sign: signed_data,
                              supernodePubKey:
                                  user_data.myLocalFLOPublicKey,
                              trader_flo_address:
                                  getPrimarySuObj[0].data.id
                          };
                          return response_for_client;
                      }                                                    
                      
                  }
              } else return false;
          } else return false;
      }
  },
  cancelTrade(trade_id, trader_flo_address, trade_type) {
    if (typeof trade_id !== "string") {
      showMessage("WARNING: Failed to cancel the order.");
      return false;
    }
    const RM_WALLET = new localbitcoinplusplus.wallets();
    const RM_RPC = new localbitcoinplusplus.rpc();

    const signed_trade_id = RM_WALLET.sign(
      trade_id,
      localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
    );
    const cancel_trade_request_object = {
      job: `cancel_trade_request`,
      trade_id: trade_id,
      signed_trade_id: signed_trade_id,
      trader_flo_address: trader_flo_address,
      trade_type: trade_type,
      receiver_flo_address: localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS
    };

    RM_RPC.send_rpc
      .call(this, "cancel_trade", cancel_trade_request_object)
      .then(cancel_trade_request => doSend(cancel_trade_request));
  },
  getAssetTradeAndWithdrawLimit(flo_id, crypto, fiat, backup_db = "") {
    let _readDB = readDB;
    let _readDBbyIndex = readDBbyIndex;
    if (typeof backup_db == "string" && backup_db.length > 0) {
      if (
        typeof localbitcoinplusplus.newBackupDatabase.db[backup_db] ==
        "object"
      ) {
        const foreign_db =
          localbitcoinplusplus.newBackupDatabase.db[backup_db];
        _readDB = foreign_db.backup_readDB.bind(foreign_db);
        _readDBbyIndex = foreign_db.backup_readDBbyIndex.bind(foreign_db);
      } else {
        err_msg = `WARNING: Invalid Backup DB Instance Id: ${backup_db}.`;
        showMessage(err_msg);
        throw new Error(err_msg);
      }
    }

    const RM_TRADE = new localbitcoinplusplus.trade();

    let user_crypto_id = `${flo_id}_${crypto}`;
    let user_fiat_id = `${flo_id}_${fiat}`;

    const user_balance_crypto_promise = _readDB(
      "crypto_balances",
      user_crypto_id
    );
    const user_balance_fiat_promise = _readDB(
      "cash_balances",
      user_fiat_id
    );
    const user_sell_orders_promise = _readDBbyIndex(
      "sellOrders",
      "trader_flo_address",
      flo_id
    ).then(res =>
      res.filter(resp => resp.currency == fiat && resp.product == crypto)
    );
    const user_buy_orders_promise = _readDBbyIndex(
      "buyOrders",
      "trader_flo_address",
      flo_id
    ).then(res =>
      res.filter(resp => resp.currency == fiat && resp.product == crypto)
    );
    //const user_fiat_withdraw_request_promise = _readDBbyIndex("withdraw_cash", "trader_flo_address", flo_id);
    const user_fiat_withdraw_request_promise = Promise.resolve([]); // Balance is already deducted during withdraw btn click
    const user_crypto_withdraw_request_promise = _readDBbyIndex(
      "withdraw_btc",
      "trader_flo_address",
      flo_id
    );

    return Promise.all([
      user_balance_crypto_promise,
      user_balance_fiat_promise,
      user_sell_orders_promise,
      user_buy_orders_promise,
      user_fiat_withdraw_request_promise,
      user_crypto_withdraw_request_promise
    ])
      .then(resp => {
        let user_balance_crypto = resp[0];
        let user_balance_fiat = resp[1];
        let user_sell_orders = resp[2];
        let user_buy_orders = resp[3];
        let user_fiat_withdraw_request = resp[4];
        let user_crypto_withdraw_request = resp[5];

        let remaining_crypto_credit = 0;
        let remaining_fiat_credit = 0;
        let user_crypto_balance_value =
          typeof user_balance_crypto == "undefined"
            ? 0
            : user_balance_crypto.crypto_balance;
        let user_cash_balance_value =
          typeof user_balance_fiat == "undefined"
            ? 0
            : user_balance_fiat.cash_balance;

        let sell_order_crypto_equivalent = 0;
        user_sell_orders.map(sell_orders => {
          sell_order_crypto_eq = RM_TRADE.calculateCryptoEquivalentOfCash(
            sell_orders.buy_price,
            sell_orders.currency,
            sell_orders.product
          );
          sell_order_crypto_equivalent += helper_functions.truncateDecimals(sell_order_crypto_eq);
        });

        let withdraw_crypto_equivalent = 0;
        user_crypto_withdraw_request.map(req => {
          withdraw_crypto_eq = req.receivingBTC;
          withdraw_crypto_equivalent += helper_functions.truncateDecimals(withdraw_crypto_eq);
        });

        remaining_crypto_credit =
          user_crypto_balance_value -
          sell_order_crypto_equivalent -
          withdraw_crypto_equivalent;

        if(remaining_crypto_credit<0) remaining_crypto_credit = 0;  

        let total_buy_orders_cash = 0;
        user_buy_orders.map(
          buy_order => (total_buy_orders_cash += buy_order.buy_price)
        );

        let withdraw_cash_equivalent = 0;
        user_fiat_withdraw_request.map(req => {
          withdraw_cash_equivalent += req.withdraw_amount;
        });

        remaining_fiat_credit =
          user_cash_balance_value -
          total_buy_orders_cash -
          withdraw_cash_equivalent;

        if(remaining_fiat_credit<0) remaining_fiat_credit = 0; 

        return {
          remaining_crypto_credit: remaining_crypto_credit,
          remaining_fiat_credit: remaining_fiat_credit
        };
      })
      .catch(e => console.warn(e));
  }
};
</script>

<!-- Helper functions -->
<script>
let helper_functions = {
  // AJAX Get
  ajaxGet: async function(url) {
    try {
      //await the response of the fetch call
      let response = await fetch(url);
      //proceed once the first promise is resolved.
      let data = await response.json();
      //proceed only when the second promise is resolved
      return data;
    } catch (error) {
      var xhr = new XMLHttpRequest();
      xhr.open("GET", url);
      xhr.onload = function() {
        if (xhr.status === 200) {
          return xhr.responseText;
        } else {
          showMessage(`WARNING: Failed to get data from ${url} with status ${xhr.status}.`);
          return false;
        }
      };
      xhr.send();
    }
  },

  //AJAX Post
  ajaxPost: function(url = ``, data = {}) {
    return fetch(url, {
      method: "POST", // *GET, POST, PUT, DELETE, etc.
      mode: "cors", // no-cors, cors, *same-origin
      cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
      credentials: "same-origin", // include, *same-origin, omit
      headers: {
        "Content-Type": "application/json"
        // "Content-Type": "application/x-www-form-urlencoded",
      },
      redirect: "follow", // manual, *follow, error
      referrer: "no-referrer", // no-referrer, *client
      body: JSON.stringify(data) // body data type must match "Content-Type" header
    }).then(response => response.json()); // parses response to JSON
  },

  // Create unique id
  unique_id: function() {
    return `${+new Date()}_${Math.random()
      .toString(36)
      .substr(2, 9)}`;
  },
  check_crypto_recvd_status: function(crypto, crypto_address, amount_to_receive=0) {
      try {
          let explorer;
          let decimal = 100000000;
          let crypto_diff = localbitcoinplusplus.master_configurations.btcTradeMargin;
          switch (crypto) {
              case "BTC":
                  explorer = localbitcoinplusplus.server.btc_mainnet;
                  break;
              case "BTC_TEST":
                  explorer = localbitcoinplusplus.server.btc_testnet;
                  break;
              case "FLO":
                  explorer = localbitcoinplusplus.server.flo_mainnet;
                  decimal = 1;
                  crypto_diff = crypto_diff/decimal;
                  break;
              case "FLO_TEST":
                  explorer = localbitcoinplusplus.server.flo_testnet;
                  decimal = 1;
                  crypto_diff = crypto_diff/decimal;
                  break;
              default:
                  break;
          }

          let url = `${explorer}/api/addr/${crypto_address}/balance`;
          console.log(url);
          helper_functions.ajaxGet(url).then(async balance => {
              if (!isNaN(balance) && parseFloat(balance) > 0) {
                  balance = helper_functions.truncateDecimals(balance / decimal);
                  console.log(balance);

                  if (balance - amount_to_receive > crypto_diff) {
                      RM_RPC.send_rpc
                          .call(this, "refresh_deposit_status_request", {
                          receiver_flo_address:
                              localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS,
                          trader_flo_address:
                              localbitcoinplusplus.wallets.my_local_flo_address
                          })
                          .then(refresh_deposit_status => doSend(refresh_deposit_status));
                      
                  } else {
                      await localbitcoinplusplus.actions.delay(60000);
                      check_crypto_recvd_status(crypto, crypto_address, amount_to_receive);
                  }
              }
          });

      } catch (error) {
          throw new Error(error)
      }
  },
  // https://stackoverflow.com/a/9232092/5348972
  truncateDecimals: (num, digits=8)=> {
      num = Number(num).toFixed(digits);
      if(num<0.000000001) num = 0;
      if(num>100000000000) {
          console.trace(num);
          throw new Error("Maximum 'number' upper limit crossed");
      }
      var numS = num.toString(),
          decPos = numS.indexOf('.'),
          substrLength = decPos == -1 ? numS.length : 1 + decPos + digits,
          trimmedResult = numS.substr(0, substrLength),
          finalResult = isNaN(trimmedResult) ? 0 : trimmedResult;

      if((Number.MIN_SAFE_INTEGER>finalResult)||(finalResult>Number.MAX_SAFE_INTEGER)) {
          console.trace(num);
          throw new Error("SAFE INTEGER Limit Crossed.");
      }
      return Number(finalResult);
  }
};
</script>

<!-- JSON RPC Library Starts (https://github.com/oliver-moran/json-rpc) -->
<script language="javascript" type="text/javascript">
var JSON_RPC = {};

var id = 0,
  callbacks = {};

/**
 * Constructs a new JSON-RPC Request
 * @param method A String containing the name of the method to be invoked.
 * @param params (optional) A Structured value that holds the parameter values to be used during the invocation of the method.
 */
JSON_RPC.Request = function(method, params, globalParams = {}) {
  this.jsonrpc = "2.0";
  this.method = method;
  if (typeof params !== "undefined") {
    this.params = params;
  }
  this.globalParams = globalParams;
  this.id = id++;
};

// Implements getters and setters for the result of a JSON-RPC Request.
// The result may be an any Object or primitive
Object.defineProperty(JSON_RPC.Request.prototype, "result", {
  get: function() {
    return this._result;
  },
  set: function(result) {
    delete this.method; // remove the method name
    delete this.params; // remove the params
    delete this.error; // remove error state if it exists
    delete this.globalParams; // remove globalParams
    this._result = result;
  }
});

// Implements getters and setters for the error state of a JSON-RPC Request.
// Error should be a JSON_RPC.Error object
Object.defineProperty(JSON_RPC.Request.prototype, "error", {
  get: function() {
    return this._error;
  },
  set: function(error) {
    delete this.method; // remove the method name
    delete this.params; // remove the params
    delete this.result; // remove result state if it exists
    delete this.globalParams; // remove globalParams if it exists
    this._error = error;
  }
});

/**
 * Returns a String representation of a JSON-RPC Request
 * @returns A JSON String
 */
JSON_RPC.Request.prototype.toString = function() {
  var rpc = {
    jsonrpc: this.jsonrpc,
    id: this.id
  };

  if (this.method !== undefined) rpc.method = this.method;
  if (this.params !== undefined) rpc.params = this.params;
  if (this.result !== undefined) rpc.result = this.result;
  if (this.error !== undefined) rpc.error = this.error;
  if (this.globalParams !== undefined)
    rpc.globalParams = this.globalParams;

  return JSON.stringify(rpc);
};

/**
 * Constructs a new JSON-RPC Notification
 * @param method A String containing the name of the method to be invoked.
 * @param params (optional) A Structured value that holds the parameter values to be used during the invocation of the method.
 */
JSON_RPC.Notification = function(method, params, globalParams) {
  this.jsonrpc = "2.0";
  this.method = method;
  if (typeof params !== "undefined") {
    this.params = params;
  }
  if (typeof globalParams !== "undefined") {
    this.globalParams = globalParams;
  }
};

/**
 * Returns a String representation of a JSON-RPC Notification
 * @returns A JSON String
 */
JSON_RPC.Notification.prototype.toString = function() {
  var rpc = {
    jsonrpc: this.jsonrpc,
    method: this.method,
    params: this.params,
    globalParams: this.globalParams
  };

  return JSON.stringify(rpc);
};

/**
 * Constructs a new JSON-RPC Errror object
 * @params code A Number that indicates the error type that occurred. -32768 to -32000 are reserved.
 * @param message (optional) A String providing a short description of the error.
 * @param data (optional) A Primitive or Structured value that contains additional information about the error.
 */
JSON_RPC.Error = function(code, message, data) {
  this.code = code;
  if (typeof message == "string") this.message = message;
  if (data !== undefined) this.data = data;
};

// stock errors
JSON_RPC.PARSE_ERROR = new JSON_RPC.Error(
  -32700,
  "An error occurred on the server while parsing the JSON text."
);
JSON_RPC.INVALID_REQUEST = new JSON_RPC.Error(
  -32600,
  "The JSON sent is not a valid Request object."
);
JSON_RPC.METHOD_NOT_FOUND = new JSON_RPC.Error(
  -32601,
  "The method does not exist / is not available."
);
JSON_RPC.INVALID_PARAMS = new JSON_RPC.Error(
  -32602,
  "Invalid method parameter(s)."
);
JSON_RPC.INTERNAL_ERROR = new JSON_RPC.Error(
  -32603,
  "Internal JSON-RPC error."
);

/**
 * Parses a JSON-RPC string and converts to a JSON-RPC object or an Array of such strings.
 * @params rpc A String or Array to parse to a JSON-RPC object.
 */
JSON_RPC.parse = function(rpc) {
  // batch?
  if (rpc.constructor === Array) {
    var arr = [];
    rpc.forEach(function(el) {
      arr.push(JSON_RPC.parse(el));
    });
    return arr;
  }

  // parsable?
  var rpc;
  try {
    rpc = JSON.parse(rpc);
  } catch (err) {
    var obj = new JSON_RPC.Request();
    obj.result = JSON_RPC.PARSE_ERROR;
    obj.id = null;
    return obj;
  }

  // 2.0?
  if (rpc.jsonrpc !== "2.0") {
    var obj = new JSON_RPC.Request();
    obj.result = JSON_RPC.INVALID_REQUEST;
    obj.id = null;
    return obj;
  }

  // request or notification?
  var obj =
    rpc.id === undefined
      ? new JSON_RPC.Notification(rpc.method, rpc.params)
      : new JSON_RPC.Request(rpc.method, rpc.params);
  // have an ID?
  if (rpc.id !== undefined) obj.id = rpc.id;
  // is it a result?
  if (rpc.result !== undefined) obj.result = rpc.result;
  // is it a error?
  if (rpc.error !== undefined) {
    obj.error = new JSON_RPC.Error(
      rpc.error.code,
      rpc.error.message,
      rpc.error.data
    );
  }

  // parsed :-)
  return obj;
};

/* JSON RPC Library Ends */

/*******************************************************
  Custom Localbitcoin++ JSON-RPC code starts here 
  *********************************************************/

/* Websocket Code Starts here */

var output;

function kickInit() {
  showPopup('main_loader', 'no')
  const RM_WALLET = new localbitcoinplusplus.wallets();
  const BACKUP_DB = (localbitcoinplusplus.newBackupDatabase.db = []);
  const backUpSupernodesWS = (localbitcoinplusplus.backupWS = []);
  return new Promise(resolve => {
    readDB("localbitcoinUser", "00-01").then(async function(idbData) {
      if (
        typeof idbData !== "object" || 
        typeof idbData.myLocalFLOPublicKey == "undefined" ||
        idbData.myLocalFLOPublicKey.trim() == ""
      ) {
        let user_pvt_key = await RM_WALLET.manually_assign_my_private_key();

        if (user_pvt_key.trim() == "" || user_pvt_key.length < 1)
          user_pvt_key = null;

        let newKeys = RM_WALLET.generateFloKeys(user_pvt_key);
        if (
          typeof newKeys == "object" &&
          newKeys.privateKeyWIF.length > 0 &&
          newKeys.address.length > 0
        ) {
          localbitcoinplusplusObj.myLocalFLOAddress = newKeys.address;
          localbitcoinplusplusObj.myLocalFLOPublicKey = newKeys.pubKeyHex;
          localbitcoinplusplusObj.lastConnectedTime = +new Date();

          await updateinDB("localbitcoinUser", localbitcoinplusplusObj);

          // launch KBuckets
          launchKBuckects = await localbitcoinplusplus.kademlia.launchKBucket(
            newKeys.address
          );

          if (!launchKBuckects) {
            const kmsg = `ERROR: Failed to build KBuckets. System cannot proceed further.`;
            showMessage(kmsg);
            throw new Error(kmsg);
          }

          await localbitcoinplusplus.kademlia.restoreSupernodeKBucket();

          wsUri = await localbitcoinplusplus.kademlia.getSupernodeSeed(
            localbitcoinplusplusObj.myLocalFLOAddress
          );

          // Add close supernodes to KBucket
          wsUri.map(d => {
            localbitcoinplusplus.kademlia.addNewUserNodeInKbucket(
              localbitcoinplusplus.BASE_BLOCKCHAIN,
              d.trader_flo_address,
              { id: d.trader_flo_address }
            );
            showMessage(
              `INFO: Added Supernode Id ${d.trader_flo_address} to KBucket.`
            );
          });

          await startWebSocket(`${WS}://${wsUri[0].ip}`);

          RM_WALLET.distributeShamirsSecretShares(newKeys.privateKeyWIF)
            .then(() => privateKeyBuilder())
            .finally(() => {
              setTimeout(async function() {
                if (
                  typeof localbitcoinplusplus.wallets
                    .MY_SUPERNODE_PRIVATE_KEY !== "string" ||
                  localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
                    .length < 1
                ) {
                  await RM_WALLET.manually_assign_my_private_key();
                } else if (
                  typeof localbitcoinplusplus.wallets
                    .MY_SUPERNODE_PRIVATE_KEY == "string" &&
                  localbitcoinplusplus.is_ui_loaded == false
                ) {
                  dataBaseUIOperations();
                }
                clearTimeout();
              }, 10000);
            });

          // Connect with backup supernodes
          if (
            localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
              idbData.myLocalFLOPublicKey
            )
          ) {

            wsUri.map((uri, index) => {
              // Do not serve to any requests unless data is fully synced.
              // localbitcoinplusplus.services[
              //   `can_serve_${uri.trader_flo_address}`
              // ] = false;

              if (index > 0) {
                let dbname = `su_backup_${uri.trader_flo_address}`;
                BACKUP_DB[uri.trader_flo_address] = new newBackupDB(
                  dbname
                );
                BACKUP_DB[uri.trader_flo_address].createNewDB();
              }
            });
          }

          localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS =
            wsUri[0].trader_flo_address;

          resolve(true);
          return;
        } else {
          err_msg = "Failed to generate new FLO keys. Please retry.";
          showMessage(err_msg);
          throw new Error(err_msg);
        }
      }

      // launch KBucekts
      launchKBuckects = await localbitcoinplusplus.kademlia.launchKBucket(
        idbData.myLocalFLOAddress
      );

      if (!launchKBuckects) {
        const kmsg = `ERROR: Failed to build KBuckets. System cannot proceed further.`;
        showMessage(kmsg);
        throw new Error(kmsg);
      }

      await localbitcoinplusplus.kademlia.restoreSupernodeKBucket();

      wsUri = await localbitcoinplusplus.kademlia.getSupernodeSeed(
        idbData.myLocalFLOAddress
      );

      const getClosestSuList = await readAllDB("myClosestSupernodes");

      reactor.dispatchEvent("createClosestSupernodesObject", getClosestSuList);
      reactor.dispatchEvent("createCashierStatusObject", getClosestSuList);

      if (
        localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
          idbData.myLocalFLOPublicKey
        )
      ) {
        if (
          getClosestSuList.length <
            localbitcoinplusplus.master_configurations.supernodesPubKeys
        ) {
          showMessage(
            `INFO: Invalid connection. Refreshing the closest supernode list in DB.`
          );
          
          wsUri = await localbitcoinplusplus.kademlia.updateClosestSupernodeSeeds(
            idbData.myLocalFLOAddress
          );

          // Reconfigure ws conns
          reactor.dispatchEvent('resolve_backup_ws_connections');

          // Possible entry of new Supernode. Export data of users
          localbitcoinplusplus.actions.exportUserDataFromOneSupernodeToAnother(idbData.myLocalFLOAddress);

        }
      }

      // Add close supernodes to KBucket
      wsUri.map(d => {
        localbitcoinplusplus.kademlia.addNewUserNodeInKbucket(
          localbitcoinplusplus.BASE_BLOCKCHAIN,
          d.trader_flo_address,
          { id: d.trader_flo_address }
        );
        showMessage(
          `INFO: Added Supernode Id ${d.trader_flo_address} to KBucket.`
        );
      });

      // Connect with primary supernodes
      await startWebSocket(`${WS}://${wsUri[0].ip}`);

      // rebuild private key
      await privateKeyBuilder();

      setTimeout(async function() {
        hidePopup()
        if (
          typeof localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY !==
            "string" ||
          localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY.length < 1
        ) {
          await RM_WALLET.manually_assign_my_private_key();
        } else if (
          typeof localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY ==
            "string" &&
          localbitcoinplusplus.is_ui_loaded == false
        ) {
          dataBaseUIOperations();
        }
      }, 10000);

      localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS =
        wsUri[0].trader_flo_address;

      localbitcoinplusplus.services = {};

      // Connect with backup supernodes
      if (
        localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
          idbData.myLocalFLOPublicKey
        )
      ) {

        wsUri.map((uri, index) => {
          // Do not serve to any requests unless data is fully synced.
          // localbitcoinplusplus.services[
          //   `can_serve_${uri.trader_flo_address}`
          // ] = false;

          if (index > 0) {
            let dbname = `su_backup_${uri.trader_flo_address}`;
            BACKUP_DB[uri.trader_flo_address] = new newBackupDB(dbname);
            BACKUP_DB[uri.trader_flo_address].createNewDB();
          }
        });

      }

      resolve(true);
    });
  });
}

const backupSupernodesWebSocketObject = (localbitcoinplusplus.backupWS = function(
  ws_url
) {
  this.ws_url = ws_url;
  this.ws_connection = null;
});
backupSupernodesWebSocketObject.prototype = {
  connectWS() {
    this.ws_connection = new WebSocket(this.ws_url);
    const switchMyWS = new backupSupernodesWebSocketObject();
    this.ws_connection.onopen = async function(evt) {
      
      await reactor.dispatchEvent("backup_supernode_up", evt.srcElement.url);
      await reactor.dispatchEvent("remove_extra_backup_connections");
      
      limit_function_calls(async function() {
          await reactor.dispatchEvent("sync_primary_and_backup_db");
          await localbitcoinplusplus.actions.refresh_live_status_of_supernodes(true);
      }, 5000);  
      
    }.bind(this);
    this.ws_connection.onclose = function(evt) {
      reactor.dispatchEvent("backup_supernode_down", evt);
      limit_function_calls(async function() {
          await localbitcoinplusplus.actions.refresh_live_status_of_supernodes(true);
      }, 5000);
    }.bind(this);
    this.ws_connection.onmessage = function(evt) {
      let response = evt.data;
      console.log(`backup message: ${response}`);
      let is_corona_positive = quarantineCoronaElements(response);
      if(is_corona_positive===true) throw new Error("Response failed sanitization test."); 

      let isRequestToLinkIp = response.search("linkMyLocalIPToMyFloId");
      let isRequestToLinkOthersIp = response.search(
        "link_Others_Local_IP_To_Their_Flo_Id"
      );
      let incoming_msg_local_ip = ``;
      if (isRequestToLinkIp >= 0 || isRequestToLinkOthersIp >= 0) {
        handle_backup_server_messages(response);
        return;
      }
      var res_pos = response.indexOf("{");
      if (res_pos >= 0) {
        var res = response.substr(res_pos);
        let res_obj = JSON.parse(res);
        if (
          res_obj.method === "add_user_public_data" ||
          res_obj.method === "retrieve_shamirs_secret_btc_pvtkey" ||
          res_obj.method === "do_you_have_latest_data_for_this_supernode"
        ) {
          if(res_obj.method === "retrieve_shamirs_secret_btc_pvtkey"
          && typeof btc_pvt_arr=="object"
          && typeof res_obj.params[0].private_key_chunk=="object"
          && typeof res_obj.params[0].private_key_chunk.id=="string"
          ) {
              let btc_pvt_arr_str = JSON.stringify(Object.values(btc_pvt_arr));
              if(btc_pvt_arr_str.search(res_obj.params[0].private_key_chunk.id)>=0) {
                  return false; // This id is already sent by some other node
              }
          }  
          handle_backup_server_messages(response);
          return;
        }
        if (
          res_obj.method ===
            "sync_backup_supernode_from_backup_supernode" ||
          res_obj.method ===
            "sync_primary_supernode_from_backup_supernode_response" ||
          res_obj.method ===
            "sync_backup_supernode_from_backup_supernode_response"
        ) {
          onMessage(response);
          return;
        }
      
        // If you want to send Shamir shares from here write the req code below
        if (res_obj.method == "send_back_shamirs_secret_btc_pvtkey") {
          console.log(res_obj);
          return;
        }
      }
    }.bind(this);
    this.ws_connection.onerror = function(evt) {
      console.error(evt);
    };
  },

  async getFloIdFromWSUrl(ws_url) {
    ws_url = ws_url.replace(/\/$/, "");
    const my_closest_su_list = await readAllDB("myClosestSupernodes");
    const disconnected_su = my_closest_su_list.filter(
      (my_closest_su_url_list, index) => {
        //let my_closest_su_url = `ws://${my_closest_su_url_list.ip}:${my_closest_su_url_list.port}`;
        let my_closest_su_url = `${WS}://${my_closest_su_url_list.ip}`;
        return my_closest_su_url == ws_url;
      }
    );
    if (typeof disconnected_su[0].trader_flo_address == "string") {
      return Promise.resolve(disconnected_su[0].trader_flo_address);
    } else {
      return Promise.reject(false);
    }
  },

  async updateSupernodeAvailabilityStatus(ws_url, status) {
    if(!localbitcoinplusplus.master_configurations.supernodesPubKeys
      .includes(localbitcoinplusplus.wallets.my_local_flo_public_key)) return; 
    let disconnected_su_flo_id = "";
    try {
      disconnected_su_flo_id = await this.getFloIdFromWSUrl(ws_url);
    } catch (e) {
      disconnected_su_flo_id = ws_url; // Input is a FLO Id not url
    }

    const get_disconnected_su_details_list = await readDBbyIndex(
      "myClosestSupernodes",
      "trader_flo_address",
      disconnected_su_flo_id
    );
    const get_disconnected_su_details = get_disconnected_su_details_list[0];
    if (typeof get_disconnected_su_details !== "object") {
      showMessage(
        `WARNING: Failed to update status of "${ws_url}" to ${status}.`
      );
      return;
    }
    // Code to prevent update if status is already eq to is_live value
    if (typeof localbitcoinplusplus.myClosestSupernodes[disconnected_su_flo_id] == "object") {
        if (localbitcoinplusplus.myClosestSupernodes[disconnected_su_flo_id].is_live === status) return;
    }
    localbitcoinplusplus.myClosestSupernodes[disconnected_su_flo_id].is_live = status;
    get_disconnected_su_details.is_live = status;
    get_disconnected_su_details.timestamp = +new Date();
    const myClosestSupernodesStatusRes = await updateinDB("myClosestSupernodes", get_disconnected_su_details);
    if(status!==myClosestSupernodesStatusRes.is_live) throw new Error(`ERROR: Failed to update the status of Supernode to ${status}.`);
    localbitcoinplusplus.myClosestSupernodes[disconnected_su_flo_id].is_live = myClosestSupernodesStatusRes.is_live;
    let su_status = (myClosestSupernodesStatusRes.is_live === true) ? "connected" : "disconnected";
    showMessage(`INFO: Supernode ${ws_url} is now ${su_status}.`);
  },

  async switchToBackupWS(disconnected_url = "") {
    const user_data = await readDB("localbitcoinUser", "00-01");
    const user_flo_address = user_data.myLocalFLOAddress;
    const user_flo_pubKey = user_data.myLocalFLOPublicKey;
    disconnected_url = disconnected_url.replace(/\/$/, "");
    let last_connect_supernode_flo_id =
      user_data.last_connect_supernode_flo_id;

    // Only User nodes can switch websocket connections
    if (
      typeof user_flo_pubKey !== "string" ||
      localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
        user_flo_pubKey
      )
    )
      return false;

    let ideal_supernode = "";

    const myClosestSupernodesArray = await readAllDB(
      `myClosestSupernodes`
    );

    let nextClosestSupernodeElem = myClosestSupernodesArray.filter(
      (wew, index) => {
       // let ww = `ws://${wew.ip}:${wew.port}`;
        let ww = `${WS}://${wew.ip}`;
        if (typeof z == "boolean" && z) {
          z = false;
          if (
            !localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
              user_flo_pubKey
            )
          ) {
            localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS =
              wew.trader_flo_address;
          }
          return ww;
        }
        if (ww == disconnected_url) z = true;
      }
    );

    if(nextClosestSupernodeElem.length<1) {
      let ms = `Error: Failed to connect to any supernode.`;
      showMessage(ms);
      return Promise.reject(ms);  
    }

    //ideal_supernode = `ws://${nextClosestSupernodeElem[0].ip}:${nextClosestSupernodeElem[0].port}`;
    ideal_supernode = `${WS}://${nextClosestSupernodeElem[0].ip}`;

    await startWebSocket(ideal_supernode);

    if (websocket.readyState === 1) {
      if (
        !localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
          localbitcoinplusplus.wallets.my_local_flo_public_key
        )
      ) {
        // Connection established, build private key and UI
        await privateKeyBuilder();

        localbitcoinplusplus.actions.delay(10000).then(async() => {
          if (
            typeof localbitcoinplusplus.wallets
              .MY_SUPERNODE_PRIVATE_KEY !== "string" ||
            localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY.length <
              1
          ) {
            const RM_WALLET = new localbitcoinplusplus.wallets();
            await RM_WALLET.manually_assign_my_private_key();
          } else if (
            typeof localbitcoinplusplus.wallets
              .MY_SUPERNODE_PRIVATE_KEY == "string" &&
            localbitcoinplusplus.is_ui_loaded == false
          ) {
            dataBaseUIOperations();
          }
        });
      }

      return Promise.resolve(true);
    } else {
      let ms = `Error: Failed to connect to any supernode.`;
      showMessage(ms);
      return Promise.reject(ms);
    }
  }
};

function startWebSocket(wsUri) {
  return new Promise((resolve, reject) => {
    websocket = new WebSocket(wsUri);
    websocket.onopen = function(evt) {
      resolve(onOpen(evt));
    };
    websocket.onclose = function(evt) {
      reject(onClose(evt));
    };
    websocket.onmessage = function(evt) {
      resolve(onMessage(evt));
    };
    websocket.onerror = function(evt) {
      reject(onError(evt));
    };
  });
}

async function onOpen(evt) {
  reactor.dispatchEvent("new_supernode_connected", evt);
  const localUser = await readDB("localbitcoinUser", "00-01");
  if (typeof localUser == "object" && typeof localUser.myLocalFLOAddress == "string") {
      localbitcoinplusplus.wallets.my_local_flo_address =
          localUser.myLocalFLOAddress;
      localbitcoinplusplus.wallets.my_local_flo_public_key =
          localUser.myLocalFLOPublicKey;
  }

  if(localbitcoinplusplus.master_configurations.supernodesPubKeys
  .includes(localbitcoinplusplus.wallets.my_local_flo_public_key)) {
      // delete buy and sell orders
      let remove_promises = [];
      remove_promises.push(removeAllinDB('buyOrders'));
      remove_promises.push(removeAllinDB('sellOrders'));
      
      for(let dbs in localbitcoinplusplus.newBackupDatabase.db) {
          remove_promises.push(localbitcoinplusplus
              .newBackupDatabase.db[dbs].backup_removeAllinDB('buyOrders'));
          remove_promises.push(localbitcoinplusplus
              .newBackupDatabase.db[dbs].backup_removeAllinDB('sellOrders'));

      }
      let remove_promises_res = await Promise.all(remove_promises);
      console.log(remove_promises_res);
  }
  
  readAllDB("myClosestSupernodes")
  .then(sconn => {
    const switchMyWS = new backupSupernodesWebSocketObject();
    sconn.map((m, i) => {
      if (i > 0)
        switchMyWS.updateSupernodeAvailabilityStatus(
          m.trader_flo_address,
          false
        );
    });
  });
}

function onClose(evt) {
  // Also close the backup ws conns
  if(localbitcoinplusplus.master_configurations.supernodesPubKeys
  .includes(localbitcoinplusplus.wallets.my_local_flo_public_key)) {
      for(conn in localbitcoinplusplus.backupWS) {
          localbitcoinplusplus.backupWS[conn].ws_connection.close();
      }
  } else {
      reactor.dispatchEvent("primary_supernode_down", evt);
  }
}

async function onMessage(evt) {
  var response = evt.data || evt;
  console.log("RESPONSE: " + response);

  // Check if request is clean or not
  let is_corona_positive = quarantineCoronaElements(response);
  if(is_corona_positive===true) throw new Error("Response failed sanitization test.");

  const isMsgFromCashier = response.search("__FOR__CASHIER__");
  if (isMsgFromCashier >= 0) {
    handleCashierMessages(response);
    return;
  }

  var res_pos = response.indexOf("{");
  if (res_pos >= 0) {
    // Link Temporary IP Address to FLO ID
    let isRequestToLinkIp = response.search("linkMyLocalIPToMyFloId");
    let isRequestToLinkOthersIp = response.search(
      "link_Others_Local_IP_To_Their_Flo_Id"
    );
    let incoming_msg_local_ip = ``;
    if (isRequestToLinkIp >= 0 || isRequestToLinkOthersIp >= 0) {
      let index_of_ip = response.indexOf(" ");
      if (index_of_ip >= 0) {
        incoming_msg_local_ip = response.substr(0, index_of_ip);
      }
    }

    var res = response.substr(res_pos);
    try {
      var res_obj = JSON.parse(res);

      const RM_WALLET = new localbitcoinplusplus.wallets();
      const RM_TRADE = new localbitcoinplusplus.trade();
      const RM_RPC = new localbitcoinplusplus.rpc();

      if(res_obj.protocol === "__ALL_SUPERNODES_MSG__") {
          if (!localbitcoinplusplus.master_configurations.supernodesPubKeys
          .includes(res_obj.su_pubKey)) return;

          // Break any possiblity of a loop 
          if(typeof res_obj.initialSender==="string" 
          && res_obj.initialSender===
          localbitcoinplusplus.wallets.my_local_flo_address) return;
          
          const msg_obj = {};     
          msg_obj.protocol = res_obj.protocol;
          msg_obj.event = res_obj.event;
          msg_obj.data = {subject_flo_id: res_obj.data.subject_flo_id};
          msg_obj.hash = Crypto.SHA256(msg_obj);
          let isValidMsg = RM_WALLET.verify(
              msg_obj.hash,
              res_obj.sign,
              res_obj.su_pubKey
          );

          if(isValidMsg!==true) return;
          
          switch (res_obj.event) {
              case "supernode_went_down":
                  // This should be run by only 1 Supernode who is the reciever
                  if(localbitcoinplusplus.wallets.my_local_flo_address 
                  !== res_obj.receiverFloAddress) return;
                  reactor.dispatchEvent('fireNodeGoodByeEvent', res_obj.data.subject_flo_id);
                  
                  // SYNC DATA OF ALL SUPERNODES IN MIDDLE OF SENDER AND RECEIVER
                  // Get the Supernodes in between sender and receiver of this message
                  const all_supernodes = Object.keys(localbitcoinplusplus.myClosestSupernodes);
                  const tableArray = [
                      "deposit",
                      "cash_deposits",
                      "withdraw_cash",
                      "withdraw_btc",
                      "cash_balances",
                      "crypto_balances",
                      "buyOrders",
                      "sellOrders",
                      "system_btc_reserves_private_keys",
                      "supernode_private_key_chunks"
                  ];
                  /* Sync/Forward data of all Supernodes between res_obj.initialSender (i.e
                      node which informed you about a another node's death)
                      and you.
                  */
                  for (let q = all_supernodes.length-1; q>=0; q--) {
                      const su_obj = localbitcoinplusplus.myClosestSupernodes[all_supernodes[q]];
                      if(su_obj.trader_flo_address===res_obj.initialSender) break;
                      if(su_obj.trader_flo_address===localbitcoinplusplus.wallets.my_local_flo_address) 
                      continue;
                      
                      // Send data to next Supernode
                      localbitcoinplusplus.actions.get_sharable_db_data(
                          tableArray,
                          su_obj.trader_flo_address
                      ).then(su_db_data=>{

                          for(recvr in localbitcoinplusplus.backupWS) {
                              su_db_data.trader_flo_address = su_obj.trader_flo_address;
                              su_db_data.receiver_flo_address = recvr;
                          
                              RM_RPC.send_rpc
                              .call(
                                  this,
                                  "sync_backup_supernode_from_backup_supernode_response",
                                  su_db_data
                              )
                              .then(server_sync_response => doSend(server_sync_response, recvr)
                              );
                          }
                      });

                      // Sync data from other Supernodes as well
                      // localbitcoinplusplus.actions.sync_backup_supernode_from_backup_supernode(
                      //     localbitcoinplusplus.wallets.my_local_flo_address,
                      //     "",
                      //     su_obj.trader_flo_address
                      // );
                  }
                  break;

              case "supernode_came_back":
                  if(localbitcoinplusplus.wallets.my_local_flo_address 
                  !== res_obj.receiverFloAddress) return;
                  reactor.dispatchEvent('resolve_backup_ws_connections');
                  break;

              case "refresh_all_supernodes_status":
                  reactor.dispatchEvent('resolve_backup_ws_connections');

              case "delete_this_user_data_from_backup":
                  if(res_obj.data.request=="REMOVE_DB_DATA_OF_USER"
                  && typeof localbitcoinplusplus.newBackupDatabase.db[res_obj.db_name]=="object") {
                      localbitcoinplusplus.actions.delete_db_data_for_single_user(
                          res_obj.trader_flo_address, res_obj.tableArray, res_obj.db_name);            
                  }
                  limit_function_calls(async function() {
                      await reactor.dispatchEvent("sync_primary_and_backup_db");
                  }, 60000);
                  
                  break;   
          
              default:
                  break;
          }
          return;
      }

      if (
        typeof res_obj.globalParams !== "object" ||
        (localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
          localbitcoinplusplus.wallets.my_local_flo_public_key
        ) &&
          typeof res_obj.globalParams.receiversList == "object" &&
          !res_obj.globalParams.receiversList.includes(
            localbitcoinplusplus.wallets.my_local_flo_address
          ))
      )
        return;

      if (
        typeof res_obj.globalParams.receiverFloId == "string" &&
        res_obj.globalParams.receiverFloId !==
          localbitcoinplusplus.wallets.my_local_flo_address
      )
        return;

      const isIncomingMessageValid = await validateIncomingMessage(res);

      if (!isIncomingMessageValid) return;

      if (typeof res_obj.globalParams.senderFloId !== "string")
        throw new Error(
          `WARNING: The request did not contain sender FLO Id. Request Aborted.`
        );

      // Check if request is from primary user or backup user
      // If request is from backup user, divert the request to backup onmessage event
      let get_requester_supernode = "";
      if (typeof res_obj.params[0].trader_flo_address == "string") {
        get_requester_supernode = await localbitcoinplusplus.kademlia.determineClosestSupernode(
          res_obj.params[0].trader_flo_address
        );

        res_obj.globalParams.primarySupernode =
          get_requester_supernode[0].data.id;
      }

      if (
        (typeof get_requester_supernode[0] !== "object" ||
          typeof get_requester_supernode[0].data.id !== "string") &&
        typeof res_obj.globalParams.primarySupernode !== "string"
      ) {
        console.log(
          "******NEED TO ADD PRIMARY SU IN BELOW METHOD******: "
        );
        console.log(res_obj);
      }

      if (
        get_requester_supernode.length > 0 &&
        get_requester_supernode[0].data.id !==
          localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS
      ) {
        processBackupUserOnMesssageRequest(response);
        return;
      } else if (
        typeof res_obj.globalParams.primarySupernode == "string" &&
        res_obj.globalParams.primarySupernode !==
          localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS
      ) {
        if (
          typeof res_obj.globalParams.receiverFloId !== "string" ||
          res_obj.globalParams.receiverFloId ==
            localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS
        ) {
          // ** Changed it for "retrieve_shamirs_secret_btc_pvtkey" when backup su is requeter
          //res_obj.globalParams.receiverFloId !== localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS) {
          processBackupUserOnMesssageRequest(response);
          return;
        }

        handle_backup_server_messages(response);
        return;
      }

      // Don't serve the request if data is not synced.
      if (
        localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
          localbitcoinplusplus.wallets.my_local_flo_public_key
        )
      ) {
        let byPassMethods = [
          "sync_backup_supernode_from_backup_supernode_response",
          "sync_primary_supernode_from_backup_supernode_response",
          "supernode_message",
          "store_shamirs_secret_pvtkey_shares",
          "send_back_shamirs_secret_supernode_pvtkey",
          "retrieve_shamirs_secret_supernode_pvtkey",
          "send_back_shamirs_secret_btc_pvtkey",
          "retrieve_shamirs_secret_btc_pvtkey",
          "add_user_public_data",
          "link_My_Local_IP_To_My_Flo_Id",
          "link_Others_Local_IP_To_Their_Flo_Id",
          "sync_data_by_vector_clock",
        ];

        if (!byPassMethods.includes(res_obj.method)) {
          if (
            typeof res_obj.globalParams.primarySupernode !== "string"
          ) {
            return false;
          }
        }
      }

      if (typeof res_obj.method !== "undefined") {
        let response_from_sever;

        switch (res_obj.method) {
          case "supernode_message":
            if (
              localbitcoinplusplus.master_configurations.supernodesPubKeys
              .includes(res_obj.nodePubKey) &&  
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              let received_resp = res_obj.params[0];
              try {
                if (
                  received_resp.trader_flo_address.length > 0 &&
                  received_resp.server_msg.length > 0
                ) {
                  readDB("localbitcoinUser", "00-01").then(async function(
                    res
                  ) {
                    if (
                      typeof res == "object" &&
                      res.myLocalFLOAddress.length > 0
                    ) {
                      if (
                        typeof received_resp.receiver_flo_address ==
                        "string"
                      ) {
                        if (
                          res.myLocalFLOAddress ===
                          received_resp.receiver_flo_address
                        ) {
                          notify(received_resp.server_msg);
                          showMessage(received_resp.server_msg);
                          return false;
                        }
                      } else {
                        const myPrimarySu = await readDB(
                          "myClosestSupernodes",
                          1
                        );
                        let getPrimarySuObj = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                          received_resp.trader_flo_address
                        );
                        const primarySupernode =
                          getPrimarySuObj[0].data.id;
                        if (
                          primarySupernode ==
                          myPrimarySu.trader_flo_address
                        ) {
                          notify(received_resp.server_msg);
                          showMessage(received_resp.server_msg);
                          return false;
                        }
                      }
                    }
                  });
                }
              } catch (error) {
                throw new Error(error);
              }
            }
            break;
          case "trade_buy":
            response_from_sever = RM_RPC.receive_rpc_response.call(
              this,
              JSON.stringify(res_obj)
            );
            break;
          case "trade_buy_request_response":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              let buyOrders_data = res_obj.params[0];

              if (
                typeof localbitcoinplusplus.master_configurations
                  .supernodesPubKeys == "object" &&
                localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                  buyOrders_data.supernodePubKey
                )
              ) {
                let isDataSignedBySuperNode = RM_WALLET.verify(
                  buyOrders_data.data_hash,
                  buyOrders_data.supernode_sign,
                  buyOrders_data.supernodePubKey
                );
                if (isDataSignedBySuperNode === true) {
                  // Add buy order
                  addDB("buyOrders", buyOrders_data).then(() => {
                    if(localbitcoinplusplus.wallets.my_local_flo_address
                    ===buyOrders_data.trader_flo_address) {
                      displayTradeOrders(localbitcoinplusplus.wallets.my_local_flo_address)
                      notify(`Your buy order is placed successfully.`);
                    }
                  });
                }
              }
            }
            break;
          case "trade_sell":
            response_from_sever = RM_RPC.receive_rpc_response.call(
              this,
              JSON.stringify(res_obj)
            );
            break;
          case "trade_sell_request_response":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              let sellOrders_data = res_obj.params[0];
              if (
                typeof localbitcoinplusplus.master_configurations
                  .supernodesPubKeys == "object" &&
                localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                  sellOrders_data.supernodePubKey
                )
              ) {
                let isDataSignedBySuperNode = RM_WALLET.verify(
                  sellOrders_data.data_hash,
                  sellOrders_data.supernode_sign,
                  sellOrders_data.supernodePubKey
                );
                if (isDataSignedBySuperNode === true) {
                  // Add buy order
                  addDB("sellOrders", sellOrders_data).then(() => {
                      if(localbitcoinplusplus.wallets.my_local_flo_address
                    ===sellOrders_data.trader_flo_address) {
                      displayTradeOrders(localbitcoinplusplus.wallets.my_local_flo_address);
                      notify(`Your sell order is placed successfully.`);
                    }
                    
                  });
                }
              }
            }
            break;
          case "sync_with_supernode":
            response_from_sever = RM_RPC.receive_rpc_response.call(
              this,
              JSON.stringify(res_obj)
            );
            break;
          case "server_sync_response":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              let su_db_data = res_obj.params[0];
              if (
                localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                  localbitcoinplusplus.wallets.my_local_flo_public_key
                )
              )
                return;
              if (
                typeof localbitcoinplusplus.wallets
                  .my_local_flo_address !== "string" ||
                su_db_data.trader_flo_address !==
                  localbitcoinplusplus.wallets.my_local_flo_address
              )
                return false;

              (async function() {
                for (let tableStoreName in su_db_data) {
                  // skip loop if the property is from prototype
                  if (
                    tableStoreName == "trader_flo_address" ||
                    tableStoreName == "receiver_flo_address" ||
                    !su_db_data.hasOwnProperty(tableStoreName)
                  )
                    continue;

                  try {
                    let obj = su_db_data[tableStoreName];
                    if (
                      [
                        "userPublicData"
                      ].includes(tableStoreName)
                    ) {
                      if (obj.length > 0) {
                        for (var prop in obj) {
                          if (!obj.hasOwnProperty(prop)) continue;
                          await updateinDB(
                            tableStoreName,
                            obj[prop],
                            obj[prop].trader_flo_address
                          );
                        }
                      }
                    } else {
                      let resdbdata = await removeAllinDB(tableStoreName);
                      if (resdbdata !== false) {
                        if (obj.length > 0) {
                          for (var prop in obj) {
                            if (!obj.hasOwnProperty(prop)) continue;
                            await addDB(resdbdata, obj[prop]);
                          }
                        }
                      }
                    }
                  } catch (error) {
                    console.log(error);
                  }
                }
              })();
            }
            break;

            case "service_denied":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              if (
                typeof localbitcoinplusplus.wallets.my_local_flo_address !== "string" 
                || res_obj.params[0].receiver_flo_address !== localbitcoinplusplus.wallets.my_local_flo_address 
                || localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                  localbitcoinplusplus.wallets.my_local_flo_public_key
                )
              )
                return false;

                if(typeof res_obj.params[0].msg=="string" && res_obj.params[0].msg.length>0) {
                  websocket.close();
                  showMessage(res_obj.params[0].msg);
                }
            }
              break;

          case "deposit_asset_request":
            response_from_sever = RM_RPC.receive_rpc_response.call(
              this,
              JSON.stringify(res_obj)
            );
            break;
          case "deposit_asset_request_response":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object" &&
              typeof res_obj.params[0].data == "object"
            ) {
              let resp = res_obj.params[0];
              if (
                RM_WALLET.verify(
                  resp.data.depositDataHash,
                  resp.data.order_validator_sign,
                  resp.data.order_validator_public_key
                )
              ) {
                addDB("deposit", resp.data);
                if (typeof resp.withdrawer_data == "object") {
                  updateinDB(
                    "withdraw_cash",
                    resp.withdrawer_data,
                    resp.withdrawer_data.trader_flo_address
                  );
                }
                readDB("localbitcoinUser", "00-01").then(async function(user) {
                  if (
                    typeof user == "object" &&
                    user.myLocalFLOAddress == resp.data.trader_flo_address
                  ) {
                    document.getElementById("server_deposit_crypto_addr")
                      .innerText = resp.data.btc_address;  
                    let counterTraderAccountAddress = resp.msg;
                    showMessage(counterTraderAccountAddress);
                    notify(counterTraderAccountAddress);                   
                  }
                });
              }
            }
            break;
          case "deposit_cash_request":
            response_from_sever = RM_RPC.receive_rpc_response.call(
              this,
              JSON.stringify(res_obj)
            );
            break;
          case "deposit_cash_request_response":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object" &&
              typeof res_obj.params[0].data == "object"
            ) {
              let resp = res_obj.params[0];
              if (
                RM_WALLET.verify(
                  resp.data.depositDataHash,
                  resp.data.order_validator_sign,
                  resp.data.order_validator_public_key
                )
              ) {
                addDB("cash_deposits", resp.data);

                readDB("localbitcoinUser", "00-01").then(function(user) {
                  if (
                    typeof user == "object" &&
                    user.myLocalFLOAddress == resp.data.trader_flo_address
                  ) {
                      let counterTraderAccountAddress = `Please pay ${resp.data.currency} ${resp.data.depositing_amount} to following UPI ID: 
                                              ${resp.msg}`;
                      showMessage(counterTraderAccountAddress);
                      notify(counterTraderAccountAddress);
                  }
                });
              }
            }
            break;
          case "withdraw_request_method":
            response_from_sever = RM_RPC.receive_rpc_response.call(
              this,
              JSON.stringify(res_obj)
            );
            break;
          case "withdrawal_request_response":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              if (
                RM_WALLET.verify(
                  res_obj.params[0].withdrawDataHash,
                  res_obj.params[0].order_validator_sign,
                  res_obj.params[0].order_validator_public_key
                )
              ) {
                if(typeof res_obj.params[0].error==="boolean"
                && typeof res_obj.params[0].msg==="string") {
                  showMessage(res_obj.params[0].msg);
                  return true;
                }  
                addDB("withdraw_cash", res_obj.params[0]).then(() => {
                  showMessage(
                    `Your cash withdrawal request is placed successfully.`
                  );
                });
              }
            }
            break;
          case "cancel_trade":
              response_from_sever = RM_RPC.receive_rpc_response.call(
                  this,
                  JSON.stringify(res_obj)
              );
            break;
          case "trade_balance_updates":
            if (
              !localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                res_obj.nodePubKey
              )
            )
              return;
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              const trade_balance_res = res_obj.params[0];
              // Verify data
              let trade_info_str = JSON.stringify(
                trade_balance_res.trade_infos
              );
              let buyer_cash_data_str = JSON.stringify(
                trade_balance_res.buyer_cash_data
              );
              let seller_cash_data_str = JSON.stringify(
                trade_balance_res.seller_cash_data
              );
              let buyer_btc_data_str = JSON.stringify(
                trade_balance_res.buyer_btc_data
              );
              let seller_btc_data_str = JSON.stringify(
                trade_balance_res.seller_btc_data
              );

              let res_str = `${trade_info_str}${buyer_cash_data_str}${seller_cash_data_str}${buyer_btc_data_str}${seller_btc_data_str}`;
              let hashed_data = Crypto.SHA256(res_str);

              if (
                localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                  trade_balance_res.supernodePubKey
                )
              ) {
                if (
                  RM_WALLET.verify(
                    hashed_data,
                    trade_balance_res.supernode_sign,
                    trade_balance_res.supernodePubKey
                  )
                ) {
                  // Delete orders in clients DB
                  try {
                    removeinDB(
                      "buyOrders",
                      trade_balance_res.trade_infos.buy_order_id
                    );
                    removeinDB(
                      "sellOrders",
                      trade_balance_res.trade_infos.sell_order_id
                    );
                  } catch (error) {
                    callback(false);
                    throw new Error(error);
                  }

                  // Update balances in clients DB
                  try {
                    let p1 = updateinDB(
                      "cash_balances",
                      trade_balance_res.buyer_cash_data,
                      trade_balance_res.trade_infos.buyer_flo_id,
                      true,
                      false
                    );
                    let p2 = updateinDB(
                      "cash_balances",
                      trade_balance_res.seller_cash_data,
                      trade_balance_res.trade_infos.seller_flo_id,
                      true,
                      false
                    );
                    let p3 = updateinDB(
                      "crypto_balances",
                      trade_balance_res.buyer_btc_data,
                      trade_balance_res.trade_infos.buyer_flo_id,
                      true,
                      false
                    );
                    let p4 = updateinDB(
                      "crypto_balances",
                      trade_balance_res.seller_btc_data,
                      trade_balance_res.trade_infos.seller_flo_id,
                      true,
                      false
                    );

                    Promise.all([p1,p2,p3,p4]).then(()=>{
                          displayTradeOrders(localbitcoinplusplus.wallets.my_local_flo_address)
                        // Update balances
                          displayBalances(
                              localbitcoinplusplus.wallets.my_local_flo_address
                          );
                          notify("Trade successfull. Balances updated.")
                          showMessage("Trade successfull. Balances updated.")
                    })
                    .catch(e => {throw new Error(e)});
                    
                  } catch (error) {
                    callback(false);
                    throw new Error(error);
                  }
                }
              }
            }
            break;
          case "store_shamirs_secret_pvtkey_shares":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              addDB("supernode_private_key_chunks", res_obj.params[0]);
            }
            break;
          case "send_back_shamirs_secret_supernode_pvtkey":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              readDB(
                "supernode_private_key_chunks",
                res_obj.params[0].chunk_val
              ).then(function(res) {
                if (typeof res == "object") {
                  RM_RPC.send_rpc
                    .call(
                      this,
                      "retrieve_shamirs_secret_supernode_pvtkey",
                      {
                        private_key_chunk: res
                      }
                    )
                    .then(send_pvtkey_req => doSend(send_pvtkey_req));
                } else {
                  RM_RPC.send_rpc
                    .call(
                      this,
                      "retrieve_shamirs_secret_supernode_pvtkey",
                      ""
                    )
                    .then(send_pvtkey_req => doSend(send_pvtkey_req));
                }
              });
            }
            break;
          case "retrieve_shamirs_secret_supernode_pvtkey":
            if (typeof retrieve_pvtkey_counter == "undefined")
              retrieve_pvtkey_counter = 0;
            let runUIFunc = false;
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object" &&
              typeof res_obj.params[0].private_key_chunk == "object" &&
              typeof localbitcoinplusplus.wallets
                .supernode_transaction_key == "object"
            ) {
              let share =
                res_obj.params[0].private_key_chunk.privateKeyChunks;
              if (
                typeof share !== "undefined" &&
                !MY_PRIVATE_KEY_SHAMIRS_SHARES.includes(share)
              ) {
                MY_PRIVATE_KEY_SHAMIRS_SHARES.push(share);
              }
              if (MY_PRIVATE_KEY_SHAMIRS_SHARES.length == 5) {
                RM_WALLET.rebuild_my_private_key(
                  localbitcoinplusplus.wallets.supernode_transaction_key
                );
                runUIFunc = true;
              }
            } else {
              if (
                retrieve_pvtkey_counter == 10 &&
                typeof localbitcoinplusplus.wallets
                  .MY_SUPERNODE_PRIVATE_KEY == "undefined"
              ) {
                RM_WALLET.manually_assign_my_private_key();
                runUIFunc = true;
                retrieve_pvtkey_counter++;
              }
            }
            if (
              typeof localbitcoinplusplus.wallets
                .MY_SUPERNODE_PRIVATE_KEY == "string" &&
              localbitcoinplusplus.is_ui_loaded == false
            ) {
              dataBaseUIOperations();
              return;
            }
            retrieve_pvtkey_counter++;
            break;
          case "send_back_shamirs_secret_btc_pvtkey":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              if (
                typeof res_obj.nodePubKey != "string"
                || !localbitcoinplusplus.master_configurations.supernodesPubKeys
                .includes(res_obj.nodePubKey)
                || !localbitcoinplusplus.master_configurations.supernodesPubKeys
                .includes(localbitcoinplusplus.wallets.my_local_flo_public_key)
              ) return;
              
              readDB(
                "supernode_private_key_chunks",
                res_obj.params[0].chunk_val
              ).then(function(res) {
                RM_RPC.send_rpc
                  .call(this, "retrieve_shamirs_secret_btc_pvtkey", {
                    retrieve_pvtkey_req_id:
                      res_obj.params[0].retrieve_pvtkey_req_id,
                    private_key_chunk: res,
                    withdraw_id: res_obj.params[0].withdraw_id,
                    db_inst: res_obj.params[0].db_inst,
                    receiver_flo_address: res_obj.globalParams.senderFloId
                  })
                  .then(send_pvtkey_req => doSend(send_pvtkey_req));
              });
            }
            break;
          case "delete_shamirs_secret_btc_pvtkey":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              if (
                typeof res_obj.nodePubKey != "string"
                || !localbitcoinplusplus.master_configurations.supernodesPubKeys
                .includes(res_obj.nodePubKey)
                || !localbitcoinplusplus.master_configurations.supernodesPubKeys
                .includes(localbitcoinplusplus.wallets.my_local_flo_public_key)
              ) return;
              
              removeinDB(
                "supernode_private_key_chunks",
                res_obj.params[0].chunk_val
              );
            }
            break;  
          case "retrieve_shamirs_secret_btc_pvtkey":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object" &&
              typeof res_obj.params[0].private_key_chunk == "object" &&
              typeof res_obj.params[0].retrieve_pvtkey_req_id ==
                "string" &&
              typeof res_obj.params[0].withdraw_id == "string" &&
              typeof localbitcoinplusplus.wallets.my_local_flo_address ==
                "string" &&
              res_obj.params[0].receiver_flo_address ===
                localbitcoinplusplus.wallets.my_local_flo_address
            ) {
              // This message was for Backup Supernode and is meant to be run in processBackupMessages()
              if (
                res_obj.params[0].db_inst !==
                localbitcoinplusplus.wallets.my_local_flo_address
              )
                return;

              let shamirs_shares_response = res_obj.params[0];
              let retrieve_pvtkey_req_id =
                res_obj.params[0].retrieve_pvtkey_req_id;
              let withdraw_id = res_obj.params[0].withdraw_id;
              if (typeof btc_pvt_arr !== "object") btc_pvt_arr = [];
              if (
                typeof btc_pvt_arr[retrieve_pvtkey_req_id] == "undefined"
              )
                {
                    btc_pvt_arr[retrieve_pvtkey_req_id] = [];
                    localbitcoinplusplus.actions.delay(15*60*1000)
                    .then(()=>{
                        if(typeof btc_pvt_arr[retrieve_pvtkey_req_id]=="object") {
                          btc_pvt_arr[retrieve_pvtkey_req_id] = null;
                        }
                    });
                  }

              // Filter function below logic source -
              // https://stackoverflow.com/a/9229821/5348972
              let seen_chunk_id_list = [];

              btc_pvt_arr[retrieve_pvtkey_req_id].filter(function(item) {
                if(typeof item.private_key_chunk=="object" &&
                      typeof item.private_key_chunk.id=="string" &&
                      !seen_chunk_id_list.hasOwnProperty(
                      item.private_key_chunk.id
                  ) ) {
                      return seen_chunk_id_list.push(item.private_key_chunk.id);
                  }
              });

              if (
                !seen_chunk_id_list.includes(
                  shamirs_shares_response.private_key_chunk.id
                ) &&
                typeof shamirs_shares_response.private_key_chunk.id ==
                  "string"
              ) {
                btc_pvt_arr[retrieve_pvtkey_req_id].push(
                  shamirs_shares_response
                );
              }
              if (
                btc_pvt_arr[retrieve_pvtkey_req_id].length ===
                localbitcoinplusplus.master_configurations
                  .ShamirsMaxShares
              ) {
                delete res_obj.params[0].private_key_chunk;
                let btc_pk_shares_array = btc_pvt_arr[retrieve_pvtkey_req_id]
                      .map(pkChunks => {
                          if (typeof pkChunks.private_key_chunk !== "undefined")
                              return pkChunks.private_key_chunk.privateKeyChunks;
                      })
                      .filter(val => val !== undefined);
                  console.log(btc_pk_shares_array);
                const btc_reserves = await readDB("system_btc_reserves_private_keys", retrieve_pvtkey_req_id);
                if (typeof btc_reserves !== "object") {
                  console.warn(`Record for ${retrieve_pvtkey_req_id} not found in system_btc_reserves_private_keys`);
                  break;
                }

                let transaction_key = localbitcoinplusplus.actions
                      .master_decrypt(btc_reserves.supernode_transaction_key);
                if(typeof transaction_key=="string") {
                    transaction_key = JSON.parse(transaction_key);
                }     
                if (transaction_key.length <= 0) {
                  console.warn(`Failed to build tx key for ${retrieve_pvtkey_req_id} in system_btc_reserves_private_keys`);
                  break;
                }
                let btc_private_key = RM_WALLET.rebuild_private_key(
                    btc_pk_shares_array,
                    transaction_key
                );
                if (btc_private_key.length <= 0) {
                  console.warn(`Failed to build private key for ${retrieve_pvtkey_req_id} in system_btc_reserves_private_keys`);
                  break;
                }
                console.log(btc_private_key);

                const withdraw_res = await readDB("withdraw_btc", withdraw_id);
                if(typeof withdraw_res=="object" 
                && typeof withdraw_res.utxo_addr=="object") {
                  const RM_WALLET = new localbitcoinplusplus.wallets;
                  let crypto_addr_gen = RM_WALLET.generateFloKeys(btc_private_key, withdraw_res.product);
                  let crypto_addr = crypto_addr_gen.address;
                  if(!Object.values(withdraw_res.utxo_addr).includes(crypto_addr)) {
                      console.warn(`${crypto_addr} deposit address not present in withdraw id ${withdraw_id}`);
                      break;
                  }

                  if(typeof localbitcoinplusplus.btc_private_key_array!=="object"
                  || Object.keys(localbitcoinplusplus.btc_private_key_array).length==0) {
                      localbitcoinplusplus.btc_private_key_array={};
                  }
                  if(typeof localbitcoinplusplus.btc_private_key_array[withdraw_id] !== "object"
                   || localbitcoinplusplus.btc_private_key_array[withdraw_id]==null) {
                      localbitcoinplusplus.btc_private_key_array[withdraw_id] = [];
                  }
                  localbitcoinplusplus.btc_private_key_array[withdraw_id].push(btc_private_key);

                  if(localbitcoinplusplus.btc_private_key_array[withdraw_id].length
                      ===Object.values(withdraw_res.utxo_addr).length) {
                      // When all the private keys are built successfully proceed further
                      res_obj.params[0].btc_private_key_array = 
                          localbitcoinplusplus.btc_private_key_array[withdraw_id];

                      res_obj.params[0].trader_flo_address = withdraw_res.trader_flo_address;
                      RM_RPC.receive_rpc_response.call(
                          this,
                          JSON.stringify(res_obj)
                      );
                      if(!delete localbitcoinplusplus.btc_private_key_array[withdraw_id]) {
                          localbitcoinplusplus.btc_private_key_array[withdraw_id] = null; 
                      }
                  }
                  
                }
                btc_pvt_arr = Object.keys(btc_pvt_arr).filter(f=>f!==retrieve_pvtkey_req_id);
              }
            }
            break;

          case "update_all_new_cash_withdraw_recorded_in_db":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              let withdraw_success_response = res_obj.params[0];
              
              // Only the relevent user node should get response
              if (
                withdraw_success_response.trader_flo_address !==
                localbitcoinplusplus.wallets.my_local_flo_address
              )
                return;

              let update_cash_balance_obj_res = {
                withdrawer_cash_data:
                  withdraw_success_response.withdrawer_cash_data
              };
              let update_cash_balance_obj_res_str = JSON.stringify(
                update_cash_balance_obj_res
              );
              let update_cash_balance_obj_res_hash = Crypto.SHA256(
                update_cash_balance_obj_res_str
              );
              let update_cash_balance_obj_res_verification = RM_WALLET.verify(
                update_cash_balance_obj_res_hash,
                withdraw_success_response.sign,
                withdraw_success_response.publicKey
              );

              if (
                update_cash_balance_obj_res_hash ==
                  withdraw_success_response.hash &&
                update_cash_balance_obj_res_verification == true
              ) {
                // Since this is a response from Supernode update and increase
                // data by vectorClock is false  
                updateinDB(
                  "cash_balances",
                  withdraw_success_response.withdrawer_cash_data,
                  withdraw_success_response.withdrawer_cash_data.id,
                  false, 
                  false
                ).then(()=>{
                  // Update balances
                  displayBalances(
                      localbitcoinplusplus.wallets.my_local_flo_address
                  );
                  showMessage('Balances updated.')
                })

                return true;
              }
              return false;
            }
            break;

          case "add_user_public_data":
            let supernode_flo_public_key =
              localbitcoinplusplus.wallets.my_local_flo_public_key;
            RM_RPC.filter_legit_requests(
              res_obj.params[0].trader_flo_address,
              function(is_valid_request) {
                if (is_valid_request !== true) return false;

                if (
                  typeof res_obj.params == "object" &&
                  typeof res_obj.params[0] == "object"
                ) {
                  let req_data = res_obj.params[0];
                  try {
                    let flo_address = bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(
                      req_data.trader_flo_pubKey
                    );

                    if (
                      flo_address == req_data.trader_flo_address &&
                      req_data.trader_flo_address.length > 0
                    ) {
                      let public_req_object = {
                        trader_flo_address: req_data.trader_flo_address,
                        trader_flo_pubKey: req_data.trader_flo_pubKey,
                        supernode_flo_public_key: supernode_flo_public_key,
                        trader_reputation: 0,
                        timestamp: +new Date()
                      };

                      addDB("userPublicData", public_req_object);

                      const RM_RPC = new localbitcoinplusplus.rpc();
                      RM_RPC.send_rpc
                        .call(
                          this,
                          "add_user_public_data_inBackup_db",
                          public_req_object
                        )
                        .then(add_user_public_data_req =>
                          doSend(add_user_public_data_req)
                        );
                    }
                  } catch (error) {
                    throw new Error(
                      "Invalid public key and flo address combination."
                    );
                  }
                }
              }
            );
            break;

          case "superNodeSignedAddUserPublicData":
            response_from_sever = RM_RPC.receive_rpc_response.call(
              this,
              JSON.stringify(res_obj)
            );
            doSend(JSON.stringify(response_from_sever)); // send response to client
            break;

          case "refresh_deposit_status_request":
            RM_RPC.filter_legit_requests(
              res_obj.params[0].trader_flo_address,
              is_valid_request => {
                if (is_valid_request !== true) return false;
                readDBbyIndex("deposit", "status", 1).then(function(res) {
                  res.map(function(deposit_trade) {
                    if (
                      localbitcoinplusplus.master_configurations.tradableAsset1.includes(
                        deposit_trade.product
                      )
                    ) {
                      validateDepositedBTCBalance(deposit_trade);
                    }
                  });
                });
              }
            );
            break;

          case "updateUserCryptoBalanceRequest":
            if (
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                res_obj.nodePubKey
              )
            ) {
              let updateUserCryptoBalanceResponseObject =
                res_obj.params[0];
              let updateUserCryptoBalanceResponseString = JSON.stringify(
                updateUserCryptoBalanceResponseObject.updatedBTCBalanceObject
              );
              let updateUserCryptoBalanceResponseStringHash = Crypto.SHA256(
                updateUserCryptoBalanceResponseString
              );
              let isBalanceLegit = RM_WALLET.verify(
                updateUserCryptoBalanceResponseStringHash,
                updateUserCryptoBalanceResponseObject.updatedBTCBalanceObjectSign,
                res_obj.nodePubKey
              );
              if (isBalanceLegit) {
                updateinDB(
                  "crypto_balances",
                  updateUserCryptoBalanceResponseObject.updatedBTCBalanceObject,
                  updateUserCryptoBalanceResponseObject.updatedBTCBalanceObject.id,
                  false,
                  false
                ).then(()=>{
                  if (
                      localbitcoinplusplus.wallets.my_local_flo_address ==
                      updateUserCryptoBalanceResponseObject.trader_flo_address
                  ) {
                      displayBalances(
                      updateUserCryptoBalanceResponseObject.trader_flo_address
                      );
                      showMessage(`INFO: Your Crypto balance is updated.`);
                  }
                  return true;
                });
              } else {
                showMessage(
                  `WARNING: Failed to update balance in your DB. Please refresh.`
                );
              }
            }
            break;

          case "updateUsertraderDepositsRequest":
            if (
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                res_obj.nodePubKey
              )
            ) {
              let updateUserDepositsResponseObject = res_obj.params[0];
              let updateUserDepositsResponseString = JSON.stringify(
                updateUserDepositsResponseObject.updatedTraderDepositObject
              );
              let updateUserDepositsResponseStringHash = Crypto.SHA256(
                updateUserDepositsResponseString
              );
              let isBalanceLegit = RM_WALLET.verify(
                updateUserDepositsResponseStringHash,
                updateUserDepositsResponseObject.updatedDepositsObjectSign,
                res_obj.nodePubKey
              );
              if (isBalanceLegit) {
                updateinDB(
                  "deposit",
                  updateUserDepositsResponseObject.updatedTraderDepositObject,
                  updateUserDepositsResponseObject.updatedTraderDepositObject.id,
                  false,
                  false
                ).then(()=>{
                  if (
                      localbitcoinplusplus.wallets.my_local_flo_address ==
                      updateUserDepositsResponseObject.trader_flo_address
                  ) {
                      displayBalances(
                      updateUserDepositsResponseObject.trader_flo_address
                      );
                      showMessage(`INFO: Your balance is updated.`);
                  }
                  return true;
                })
              } else {
                showMessage(
                  `WARNING: Failed to update balance in your DB. Please refresh.`
                );
              }
            }
            break;

          case "addNewKbucketNode":
            if (
              !localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                localbitcoinplusplus.wallets.my_local_flo_public_key
              )
            )
              return;
            try {
              let mss = "";
              let tid =
                res_obj.params[0].trader_flo_address ||
                res_obj.globalParams.senderFloId;
              localbitcoinplusplus.kademlia
                .determineClosestSupernode(tid)
                .then(async my_closest_su => {
                  const newKbucketObjectObj = res_obj.params[0];
                  if (
                    typeof newKbucketObjectObj.newKbucketNode == "object"
                  ) {
                    newKbucketObject = newKbucketObjectObj.newKbucketNode;

                    newKbucketObject_id_array = Object.values(
                      newKbucketObject.id
                    );
                    newKbucketObject_idu8 = new Uint8Array(
                      newKbucketObject_id_array
                    );

                    localbitcoinplusplus.kademlia.addNewUserNodeInKbucketAndDB(
                      localbitcoinplusplus.BASE_BLOCKCHAIN,
                      newKbucketObject_idu8,
                      newKbucketObject.data
                    );

                    localbitcoinplusplus.rpc.prototype.send_rpc
                      .call(
                        this,
                        "requestSupernodesToRemoveAUserFloIdFromTheirKBucket",
                        {
                          redundantKbucketNodeU8Id: newKbucketObject_idu8,
                          currentSupernodeFloId:
                            localbitcoinplusplus.wallets
                              .my_local_flo_address,
                          trader_flo_address:
                            res_obj.globalParams.senderFloId
                        }
                      )
                      .then(removeRedundantKNode =>
                        doSend(removeRedundantKNode)
                      );
                  } else {
                    mss = `WARNING: Failed to add ${res_obj.globalParams.senderFloId} to KBucket.`;
                    showMessage(mss);
                    console.warn(mss);
                  }
                });
            } catch (error) {
              console.error(error);
            }
            break;

          case "link_My_Local_IP_To_My_Flo_Id":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              const req_params = res_obj.params[0];
              if (typeof req_params.requesters_pub_key !== "string")
                return;
              let flo_addr_for_pubkey = bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(
                req_params.requesters_pub_key
              );
              if (typeof flo_addr_for_pubkey !== "string") return;
              if (
                flo_addr_for_pubkey !== res_obj.globalParams.senderFloId
              )
                return;
              updateinDB("ipTable", {
                id: helper_functions.unique_id(),  
                flo_public_key: req_params.requesters_pub_key,
                temporary_ip: incoming_msg_local_ip
              }).then(() => {
                  linkBackOthersLocalIPToTheirFloId();
                });
            }
            break;

          case "link_Others_Local_IP_To_Their_Flo_Id":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              const req_params = res_obj.params[0];
              if (typeof req_params.requesters_pub_key !== "string")
                return;
              let flo_addr_for_pubkey = bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(
                req_params.requesters_pub_key
              );
              if (typeof flo_addr_for_pubkey !== "string") return;
              if (
                flo_addr_for_pubkey !== res_obj.globalParams.senderFloId
              )
                return;
              updateinDB("ipTable", {
                id: helper_functions.unique_id(),
                flo_public_key: req_params.requesters_pub_key,
                temporary_ip: incoming_msg_local_ip
              });
            }
            break;

          case "sync_data_by_vector_clock":
            if (
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                localbitcoinplusplus.wallets.my_local_flo_public_key
              )
            ) {
              if (
                typeof res_obj.params == "object" &&
                typeof res_obj.params[0] == "object"
              ) {
                try {
                  (async function() {
                    let getPrimarySuObj = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                      res_obj.params[0].trader_flo_address
                    );

                    let primarySupernode = getPrimarySuObj[0].data.id;

                    if (
                      localbitcoinplusplus.wallets
                        .my_local_flo_address !== primarySupernode
                    )
                      return;

                    let req_dt = res_obj.params[0];
                    let dbTable = req_dt.dbTable;
                    let data = req_dt.data;
                    let subjectUser = data.trader_flo_address;
                    let mss = "";

                    if (
                      typeof data.id !== "string" &&
                      typeof data.id !== "number"
                    ) {
                      mss = `WARNING: Failed to sync data by vector clock as id field could not be found.`;
                      showMessage(mss);
                      throw new Error(mss);
                    }
                    let myOwnDBData = await readDB(dbTable, data.id);
                    if (typeof myOwnDBData.vectorClock !== "number") {
                      mss = `WARNING: Failed to sync data by vector clock as id field could not be found.`;
                      showMessage(mss);
                      throw new Error(mss);
                    }
                    if (data.vectorClock > myOwnDBData.vectorClock) {
                      // You have old data, update respective DB.
                      updateinDB(
                        dbTable,
                        data,
                        data.id,
                        false,
                        false
                      ).then(() => {
                        showMessage(
                          `INFO: Data updated in ${dbTable} for id ${data.id}.`
                        );
                      });
                    }
                  })();
                } catch (error) {
                  throw new Error(error);
                }
              }
            }
            break;

          case "sync_primary_supernode_from_backup_supernode_response":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              let su_db_data = res_obj.params[0];
              if (
                typeof localbitcoinplusplus.wallets
                  .my_local_flo_address !== "string" ||
                su_db_data.trader_flo_address !==
                  localbitcoinplusplus.wallets.my_local_flo_address
              )
                return false;
              if (
                !localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                  localbitcoinplusplus.wallets.my_local_flo_public_key
                )
              )
                return;

                const timenow = + new Date();
                const lifetime = JSON.parse(localbitcoinplusplus.master_configurations.ordersLife);
                const db_sync_promises = [];

              (async function() {
                let i = 0;
                for (let tableStoreName in su_db_data) {
                  i++;

                  // skip loop if the property is from prototype
                  if (
                    tableStoreName == "trader_flo_address" ||
                    tableStoreName == "receiver_flo_address" ||
                    !su_db_data.hasOwnProperty(tableStoreName)
                  )
                    continue;

                  try {
            
                    let obj = su_db_data[tableStoreName];
                    if (obj.length > 0) {
                      for (var prop in obj) {
                        if (!obj.hasOwnProperty(prop)) continue;

                        if(tableStoreName=="buyOrders" || tableStoreName=="sellOrders") {
                          if(timenow-obj[prop].timestamp>=lifetime.trade) {
                              db_sync_promises.push(removeinDB(tableStoreName, obj[prop].id));
                              continue;
                          } else {
                              db_sync_promises.push(localbitcoinplusplus.actions
                              .delay(timenow-obj[prop].timestamp)
                              .then(()=>removeinDB(tableStoreName, obj[prop].id)))
                          } 
                        }
                        
                        if(tableStoreName=="cash_deposits") {
                          if(timenow-obj[prop].timestamp>=lifetime.cashDeposit) {
                              db_sync_promises.push(removeinDB(tableStoreName, obj[prop].id));
                              continue;
                          } else {
                              db_sync_promises.push(localbitcoinplusplus.actions
                              .delay(timenow-obj[prop].timestamp)
                              .then(()=>removeinDB(tableStoreName, obj[prop].id)))
                          }
                        }

                        if(tableStoreName=="deposit") {
                          // if(timenow-obj[prop].timestamp>=lifetime.cryptoDeposit) {
                          //     db_sync_promises.push(removeinDB(tableStoreName, obj[prop].id));
                          //     continue;
                          // } else {
                          //     db_sync_promises.push(localbitcoinplusplus.actions
                          //     .delay(timenow-obj[prop].timestamp)
                          //     .then(()=>removeinDB(tableStoreName, obj[prop].id)))
                          // } 
                        }

                        if(tableStoreName=="withdraw_btc") {
                          if(timenow-obj[prop].timestamp>=lifetime.cryptoWithdraw) {
                              db_sync_promises.push(removeinDB(tableStoreName, obj[prop].id));
                              continue;
                          } else {
                              db_sync_promises.push(localbitcoinplusplus.actions
                              .delay(timenow-obj[prop].timestamp)
                              .then(()=>removeinDB(tableStoreName, obj[prop].id)))
                          } 
                        }

                        db_sync_promises.push(updateinDB(
                          tableStoreName,
                          obj[prop],
                          obj[prop].id,
                          true,
                          false
                        ));
                        
                        showMessage(
                          `INFO: "${tableStoreName}" datastore syncing is complete.`
                        );
                      }
                    }

                  } catch (error) {
                    console.log(error);
                  }
                }

                await Promise.all(db_sync_promises);

                const RM_RPC = new localbitcoinplusplus.rpc();                            
                // Inform users
                RM_RPC.send_rpc
                  .call(this, "supernode_message", {
                  trader_flo_address:
                      su_db_data.trader_flo_address,
                  server_msg: `System is synced and ready to serve.`
                  })
                  .then(server_response => doSend(server_response));
              })();
            }
            break;

          case "sync_backup_supernode_from_backup_supernode_response":
            let su_db_data = res_obj.params[0];
            if (
              typeof localbitcoinplusplus.wallets.my_local_flo_address !==
                "string" ||
              typeof su_db_data.receiver_flo_address !== "string" ||
              su_db_data.receiver_flo_address !==
                localbitcoinplusplus.wallets.my_local_flo_address
            ) {
              console.warn(
                `WARNING: This backup response data was not meant for you.`
              );
              return;
            }

            const timenow = + new Date();
            const lifetime = JSON.parse(localbitcoinplusplus.master_configurations.ordersLife);
            const db_sync_promises = [];

            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              (async function() {
                let _addDB = addDB;
                let _updateinDB = updateinDB;
                let backup_db;

                if (
                  typeof localbitcoinplusplus.wallets
                    .my_local_flo_address !== "string" ||
                  localbitcoinplusplus.wallets.my_local_flo_address
                    .length < 1
                ) {
                  console.warn(`WARNING: Local FLO Address is not set.`);
                  return;
                }

                if (
                  su_db_data.trader_flo_address !==
                  localbitcoinplusplus.wallets.my_local_flo_address
                ) {
                  backup_db = su_db_data.trader_flo_address;
                }
                if (
                  typeof backup_db == "string" &&
                  backup_db.length > 0
                ) {
                  if (
                    typeof localbitcoinplusplus.newBackupDatabase.db[
                      backup_db
                    ] == "object"
                  ) {
                    const foreign_db =
                      localbitcoinplusplus.newBackupDatabase.db[
                        backup_db
                      ];
                    _readDB = foreign_db.backup_readDB.bind(foreign_db);
                    _readDBbyIndex = foreign_db.backup_readDBbyIndex.bind(
                      foreign_db
                    );
                    _updateinDB = foreign_db.backup_updateinDB.bind(
                      foreign_db
                    );
                   _removeinDB = foreign_db.backup_removeinDB.bind(
                      foreign_db
                    );
                  } else {
                    err_msg = `WARNING: Invalid Backup DB Instance Id: ${backup_db}.`;
                    showMessage(err_msg);
                    throw new Error(err_msg);
                  }
                }
                let i = 0;
                for (let tableStoreName in su_db_data) {
                  i++;
                  if (i == Object.keys(su_db_data).length - 2) {
                    // Close unnecessary connections now
                    reactor.dispatchEvent(
                      "remove_extra_backup_connections"
                    );
                  }
                  // skip loop if the property is from prototype
                  if (
                    tableStoreName == "trader_flo_address" ||
                    tableStoreName == "receiver_flo_address" ||
                    !su_db_data.hasOwnProperty(tableStoreName)
                  )
                    continue;

                  try {
                    let obj = su_db_data[tableStoreName];
                    if (obj.length > 0) {
                      for (var prop in obj) {
                        if (!obj.hasOwnProperty(prop)) continue;
                        if(tableStoreName=="buyOrders" || tableStoreName=="sellOrders") {
                          if(timenow-obj[prop].timestamp>=lifetime.trade) {
                              db_sync_promises.push(_removeinDB(tableStoreName, obj[prop].id));
                              continue;
                          } else {
                              db_sync_promises.push(localbitcoinplusplus.actions
                              .delay(timenow-obj[prop].timestamp)
                              .then(()=>_removeinDB(tableStoreName, obj[prop].id)))
                          } 
                        }
                        
                        if(tableStoreName=="cash_deposits") {
                          if(timenow-obj[prop].timestamp>=lifetime.cashDeposit) {
                              db_sync_promises.push(_removeinDB(tableStoreName, obj[prop].id));
                              continue;
                          } else {
                              db_sync_promises.push(localbitcoinplusplus.actions
                              .delay(timenow-obj[prop].timestamp)
                              .then(()=>_removeinDB(tableStoreName, obj[prop].id)))
                          }
                        }

                        if(tableStoreName=="deposit") {
                          // if(timenow-obj[prop].timestamp>=lifetime.cryptoDeposit) {
                          //     db_sync_promises.push(_removeinDB(tableStoreName, obj[prop].id));
                          //     continue;
                          // } else {
                          //     db_sync_promises.push(localbitcoinplusplus.actions
                          //     .delay(timenow-obj[prop].timestamp)
                          //     .then(()=>_removeinDB(tableStoreName, obj[prop].id)))
                          // } 
                        }

                        if(tableStoreName=="withdraw_btc") {
                          if(timenow-obj[prop].timestamp>=lifetime.cryptoWithdraw) {
                              db_sync_promises.push(_removeinDB(tableStoreName, obj[prop].id));
                              continue;
                          } else {
                              db_sync_promises.push(localbitcoinplusplus.actions
                              .delay(timenow-obj[prop].timestamp)
                              .then(()=>_removeinDB(tableStoreName, obj[prop].id)))
                          } 
                        }

                        db_sync_promises.push(_updateinDB(
                          tableStoreName,
                          obj[prop],
                          obj[prop].id,
                          true,
                          false
                        ));
                        showMessage(
                          `INFO: "${tableStoreName}" datastore syncing is complete.`
                        );
                      }
                    }
                  } catch (error) {
                    console.log(error);
                  }
                }
              })();
                await Promise.all(db_sync_promises);

                const RM_RPC = new localbitcoinplusplus.rpc();                            
                // Inform users
                RM_RPC.send_rpc
                  .call(this, "supernode_message", {
                  trader_flo_address:
                      su_db_data.trader_flo_address,
                  server_msg: `Backup system is synced and ready to serve.`
                  })
                  .then(server_response => doSend(server_response));
            }
            break;

          case "reconnect_with_another_supernode":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object" &&
              !localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                localbitcoinplusplus.wallets.my_local_flo_public_key
              )
            ) {
              (async function() {
                let su_db_data = res_obj.params[0];
                const primarySuObj = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                  localbitcoinplusplus.wallets.my_local_flo_address);

                const MCS = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                  "",
                  localbitcoinplusplus.master_configurations.supernodesPubKeys.length,
                  supernodeKBucket,
                  primarySuObj[0].data.id
                );  

                // If user is already connected to primary return back
                if (
                  localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS ==
                  primarySuObj[0].data.id
                )
                  return;

                  if (websocket.readyState === WebSocket.OPEN) {
                    websocket.close();
                  }
                    showMessage('INFO: Please wait...Reconnecting to server.');
                    const newSu = await readDBbyIndex(
                      "myClosestSupernodes",
                      "trader_flo_address",
                      primarySuObj[0].data.id
                    );
                    if (
                      typeof newSu == "object" &&
                      typeof newSu[0].trader_flo_address == "string"
                    ) {
                      await startWebSocket(`${WS}://${newSu[0].ip}`);
                      showMssage(`INFO: ${su_db_data.server_msg}`);
                    } else {
                      alert(`INFO: Please reload the page.`);
                    }
                  
                  return;
                
              })();
            }
            break;

          case "request_me_db_data":
            if (
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                res_obj.nodePubKey
              )
            ) {
              const resp = res_obj.params[0];

              if (
                localbitcoinplusplus.wallets.my_local_flo_address !==
                resp.receiver_flo_address
              )
                return;

              localbitcoinplusplus.actions.sync_backup_supernode_from_backup_supernode(
                localbitcoinplusplus.wallets.my_local_flo_address,
                resp.trader_flo_address,
                resp.db_inst
              );
            }
            break;  

            case "live_prices_request":
              response_from_sever = RM_RPC.receive_rpc_response.call(
                  this,
                  JSON.stringify(res_obj)
              );
              break;

            case "live_trading_prices_response":
                  if(typeof res_obj.params[0]=="object") {
                      const server_live_trading_prices = res_obj.params[0];
                      if(server_live_trading_prices.receiver_flo_address===localbitcoinplusplus.wallets.my_local_flo_address) {
                          console.log(server_live_trading_prices);            
                          for(commodity of Object.values(server_live_trading_prices.live_trading_prices)) {
                              if(commodity.crypto_code==="BTC") {
                                  document.getElementById('btc_market_price').innerText = `${commodity.currency_code} ${commodity.rate}`;
                              } else if(commodity.crypto_code==="FLO") {
                                  document.getElementById('flo_market_price').innerText = `${commodity.currency_code} ${commodity.rate}`;
                              }
                          }
                      }
                  } else {
                      showMessage('Failed to fetch live trading prices.')
                  }
              break;  

          default:
            break;
        }
      }
    } catch (error) {
      console.error(error);
      return;
    }
  }
}

async function processBackupUserOnMesssageRequest(response) {
  console.log("processBackupUserOnMesssageRequest RESPONSE: " + response);

  var res_pos = response.indexOf("{");
  if (res_pos >= 0) {
    // Link Temporary IP Address to FLO ID
    let isRequestToLinkIp = response.search("linkMyLocalIPToMyFloId");
    let isRequestToLinkOthersIp = response.search(
      "link_Others_Local_IP_To_Their_Flo_Id"
    );
    let incoming_msg_local_ip = ``;
    if (isRequestToLinkIp >= 0 || isRequestToLinkOthersIp >= 0) {
      let index_of_ip = response.indexOf(" ");
      if (index_of_ip >= 0) {
        incoming_msg_local_ip = response.substr(0, index_of_ip);
      }
    }

    var res = response.substr(res_pos);
    try {
      var res_obj = JSON.parse(res);

      if (
        typeof res_obj.globalParams !== "object" ||
        (localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
          localbitcoinplusplus.wallets.my_local_flo_public_key
        ) &&
          typeof res_obj.globalParams.receiversList == "object" &&
          !res_obj.globalParams.receiversList.includes(
            localbitcoinplusplus.wallets.my_local_flo_address
          ))
      )
        return;

      if (
        typeof res_obj.globalParams.receiverFloId == "string" &&
        res_obj.globalParams.receiverFloId !==
          localbitcoinplusplus.wallets.my_local_flo_address
      )
        return;

      // Check if request is from primary user or backup user
      // If request is from backup user, divert the request to backup onmessage event
      let get_requester_supernode = "";
      if (typeof res_obj.params[0].trader_flo_address == "string") {
        get_requester_supernode = await localbitcoinplusplus.kademlia.determineClosestSupernode(
          res_obj.params[0].trader_flo_address
        );

        res_obj.globalParams.primarySupernode =
          get_requester_supernode[0].data.id;
      } else if (
        typeof res_obj.globalParams.primarySupernode !== "string"
      ) {
        console.log(
          "---- ('processBackupUserOnMesssageRequest'): NEED TO ADD PRIMARY SU IN BELOW METHOD: "
        );
        console.log(res_obj);
        return;
      }

      if (
        res_obj.method !==
          "sync_primary_supernode_from_backup_supernode" &&
        res_obj.method !==
          "sync_backup_supernode_from_backup_supernode" &&
        res_obj.method !== "link_My_Local_IP_To_My_Flo_Id" &&
        res_obj.method !== "link_Others_Local_IP_To_Their_Flo_Id" &&
        res_obj.method !== "send_back_shamirs_secret_btc_pvtkey" &&
        res_obj.method !== "send_back_shamirs_secret_supernode_pvtkey" &&
        res_obj.method !== "store_shamirs_secret_pvtkey_shares" &&
        res_obj.method !== "retrieve_shamirs_secret_supernode_pvtkey"
      ) {
        if (
          localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
            localbitcoinplusplus.wallets.my_local_flo_public_key
          )
        ) {
          const subject_user =
            res_obj.params[0].trader_flo_address ||
            res_obj.globalParams.primarySupernode;

          let ifAllPrevSuAreDead = await localbitcoinplusplus.actions.checkIfAllPreviousSupernodesAreDeadForAUserNode(
            subject_user
          );

          console.log("ifAllPrevSuAreDead: ", ifAllPrevSuAreDead);

          let allowed_methods = [
            "sync_backup_supernode_from_backup_supernode_response",
            "do_you_have_latest_data_for_this_supernode"
          ];

          if (
            ifAllPrevSuAreDead !== true ||
            allowed_methods.includes(res_obj.method)
          ) {
            handle_backup_server_messages(response);
            return;
          }
        }
      }

      // Don't serve the request if data is not synced.
      if (
        localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
          localbitcoinplusplus.wallets.my_local_flo_public_key
        )
      ) {
        let byPassMethods = [
          "sync_backup_supernode_from_backup_supernode_response",
          "sync_primary_supernode_from_backup_supernode_response",
          "supernode_message",
          "store_shamirs_secret_pvtkey_shares",
          "send_back_shamirs_secret_supernode_pvtkey",
          "retrieve_shamirs_secret_supernode_pvtkey",
          "send_back_shamirs_secret_btc_pvtkey",
          "retrieve_shamirs_secret_btc_pvtkey",
          "add_user_public_data",
          "link_My_Local_IP_To_My_Flo_Id",
          "link_Others_Local_IP_To_Their_Flo_Id",
          "sync_data_by_vector_clock",
        ];

        if (!byPassMethods.includes(res_obj.method)) {
          if (
            typeof res_obj.globalParams.primarySupernode !== "string"
            || localbitcoinplusplus.myClosestSupernodes
              [res_obj.globalParams.primarySupernode].is_live==true
            // || typeof localbitcoinplusplus.services[`can_serve_${res_obj.globalParams.primarySupernode}`] !== "boolean"
            // || localbitcoinplusplus.services[`can_serve_${res_obj.globalParams.primarySupernode}`]==false
          ) {
            showMessage(
              `INFO: You are not authorized to serve this request.`
            );
            return false;
          }
        }
      }

      const isIncomingMessageValid = await validateIncomingMessage(res);
      console.log("isIncomingMessageValid: ", isIncomingMessageValid);

      if (!isIncomingMessageValid) return;

      if (typeof res_obj.method !== "undefined") {
        let response_from_sever;

        const RM_WALLET = new localbitcoinplusplus.wallets();
        const RM_TRADE = new localbitcoinplusplus.trade();
        const RM_RPC = new localbitcoinplusplus.rpc();

        switch (res_obj.method) {
          case "supernode_message":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              let received_resp = res_obj.params[0];

              if (typeof res_obj.params[0].trader_flo_address == "string")
                return;
              // Only the relevent user node should get response
              if (
                res_obj.params[0].trader_flo_address !==
                localbitcoinplusplus.wallets.my_local_flo_address
              )
                return;

              try {
                if (
                  received_resp.trader_flo_address.length > 0 &&
                  received_resp.server_msg.length > 0
                ) {
                  readDB("localbitcoinUser", "00-01").then(async function(
                    res
                  ) {
                    if (
                      typeof res == "object" &&
                      res.myLocalFLOAddress.length > 0
                    ) {
                      if (
                        res.myLocalFLOAddress ===
                        received_resp.trader_flo_address
                      ) {
                          notify(received_resp.server_msg);
                        showMessage(received_resp.server_msg);
                        return false;
                      }
                    } else {
                      const myPrimarySu = await readDB(
                        "myClosestSupernodes",
                        1
                      );
                      let getPrimarySuObj = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                        received_resp.trader_flo_address
                      );
                      const primarySupernode = getPrimarySuObj[0].data.id;
                      if (
                        primarySupernode == myPrimarySu.trader_flo_address
                      ) {
                          notify(received_resp.server_msg);
                        showMessage(received_resp.server_msg);
                        return false;
                      }
                    }
                  });
                }
              } catch (error) {
                throw new Error(error);
              }
            }
            break;
          case "trade_buy":
            response_from_sever = RM_RPC.backup_receive_rpc_response.call(
              this,
              JSON.stringify(res_obj)
            );
            break;
          case "trade_buy_request_response":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              let buyOrders_data = res_obj.params[0];

              // Only the relevent user node should get response
              if (
                buyOrders_data.trader_flo_address !==
                localbitcoinplusplus.wallets.my_local_flo_address
              )
                return;

              if (
                typeof localbitcoinplusplus.master_configurations
                  .supernodesPubKeys == "object"
                // Commented this because it prevents usernode to register data in db
                // while a backup supernode sends it any data like trade_buy

                //    && localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                //         buyOrders_data.supernodePubKey)
              ) {
                let isDataSignedBySuperNode = RM_WALLET.verify(
                  buyOrders_data.data_hash,
                  buyOrders_data.supernode_sign,
                  buyOrders_data.supernodePubKey
                );
                if (isDataSignedBySuperNode === true) {
                  // Add buy order
                  addDB("buyOrders", buyOrders_data).then(() => {
                      if(localbitcoinplusplus.wallets.my_local_flo_address
                    ===buyOrders_data.trader_flo_address) {
                      displayTradeOrders(localbitcoinplusplus.wallets.my_local_flo_address)
                      notify(`Your buy order is placed successfully.`);
                    }
                  });
                }
              }
            }
            break;
          case "trade_sell":
            response_from_sever = RM_RPC.backup_receive_rpc_response.call(
              this,
              JSON.stringify(res_obj)
            );
            break;
          case "trade_sell_request_response":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              let sellOrders_data = res_obj.params[0];
              // Only the relevent user node should get response
              if (
                res_obj.params[0].trader_flo_address !==
                localbitcoinplusplus.wallets.my_local_flo_address
              )
                return;

              if (
                typeof localbitcoinplusplus.master_configurations
                  .supernodesPubKeys == "object"
              ) {
                let isDataSignedBySuperNode = RM_WALLET.verify(
                  sellOrders_data.data_hash,
                  sellOrders_data.supernode_sign,
                  sellOrders_data.supernodePubKey
                );
                if (isDataSignedBySuperNode === true) {
                  // Add buy order
                  addDB("sellOrders", sellOrders_data).then(() => {
                    if(localbitcoinplusplus.wallets.my_local_flo_address
                      ===sellOrders_data.trader_flo_address) {
                      displayTradeOrders(localbitcoinplusplus.wallets.my_local_flo_address);
                      notify(`Your sell order is placed successfully.`);
                    }
                  });
                }
              }
            }
            break;
          case "sync_with_supernode":
            response_from_sever = RM_RPC.backup_receive_rpc_response.call(
              this,
              JSON.stringify(res_obj)
            );
            break;
          case "server_sync_response":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              let su_db_data = res_obj.params[0];
              if (
                typeof localbitcoinplusplus.wallets
                  .my_local_flo_address !== "string" ||
                su_db_data.trader_flo_address !==
                  localbitcoinplusplus.wallets.my_local_flo_address ||
                localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                  localbitcoinplusplus.wallets.my_local_flo_public_key
                )
              )
                return false;
              // Only the relevent user node should get response
              if (
                res_obj.params[0].trader_flo_address !==
                localbitcoinplusplus.wallets.my_local_flo_address
              )
                return;

              (async function() {
                for (let tableStoreName in su_db_data) {
                  // skip loop if the property is from prototype
                  if (
                    tableStoreName == "trader_flo_address" ||
                    tableStoreName == "receiver_flo_address" ||
                    !su_db_data.hasOwnProperty(tableStoreName)
                  )
                    continue;

                  try {
                    let obj = su_db_data[tableStoreName];
                    if (
                      [
                        "userPublicData"
                      ].includes(tableStoreName)
                    ) {
                      if (obj.length > 0) {
                        for (var prop in obj) {
                          if (!obj.hasOwnProperty(prop)) continue;
                          await updateinDB(
                            tableStoreName,
                            obj[prop],
                            obj[prop].trader_flo_address
                          );
                        }
                      }
                    } else {
                      let resdbdata = await removeAllinDB(tableStoreName);
                      if (resdbdata !== false) {
                        if (obj.length > 0) {
                          for (var prop in obj) {
                            if (!obj.hasOwnProperty(prop)) continue;
                            await addDB(resdbdata, obj[prop]);
                          }
                        }
                      }
                    }
                  } catch (error) {
                    console.log(error);
                  }
                }
              })();
            }
            break;

          case "service_denied":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              if (
                typeof localbitcoinplusplus.wallets.my_local_flo_address !== "string" 
                || res_obj.params[0].receiver_flo_address !== localbitcoinplusplus.wallets.my_local_flo_address 
                || localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                  localbitcoinplusplus.wallets.my_local_flo_public_key
                )
              )
                return false;

                if(typeof res_obj.params[0].msg=="string" && res_obj.params[0].msg.length>0) {
                  websocket.close();
                  showMessage(res_obj.params[0].msg);
                }
            }
              break;

          case "deposit_asset_request":
            response_from_sever = RM_RPC.backup_receive_rpc_response.call(
              this,
              JSON.stringify(res_obj)
            );
          case "deposit_asset_request_response":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object" &&
              typeof res_obj.params[0].data == "object"
            ) {
              // Only the relevent user node should get response
              if (
                res_obj.params[0].trader_flo_address !==
                localbitcoinplusplus.wallets.my_local_flo_address
              )
                return;
              let resp = res_obj.params[0];
              if (
                RM_WALLET.verify(
                  resp.data.depositDataHash,
                  resp.data.order_validator_sign,
                  resp.data.order_validator_public_key
                )
              ) {
                addDB("deposit", resp.data);
                if (typeof resp.withdrawer_data == "object") {
                  updateinDB(
                    "withdraw_cash",
                    resp.withdrawer_data,
                    resp.withdrawer_data.trader_flo_address
                  );
                }
                readDB("localbitcoinUser", "00-01").then(function(user) {
                  if (
                    typeof user == "object" &&
                    user.myLocalFLOAddress == resp.data.trader_flo_address
                  ) {
                      document.getElementById("server_deposit_crypto_addr")
                      .innerText = resp.data.btc_address;
                      let counterTraderAccountAddress = resp.msg;
                      showMessage(counterTraderAccountAddress);
                      notify(counterTraderAccountAddress);
                  }
                });
              }
            }
            break;
          case "deposit_cash_request":
            response_from_sever = RM_RPC.backup_receive_rpc_response.call(
              this,
              JSON.stringify(res_obj)
            );
            break;
          case "deposit_cash_request_response":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object" &&
              typeof res_obj.params[0].data == "object"
            ) {
              let resp = res_obj.params[0];
              if (
                (resp.data==null && resp.error && resp.msg.length>0) 
                ||
                RM_WALLET.verify(
                  resp.data.depositDataHash,
                  resp.data.order_validator_sign,
                  resp.data.order_validator_public_key
                )
              ) {

              readDB("localbitcoinUser", "00-01").then(function(user) {
                  if (
                    typeof user == "object" &&
                    (user.myLocalFLOAddress == resp.data.trader_flo_address 
                    || user.myLocalFLOAddress == resp.receiver_flo_address)
                  ) {
                      let counterTraderAccountAddress = `Please pay ${resp.data.currency} ${resp.data.depositing_amount} to following UPI ID: 
                          ${resp.msg}`;
                      showMessage(counterTraderAccountAddress);
                      notify(counterTraderAccountAddress);
                  }
              });  

              }
            }
            break;
          case "withdraw_request_method":
            response_from_sever = RM_RPC.backup_receive_rpc_response.call(
              this,
              JSON.stringify(res_obj)
            ); // send response to client
            break;
          case "withdrawal_request_response":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              if (
                res_obj.params[0].trader_flo_address !==
                localbitcoinplusplus.wallets.my_local_flo_address
              )
                return;
              if (
                RM_WALLET.verify(
                  res_obj.params[0].withdrawDataHash,
                  res_obj.params[0].order_validator_sign,
                  res_obj.params[0].order_validator_public_key
                )
              ) {
                  if(typeof res_obj.params[0].error==="boolean"
                && typeof res_obj.params[0].msg==="string") {
                  showMessage(res_obj.params[0].msg);
                  return true;
                }
                addDB("withdraw_cash", res_obj.params[0]).then(() => {
                  showMessage(
                    `Your cash withdrawal request is placed successfully.`
                  );
                });
              }
            }
            break;
          case "cancel_trade":
              response_from_sever = RM_RPC.backup_receive_rpc_response.call(
                  this,
                  JSON.stringify(res_obj)
              );
            break;
          case "trade_balance_updates":
            if (
              !localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                res_obj.nodePubKey
              )
            )
              return;
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              const trade_balance_res = res_obj.params[0];
              // Verify data
              let trade_info_str = JSON.stringify(
                trade_balance_res.trade_infos
              );
              let buyer_cash_data_str = JSON.stringify(
                trade_balance_res.buyer_cash_data
              );
              let seller_cash_data_str = JSON.stringify(
                trade_balance_res.seller_cash_data
              );
              let buyer_btc_data_str = JSON.stringify(
                trade_balance_res.buyer_btc_data
              );
              let seller_btc_data_str = JSON.stringify(
                trade_balance_res.seller_btc_data
              );

              let res_str = `${trade_info_str}${buyer_cash_data_str}${seller_cash_data_str}${buyer_btc_data_str}${seller_btc_data_str}`;
              let hashed_data = Crypto.SHA256(res_str);

              // if (localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
              //         trade_balance_res.supernodePubKey)) {
              if (
                RM_WALLET.verify(
                  hashed_data,
                  trade_balance_res.supernode_sign,
                  trade_balance_res.supernodePubKey
                )
              ) {
                // Delete orders in clients DB
                try {
                  removeinDB(
                    "buyOrders",
                    trade_balance_res.trade_infos.buy_order_id
                  );
                  removeinDB(
                    "sellOrders",
                    trade_balance_res.trade_infos.sell_order_id
                  );
                } catch (error) {
                  callback(false);
                  throw new Error(error);
                }

                // Update balances in clients DB
                try {
                  let pr1 = updateinDB(
                    "cash_balances",
                    trade_balance_res.buyer_cash_data,
                    trade_balance_res.trade_infos.buyer_flo_id,
                    true,
                    false
                  );
                  let pr2 = updateinDB(
                    "cash_balances",
                    trade_balance_res.seller_cash_data,
                    trade_balance_res.trade_infos.seller_flo_id,
                    true,
                    false
                  );
                  let pr3 = updateinDB(
                    "crypto_balances",
                    trade_balance_res.buyer_btc_data,
                    trade_balance_res.trade_infos.buyer_flo_id,
                    true,
                    false
                  );
                  let pr4 = updateinDB(
                    "crypto_balances",
                    trade_balance_res.seller_btc_data,
                    trade_balance_res.trade_infos.seller_flo_id,
                    true,
                    false
                  );

                  Promise.all([pr1,pr2,pr3,pr4]).then(()=>{
                      displayTradeOrders(localbitcoinplusplus.wallets.my_local_flo_address);
                      // Update balances
                      displayBalances(
                          localbitcoinplusplus.wallets.my_local_flo_address
                      );
                      notify("Trade successfull. Balances updated.")
                      showMessage("Trade successfull. Balances updated.")
                    })
                    .catch(e => {throw new Error(e)});

                } catch (error) {
                  callback(false);
                  throw new Error(error);
                }
              }
              //}
            }
            break;
          case "store_shamirs_secret_pvtkey_shares":
            if (
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                localbitcoinplusplus.wallets.my_local_flo_public_key
              )
            ) {
              if (
                typeof res_obj.params == "object" &&
                typeof res_obj.params[0] == "object"
              ) {
                  if (
                typeof res_obj.params == "object" &&
                typeof res_obj.params[0] == "object"
              ) {
                if(typeof res_obj.params[0].trader_flo_address !="string") return;
                localbitcoinplusplus.kademlia.determineClosestSupernode(res_obj.params[0].trader_flo_address)
                .then(my_closest_su_list=>{
                    const primarySupernodeOfThisUser = my_closest_su_list[0].data.id;
                    const backup_server_db_instance = localbitcoinplusplus.newBackupDatabase.db[primarySupernodeOfThisUser];

                    if(typeof backup_server_db_instance !== "object") {
                        let backup_db_error_msg = `WARNING: Unknown DB instance. DB Backup failed.`;
                        showMessage(backup_db_error_msg);
                        throw new Error(backup_db_error_msg);
                    };

                    delete res_obj.params[0].trader_flo_address;
                    backup_server_db_instance.backup_addDB("supernode_private_key_chunks", res_obj.params[0]);
                });
              }
              }
            }
            break;
          case "send_back_shamirs_secret_supernode_pvtkey":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object" &&
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                localbitcoinplusplus.wallets.my_local_flo_public_key
              )
            ) {
              if (
                typeof res_obj.globalParams.primarySupernode != "string"
              )
                return;
              localbitcoinplusplus.kademlia
                .determineClosestSupernode(
                  res_obj.globalParams.primarySupernode
                )
                .then(my_closest_su_list => {
                  console.log(my_closest_su_list);

                  const primarySupernodeOfThisUser =
                    my_closest_su_list[0].data.id;
                  const backup_server_db_instance =
                    localbitcoinplusplus.newBackupDatabase.db[
                      primarySupernodeOfThisUser
                    ];

                  if (typeof backup_server_db_instance !== "object") {
                    let backup_db_error_msg = `WARNING: Unknown DB instance. DB Backup failed.`;
                    showMessage(backup_db_error_msg);
                    throw new Error(backup_db_error_msg);
                  }

                  backup_server_db_instance
                    .backup_readDB(
                      "supernode_private_key_chunks",
                      res_obj.params[0].chunk_val
                    )
                    .then(function(res) {
                      if (typeof res == "object") {
                        RM_RPC.send_rpc
                          .call(
                            this,
                            "retrieve_shamirs_secret_supernode_pvtkey",
                            {
                              private_key_chunk: res
                            }
                          )
                          .then(send_pvtkey_req =>
                            doSend(send_pvtkey_req)
                          );
                      } else {
                        RM_RPC.send_rpc
                          .call(
                            this,
                            "retrieve_shamirs_secret_supernode_pvtkey",
                            ""
                          )
                          .then(send_pvtkey_req =>
                            doSend(send_pvtkey_req)
                          );
                      }
                    });
                });
            }
            break;
          case "retrieve_shamirs_secret_supernode_pvtkey":
            if (typeof retrieve_pvtkey_counter == "undefined")
              retrieve_pvtkey_counter = 0;
            let runUIFunc = false;
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object" &&
              typeof res_obj.params[0].private_key_chunk == "object" &&
              typeof localbitcoinplusplus.wallets
                .supernode_transaction_key == "object"
            ) {
              let share =
                res_obj.params[0].private_key_chunk.privateKeyChunks;
              if (
                typeof share !== "undefined" &&
                !MY_PRIVATE_KEY_SHAMIRS_SHARES.includes(share)
              ) {
                MY_PRIVATE_KEY_SHAMIRS_SHARES.push(share);
              }
              if (MY_PRIVATE_KEY_SHAMIRS_SHARES.length == 5) {
                RM_WALLET.rebuild_my_private_key(
                  localbitcoinplusplus.wallets.supernode_transaction_key
                );
                runUIFunc = true;
              }
            } else {
              if (
                retrieve_pvtkey_counter == 10 &&
                typeof localbitcoinplusplus.wallets
                  .MY_SUPERNODE_PRIVATE_KEY == "undefined"
              ) {
                RM_WALLET.manually_assign_my_private_key();
                runUIFunc = true;
                retrieve_pvtkey_counter++;
              }
            }
            if (
              typeof localbitcoinplusplus.wallets
                .MY_SUPERNODE_PRIVATE_KEY == "string" &&
              localbitcoinplusplus.is_ui_loaded == false
            ) {
              dataBaseUIOperations();
              return;
            }
            retrieve_pvtkey_counter++;
            break;
          case "send_back_shamirs_secret_btc_pvtkey":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              if (
                typeof res_obj.nodePubKey != "string"
                || !localbitcoinplusplus.master_configurations.supernodesPubKeys
                .includes(res_obj.nodePubKey)
                || typeof localbitcoinplusplus.newBackupDatabase.db[res_obj.params[0].db_inst]
                !== "object"
                || !localbitcoinplusplus.master_configurations.supernodesPubKeys
                .includes(localbitcoinplusplus.wallets.my_local_flo_public_key)
              )
                return;

                localbitcoinplusplus.newBackupDatabase.db[res_obj.params[0].db_inst]
                .backup_readDB(
                "supernode_private_key_chunks",
                res_obj.params[0].chunk_val
              ).then(function(res) {
                RM_RPC.send_rpc
                  .call(this, "retrieve_shamirs_secret_btc_pvtkey", {
                    retrieve_pvtkey_req_id:
                      res_obj.params[0].retrieve_pvtkey_req_id,
                    private_key_chunk: res,
                    withdraw_id: res_obj.params[0].withdraw_id,
                    db_inst: res_obj.params[0].db_inst,
                    receiver_flo_address: res_obj.globalParams.senderFloId
                  })
                  .then(send_pvtkey_req => doSend(send_pvtkey_req));
              });
            }
            break;
          case "delete_shamirs_secret_btc_pvtkey":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              if (
                typeof res_obj.nodePubKey != "string"
                || !localbitcoinplusplus.master_configurations.supernodesPubKeys
                .includes(res_obj.nodePubKey)
                || typeof localbitcoinplusplus.newBackupDatabase.db[res_obj.params[0].db_inst]
                !== "object"
                || !localbitcoinplusplus.master_configurations.supernodesPubKeys
                .includes(localbitcoinplusplus.wallets.my_local_flo_public_key)
              )
                return;

                localbitcoinplusplus.newBackupDatabase.db[res_obj.params[0].db_inst]
                  .backup_removeinDB(
                  "supernode_private_key_chunks",
                  res_obj.params[0].chunk_val
                );
            }
            break;

          case "retrieve_shamirs_secret_btc_pvtkey":
          if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object" &&
              typeof res_obj.params[0].private_key_chunk == "object" &&
              typeof res_obj.params[0].retrieve_pvtkey_req_id ==
              "string" &&
              typeof res_obj.params[0].withdraw_id == "string" &&
              typeof res_obj.params[0].db_inst == "string" &&
              typeof localbitcoinplusplus.wallets.my_local_flo_address ==
              "string" &&
              res_obj.params[0].receiver_flo_address ===
              localbitcoinplusplus.wallets.my_local_flo_address
          ) {
              // This message was for Primary Supernode and is meant to be run in onMessage()
              if (res_obj.params[0].db_inst ==
                  localbitcoinplusplus.wallets.my_local_flo_address
              ) return;

              let shamirs_shares_response = res_obj.params[0];
              let retrieve_pvtkey_req_id =
              res_obj.params[0].retrieve_pvtkey_req_id;
              let withdraw_id = res_obj.params[0].withdraw_id;
              if (typeof btc_pvt_arr !== "object") btc_pvt_arr = [];
              if (typeof btc_pvt_arr[retrieve_pvtkey_req_id] == "undefined") {
                  btc_pvt_arr[retrieve_pvtkey_req_id] = [];
                  localbitcoinplusplus.actions.delay(15*60*1000)
                  .then(()=>{
                      if(typeof btc_pvt_arr[retrieve_pvtkey_req_id]=="object") {
                          btc_pvt_arr[retrieve_pvtkey_req_id] = null;
                      }
                  });
              }

              // Filter function below logic source -
              // https://stackoverflow.com/a/9229821/5348972
              let seen_chunk_id_list = [];

              btc_pvt_arr[retrieve_pvtkey_req_id].filter(function(item) {
              if(typeof item.private_key_chunk=="object" &&
                      typeof item.private_key_chunk.id=="string" &&
                      !seen_chunk_id_list.hasOwnProperty(
                      item.private_key_chunk.id
                  ) ) {
                      return seen_chunk_id_list.push(item.private_key_chunk.id);
                  }
              });

              if (
              !seen_chunk_id_list.includes(
                  shamirs_shares_response.private_key_chunk.id
              ) &&
              typeof shamirs_shares_response.private_key_chunk.id ==
                  "string"
              ) {
              btc_pvt_arr[retrieve_pvtkey_req_id].push(
                  shamirs_shares_response
              );
              }
              if (
              btc_pvt_arr[retrieve_pvtkey_req_id].length ===
              localbitcoinplusplus.master_configurations
                  .ShamirsMaxShares
              ) {
              const backup_server_db_instance =
                  localbitcoinplusplus.newBackupDatabase.db[primarySupernodeOfThisUser];

              if (typeof backup_server_db_instance !== "object") {
                  let backup_db_error_msg = `WARNING: Unknown DB instance. DB Backup failed.`;
                  throw new Error(backup_db_error_msg);
              }
              delete res_obj.params[0].private_key_chunk;
              let btc_pk_shares_array = btc_pvt_arr[retrieve_pvtkey_req_id]
                  .map(pkChunks => {
                      if (typeof pkChunks.private_key_chunk !== "undefined")
                          return pkChunks.private_key_chunk.privateKeyChunks;
                  })
                  .filter(val => val !== undefined);
              console.log(btc_pk_shares_array);
              const btc_reserves = await backup_server_db_instance
                  .backup_readDB("system_btc_reserves_private_keys", retrieve_pvtkey_req_id);
              if (typeof btc_reserves !== "object") {
                  console.warn(`Record for ${retrieve_pvtkey_req_id} not found in system_btc_reserves_private_keys`);
                  break;
              }

              let transaction_key = localbitcoinplusplus.actions
                      .master_decrypt(btc_reserves.supernode_transaction_key);
              if(typeof transaction_key=="string") {
                  transaction_key = JSON.parse(transaction_key);
              }     
              if (transaction_key.length <= 0) {
                  console.warn(`Failed to build tx key for ${retrieve_pvtkey_req_id} in system_btc_reserves_private_keys`);
                  break;
              }
              let btc_private_key = RM_WALLET.rebuild_private_key(
                  btc_pk_shares_array,
                  transaction_key
              );
              if (btc_private_key.length <= 0) {
                  console.warn(`Failed to build private key for ${retrieve_pvtkey_req_id} in system_btc_reserves_private_keys`);
                  break;
              }
              console.log(btc_private_key);

              const withdraw_res = await backup_server_db_instance
                  .backup_readDB("withdraw_btc", withdraw_id);
              if(typeof withdraw_res=="object" 
              && typeof withdraw_res.utxo_addr=="object") {
                  const RM_WALLET = new localbitcoinplusplus.wallets;
                  let crypto_addr_gen = RM_WALLET.generateFloKeys(btc_private_key, withdraw_res.product);
                  let crypto_addr = crypto_addr_gen.address;
                  if(!Object.values(withdraw_res.utxo_addr).includes(crypto_addr)) {
                      console.warn(`${crypto_addr} deposit address not present in withdraw id ${withdraw_id}`);
                      break;
                  }

                  if(typeof localbitcoinplusplus.btc_private_key_array!=="object"
                  || Object.keys(localbitcoinplusplus.btc_private_key_array).length==0) {
                      localbitcoinplusplus.btc_private_key_array={};
                  }
                  if(typeof localbitcoinplusplus.btc_private_key_array[withdraw_id] !== "object"
                  || localbitcoinplusplus.btc_private_key_array[withdraw_id]==null) {
                      localbitcoinplusplus.btc_private_key_array[withdraw_id] = [];
                  }
                  localbitcoinplusplus.btc_private_key_array[withdraw_id].push(btc_private_key);

                  if(localbitcoinplusplus.btc_private_key_array[withdraw_id].length
                      ===Object.values(withdraw_res.utxo_addr).length) {
                      // When all the private keys are built successfully proceed further
                      res_obj.params[0].btc_private_key_array = 
                          localbitcoinplusplus.btc_private_key_array[withdraw_id];

                      res_obj.params[0].trader_flo_address = withdraw_res.trader_flo_address;
                      RM_RPC.backup_receive_rpc_response.call(
                          this,
                          JSON.stringify(res_obj)
                      );
                      if(!delete localbitcoinplusplus.btc_private_key_array[withdraw_id]) {
                          localbitcoinplusplus.btc_private_key_array[withdraw_id] = null; 
                      }
                  }
                  
              }
              btc_pvt_arr = Object.keys(btc_pvt_arr).filter(f=>f!==retrieve_pvtkey_req_id);
              }
          }
            break;

          case "update_all_new_cash_withdraw_recorded_in_db":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              let withdraw_success_response = res_obj.params[0];
              
              // Only the relevent user node should get response
              if (
                withdraw_success_response.trader_flo_address !==
                localbitcoinplusplus.wallets.my_local_flo_address
              )
                return;

              let update_cash_balance_obj_res = {
                withdrawer_cash_data:
                  withdraw_success_response.withdrawer_cash_data
              };
              let update_cash_balance_obj_res_str = JSON.stringify(
                update_cash_balance_obj_res
              );
              let update_cash_balance_obj_res_hash = Crypto.SHA256(
                update_cash_balance_obj_res_str
              );
              let update_cash_balance_obj_res_verification = RM_WALLET.verify(
                update_cash_balance_obj_res_hash,
                withdraw_success_response.sign,
                withdraw_success_response.publicKey
              );

              if (
                update_cash_balance_obj_res_hash ==
                  withdraw_success_response.hash &&
                update_cash_balance_obj_res_verification == true
              ) {
                updateinDB(
                  "cash_balances",
                  withdraw_success_response.withdrawer_cash_data,
                  withdraw_success_response.withdrawer_cash_data.id,
                  false, 
                  false
                ).then(()=>{
                  // Update balances
                  displayBalances(
                      localbitcoinplusplus.wallets.my_local_flo_address
                  );
                  return true;
                })
              }
              return false;
            }
            break;

          case "add_user_public_data":
            let supernode_flo_public_key =
              localbitcoinplusplus.wallets.my_local_flo_public_key;
            RM_RPC.filter_legit_requests(
              res_obj.params[0].trader_flo_address,
              function(is_valid_request) {
                if (is_valid_request !== true) return false;

                if (
                  typeof res_obj.params == "object" &&
                  typeof res_obj.params[0] == "object"
                ) {
                  let req_data = res_obj.params[0];
                  try {
                    let flo_address = bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(
                      req_data.trader_flo_pubKey
                    );

                    if (
                      flo_address == req_data.trader_flo_address &&
                      req_data.trader_flo_address.length > 0
                    ) {
                      let public_req_object = {
                        trader_flo_address: req_data.trader_flo_address,
                        trader_flo_pubKey: req_data.trader_flo_pubKey,
                        supernode_flo_public_key: supernode_flo_public_key,
                        trader_reputation: 0,
                        timestamp: +new Date()
                      };

                      if (
                        typeof res_obj.params[0].trader_flo_address !=
                        "string"
                      )
                        return;
                      localbitcoinplusplus.kademlia
                        .determineClosestSupernode(
                          res_obj.params[0].trader_flo_address
                        )
                        .then(my_closest_su_list => {
                          const primarySupernodeOfThisUser =
                            my_closest_su_list[0].data.id;
                          const backup_server_db_instance =
                            localbitcoinplusplus.newBackupDatabase.db[
                              primarySupernodeOfThisUser
                            ];

                          if (
                            typeof backup_server_db_instance !== "object"
                          ) {
                            let backup_db_error_msg = `WARNING: Unknown DB instance. DB Backup failed.`;
                            showMessage(backup_db_error_msg);
                            throw new Error(backup_db_error_msg);
                          }
                          backup_server_db_instance.backup_addDB(
                            "userPublicData",
                            public_req_object
                          );
                        });
                    }
                  } catch (error) {
                    throw new Error(
                      "Invalid public key and flo address combination."
                    );
                  }
                }
              }
            );
            break;

          case "superNodeSignedAddUserPublicData":
            response_from_sever = RM_RPC.backup_receive_rpc_response.call(
              this,
              JSON.stringify(res_obj)
            );
            doSend(JSON.stringify(response_from_sever)); // send response to client
            break;

          case "refresh_deposit_status_request":
            if (typeof res_obj.params[0].trader_flo_address != "string")
              return;
            RM_RPC.filter_legit_backup_requests(
              res_obj.params[0].trader_flo_address,
              function(is_valid_request) {
                if (is_valid_request !== true) return false;

                localbitcoinplusplus.kademlia
                  .determineClosestSupernode(
                    res_obj.params[0].trader_flo_address
                  )
                  .then(my_closest_su_list => {
                    const primarySupernodeOfThisUser =
                      my_closest_su_list[0].data.id;
                    const backup_server_db_instance =
                      localbitcoinplusplus.newBackupDatabase.db[
                        primarySupernodeOfThisUser
                      ];

                    if (typeof backup_server_db_instance !== "object") {
                      let backup_db_error_msg = `WARNING: Unknown DB instance. DB Backup failed.`;
                      showMessage(backup_db_error_msg);
                      throw new Error(backup_db_error_msg);
                    }
                    backup_server_db_instance
                      .backup_readDBbyIndex("deposit", "status", 1)
                      .then(function(res) {
                        res.map(async function(deposit_trade) {
                          if (
                            localbitcoinplusplus.master_configurations.tradableAsset1.includes(
                              deposit_trade.product
                            )
                          ) {
                            validateDepositedBTCBalance(
                              deposit_trade,
                              primarySupernodeOfThisUser
                            );
                          }
                        });
                      });
                  });
              }
            );
            break;

          case "updateUserCryptoBalanceRequest":
            if (
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                res_obj.nodePubKey
              )
            ) {
              let updateUserCryptoBalanceResponseObject =
                res_obj.params[0];
              let updateUserCryptoBalanceResponseString = JSON.stringify(
                updateUserCryptoBalanceResponseObject.updatedBTCBalanceObject
              );
              let updateUserCryptoBalanceResponseStringHash = Crypto.SHA256(
                updateUserCryptoBalanceResponseString
              );
              let isBalanceLegit = RM_WALLET.verify(
                updateUserCryptoBalanceResponseStringHash,
                updateUserCryptoBalanceResponseObject.updatedBTCBalanceObjectSign,
                res_obj.nodePubKey
              );
              if (isBalanceLegit) {
                updateinDB(
                  "crypto_balances",
                  updateUserCryptoBalanceResponseObject.updatedBTCBalanceObject,
                  updateUserCryptoBalanceResponseObject.updatedBTCBalanceObject.id,
                  false,
                  false
                ).then(()=>{
                  if (
                      localbitcoinplusplus.wallets.my_local_flo_address ==
                      updateUserCryptoBalanceResponseObject.trader_flo_address
                  ) {
                      displayBalances(
                      updateUserCryptoBalanceResponseObject.trader_flo_address
                      );
                      showMessage(`INFO: Your balance is updated.`);
                  }
                  return true;
                })
              } else {
                showMessage(
                  `WARNING: Failed to update balance in your DB. Please refresh.`
                );
              }
            }

            break;

          case "updateUsertraderDepositsRequest":
            if (
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                res_obj.nodePubKey
              )
            ) {
              let updateUserDepositsResponseObject = res_obj.params[0];
              let updateUserDepositsResponseString = JSON.stringify(
                updateUserDepositsResponseObject.updatedTraderDepositObject
              );
              let updateUserDepositsResponseStringHash = Crypto.SHA256(
                updateUserDepositsResponseString
              );
              let isBalanceLegit = RM_WALLET.verify(
                updateUserDepositsResponseStringHash,
                updateUserDepositsResponseObject.updatedDepositsObjectSign,
                res_obj.nodePubKey
              );
              if (isBalanceLegit) {
                updateinDB(
                  "deposit",
                  updateUserDepositsResponseObject.updatedTraderDepositObject,
                  updateUserDepositsResponseObject.updatedTraderDepositObject.id,
                  false,
                  false
                ).then(()=>{
                  if (
                      localbitcoinplusplus.wallets.my_local_flo_address ==
                      updateUserDepositsResponseObject.trader_flo_address
                  ) {
                      displayBalances(
                      updateUserDepositsResponseObject.trader_flo_address
                      );
                      showMessage(`INFO: Your balance is updated.`);
                  }
                  return true;
                })
              } else {
                showMessage(
                  `WARNING: Failed to update balance in your DB. Please refresh.`
                );
              }
            }
            break;

          case "addNewKbucketNode":
            if (
              !localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                localbitcoinplusplus.wallets.my_local_flo_public_key
              )
            )
              return;
            try {
              let mss = "";
              let tid =
                res_obj.params[0].trader_flo_address ||
                res_obj.globalParams.senderFloId;
              localbitcoinplusplus.kademlia
                .determineClosestSupernode(tid)
                .then(async my_closest_su => {
                  if (
                    my_closest_su[0].data.id !==
                    localbitcoinplusplus.wallets.my_local_flo_address
                  )
                    return;

                  const newKbucketObjectObj = res_obj.params[0];
                  const primarySupernodeOfThisUser =
                    my_closest_su_list[0].data.id;
                  const getPubKeyOfSupernodeOfThisUser = RM_WALLET.getSupernodePublicKeyFromFloId(
                    primarySupernodeOfThisUser
                  );
                  const primaryKBOfTheUser = `SKBucket_${getPubKeyOfSupernodeOfThisUser}`;
                  if (typeof primaryKBOfTheUser !== "object") {
                    let mss = `ERROR: No such KBucket exists: ${primaryKBOfTheUser}`;
                    showMessage(mss);
                    throw new Error(mss);
                  }
                  if (
                    typeof newKbucketObjectObj.newKbucketNode == "object"
                  ) {
                    newKbucketObject = newKbucketObjectObj.newKbucketNode;

                    newKbucketObject_id_array = Object.values(
                      newKbucketObject.id
                    );
                    newKbucketObject_idu8 = new Uint8Array(
                      newKbucketObject_id_array
                    );

                    localbitcoinplusplus.kademlia.addNewUserNodeInKbucket(
                      localbitcoinplusplus.BASE_BLOCKCHAIN,
                      newKbucketObject_idu8,
                      newKbucketObject.data,
                      primaryKBOfTheUser
                    );

                    localbitcoinplusplus.rpc.prototype.send_rpc
                      .call(
                        this,
                        "requestSupernodesToRemoveAUserFloIdFromTheirKBucket",
                        {
                          redundantKbucketNodeU8Id: newKbucketObject_idu8,
                          currentSupernodeFloId:
                            localbitcoinplusplus.wallets
                              .my_local_flo_address,
                          trader_flo_address:
                            res_obj.globalParams.senderFloId
                        }
                      )
                      .then(removeRedundantKNode =>
                        doSend(removeRedundantKNode)
                      );
                  } else {
                    mss = `WARNING: Failed to add ${res_obj.globalParams.senderFloId} to KBucket.`;
                    showMessage(mss);
                    console.warn(mss);
                  }
                });
            } catch (error) {
              console.error(error);
            }
            break;

          case "link_My_Local_IP_To_My_Flo_Id":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              const req_params = res_obj.params[0];
              if (typeof req_params.requesters_pub_key !== "string")
                return;
              let flo_addr_for_pubkey = bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(
                req_params.requesters_pub_key
              );
              if (typeof flo_addr_for_pubkey !== "string") return;
              if (
                flo_addr_for_pubkey !== res_obj.globalParams.senderFloId
              )
                return;
              updateinDB("ipTable", {
                id: helper_functions.unique_id(),  
                flo_public_key: req_params.requesters_pub_key,
                temporary_ip: incoming_msg_local_ip
              }).then(() => {
                  linkBackOthersLocalIPToTheirFloId();
                });
            }
            break;

          case "link_Others_Local_IP_To_Their_Flo_Id":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              const req_params = res_obj.params[0];
              if (typeof req_params.requesters_pub_key !== "string")
                return;
              let flo_addr_for_pubkey = bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(
                req_params.requesters_pub_key
              );
              if (typeof flo_addr_for_pubkey !== "string") return;
              if (
                flo_addr_for_pubkey !== res_obj.globalParams.senderFloId
              )
                return;
              updateinDB("ipTable", {
                id: helper_functions.unique_id(),    
                flo_public_key: req_params.requesters_pub_key,
                temporary_ip: incoming_msg_local_ip
              });
            }
            break;

          case "sync_data_by_vector_clock":
            if (
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                localbitcoinplusplus.wallets.my_local_flo_public_key
              )
            ) {
              if (
                typeof res_obj.params == "object" &&
                typeof res_obj.params[0] == "object"
              ) {
                try {
                  (async function() {
                    let req_dt = res_obj.params[0];
                    let db_instance =
                      localbitcoinplusplus.newBackupDatabase.db[
                        req_dt.leaving_supernode_flo_id
                      ];
                    let dbTable = req_dt.dbTable;
                    let data = req_dt.data;
                    let subjectUser = data.trader_flo_address;
                    let mss = "";

                    if (
                      typeof data.id !== "string" &&
                      typeof data.id !== "number"
                    ) {
                      mss = `WARNING: Failed to sync data by vector clock as id field could not be found.`;
                      showMessage(mss);
                      throw new Error(mss);
                    }
                    if (typeof db_instance !== "object") {
                      mss = `WARNING: Failed to sync data by vector clock as invalid DB instance was encountered.`;
                      showMessage(mss);
                      throw new Error(mss);
                    }
                    let myOwnDBData = await db_instance.backup_readDB(
                      dbTable,
                      data.id
                    );
                    if (typeof myOwnDBData.vectorClock !== "number") {
                      mss = `WARNING: Failed to sync data by vector clock as id field could not be found.`;
                      showMessage(mss);
                      throw new Error(mss);
                    }
                    if (data.vectorClock < myOwnDBData.vectorClock) {
                      // You have the latest data, send it to other supernodes

                      let getNextClosestSuObj = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                        "",
                        localbitcoinplusplus.master_configurations.MaxBackups,
                        supernodeKBucket,
                        req_dt.leaving_supernode_flo_id
                      );
                      let nextBackupSupernode =
                        getNextClosestSuObj[1].data.id;

                      if (typeof nextBackupSupernode !== "string") {
                        let msg = `WARNING: Failed to determine next closest backup supernode for ${req_dt.leaving_supernode_flo_id}.`;
                        showMessage(msg);
                        throw new Error(msg);
                      }

                      getNextClosestSuObj.map((nextSu, i) => {
                        if (
                          nextSu.data.id !==
                          localbitcoinplusplus.wallets
                            .my_local_flo_address
                        ) {
                          let nextSuConn =
                            localbitcoinplusplus.backupWS[nextSu.data.id];
                          if (typeof nextSuConn !== "object") {
                            let msg = `WARNING: Failed to open a backup WS connection with Supernode ${nextSu}.`;
                            showMessage(msg);
                            throw new Error(msg);
                          }
                          RM_RPC.send_rpc
                            .call(this, "sync_data_by_vector_clock", {
                              trader_flo_address: data.trader_flo_address,
                              receiver_flo_address: nextSu.data.id,
                              leaving_supernode_flo_id:
                                req_dt.leaving_supernode_flo_id,
                              data: myOwnDBData,
                              dbTable: dbTable
                            })
                            .then(server_response =>
                              doSend(server_response, nextSu.data.id)
                            );
                        }
                      });
                    } else if (
                      data.vectorClock > myOwnDBData.vectorClock
                    ) {
                      // You have old data, update respective DB.
                      db_instance
                        .backup_updateinDB(dbTable, data)
                        .then(() => {
                          showMessage(
                            `INFO: Data updated in ${dbTable} for id ${data.id}.`
                          );
                        });
                    }
                  })();
                } catch (error) {
                  throw new Error(error);
                }
              }
            }
            break;

          case "nextBackupSupernodeToSyncDataBeforeActingAsBackupSupernodeNodeRequest":
            if (
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                localbitcoinplusplus.wallets.my_local_flo_public_key
              )
            ) {
              if (
                typeof res_obj.params == "object" &&
                typeof res_obj.params[0] == "object"
              ) {
                const userFLoID = res_obj.params[0].trader_flo_address;
                if (
                  typeof userFLoID !== "string" ||
                  userFLoID.length < 1
                ) {
                  console.warn(`Invalid FLO Id`);
                  return;
                }
                (async function() {
                  const s_id = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                    userFLoID
                  );
                  const primarySuFloId = s_id[0].data.id;

                  let getSupernodeClosestSuObj = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                    "",
                    localbitcoinplusplus.master_configurations.MaxBackups,
                    supernodeKBucket,
                    primarySuFloId
                  );

                  let promises = [];
                  let leaving_supernode_flo_id = "";

                  for (
                    let index = 0;
                    index < getSupernodeClosestSuObj.length;
                    index++
                  ) {
                    const element = getSupernodeClosestSuObj[index];
                    if (
                      element.data.id ==
                      localbitcoinplusplus.wallets.my_local_flo_address
                    )
                      break;
                    promises.push(
                      readDBbyIndex(
                        "myClosestSupernodes",
                        "trader_flo_address",
                        element.data.id
                      )
                    );
                    leaving_supernode_flo_id = element.data.id;
                  }

                  Promise.all(promises).then(cs => {
                    let isPreviousSupernodesLive = cs.map(
                      (su_status, index) =>
                        typeof su_status[index] !== "object" ||
                        su_status[index].is_live == true
                    );

                    if (!isPreviousSupernodesLive.includes(true)) {
                      /*********************************************************************
                       *DISABLE ANY FURTHER REQUEST BY USER HERE UNTIL FULL SYNC IS COMPLETE*
                       **********************************************************************/

                      getSupernodeClosestSuObj.map((nextSu, i) => {
                        if (
                          i > 0 &&
                          nextSu.data.id !==
                            localbitcoinplusplus.wallets
                              .my_local_flo_address
                        ) {
                          let nextSuConn =
                            localbitcoinplusplus.newBackupDatabase.db[
                              nextSu.data.id
                            ];
                          if (typeof nextSuConn !== "object") {
                            let msg = `WARNING: Failed to open a backup DB with Supernode ${nextSu}.`;
                            showMessage(msg);
                            throw new Error(msg);
                          }

                          const table_array = [
                            "deposit",
                            "cash_deposits",
                            "withdraw_cash",
                            "withdraw_btc",
                            "crypto_balances",
                            "cash_balances",
                            "sellOrders",
                            "buyOrders"
                          ];

                          table_array.map(async tbl => {
                            let record = await nextSuConn.backup_readDBbyIndex(
                              tbl,
                              "trader_flo_address",
                              userFLoID
                            );

                            record.map(rec => {
                              RM_RPC.send_rpc
                                .call(this, "sync_data_by_vector_clock", {
                                  trader_flo_address: userFLoID,
                                  receiver_flo_address: nextSu.data.id,
                                  leaving_supernode_flo_id: leaving_supernode_flo_id,
                                  data: rec,
                                  dbTable: tbl
                                })
                                .then(server_response =>
                                  doSend(server_response, nextSu.data.id)
                                );
                            });
                          });
                        }
                      });
                    }
                  });
                })();
              }
            }
            break;

          case "reconnect_with_another_supernode":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object" &&
              !localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                localbitcoinplusplus.wallets.my_local_flo_public_key
              )
            ) {
              (async function() {
                let su_db_data = res_obj.params[0];
                const primarySuObj = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                  localbitcoinplusplus.wallets.my_local_flo_address);

                const MCS = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                  "",
                  localbitcoinplusplus.master_configurations.supernodesPubKeys.length,
                  supernodeKBucket,
                  primarySuObj[0].data.id
                );  

                // If user is already connected to primary return back
                if (
                  localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS ==
                  MCS[0].data.id
                )
                  return;

                  if (websocket.readyState === WebSocket.OPEN) {
                    websocket.close();
                  }
                    showMessage('INFO: Please wait...Reconnecting to server.');  
                    const newSu = await readDBbyIndex(
                      "myClosestSupernodes",
                      "trader_flo_address",
                      primarySuObj[0].data.id
                    );
                    if (
                      typeof newSu == "object" &&
                      typeof newSu[0].trader_flo_address == "string"
                    ) {
                      await startWebSocket(`${WS}://${newSu[0].ip}`);
                      showMssage(`INFO: ${su_db_data.server_msg}`);
                    } else {
                      alert(`INFO: Please reload the page.`);
                    }
                  
                  return;  
               
              })();
            }
            break;

          case "update_deposited_crypto_instance":
            if (
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                res_obj.nodePubKey
              )
            ) {
              const res_data = res_obj.params[0];
              const backup_db = res_data.db_inst;
              let _updateinDB = updateinDB;
              try {
                if (
                  typeof backup_db == "string" &&
                  backup_db.length > 0
                ) {
                  if (
                    localbitcoinplusplus.wallets.my_local_flo_address !==
                      backup_db &&
                    typeof localbitcoinplusplus.newBackupDatabase.db[
                      backup_db
                    ] == "object"
                  ) {
                    const foreign_db =
                      localbitcoinplusplus.newBackupDatabase.db[
                        backup_db
                      ];
                    _updateinDB = foreign_db.backup_updateinDB.bind(
                      foreign_db
                    );
                  }

                  if (typeof res_data.deposit_data == "object") {
                      for (const deposits of res_data.deposit_data) {
                          _updateinDB(
                              "deposit",
                              deposits,
                              deposits.id,
                              true,
                              false
                          );                                
                      }
                  }

                }
              } catch (e) {
                console.error(e);
              }
            }
            break;

          case "delete_deposited_crypto_instance":
            if (
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                res_obj.nodePubKey
              )
            ) {
              const res_data = res_obj.params[0];
              const backup_db = res_data.db_inst;
              let _removeinDB = removeinDB;
              try {
                if (
                  typeof backup_db == "string" &&
                  backup_db.length > 0
                ) {
                  if (
                    localbitcoinplusplus.wallets.my_local_flo_address !==
                      backup_db &&
                    typeof localbitcoinplusplus.newBackupDatabase.db[
                      backup_db
                    ] == "object"
                  ) {
                    const foreign_db =
                      localbitcoinplusplus.newBackupDatabase.db[
                        backup_db
                      ];
                    _removeinDB = foreign_db.backup_removeinDB.bind(
                      foreign_db
                    );
                  }
                  if (typeof res_data.withdraw_btc_id == "string")
                    _removeinDB("withdraw_btc", res_data.withdraw_btc_id);
                  if(typeof res_data.deposit_id=="string")
                      _removeinDB("deposit", res_data.deposit_id);
                  if(typeof res_data.reserves_id=="string")
                      _removeinDB("system_btc_reserves_private_keys", 
                      res_data.reserves_id);
                }
              } catch (e) {
                console.error(e);
              }
            }
            break;

          case "request_me_db_data":
            if (
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                res_obj.nodePubKey
              )
            ) {
              const resp = res_obj.params[0];

              if (
                localbitcoinplusplus.wallets.my_local_flo_address !==
                resp.receiver_flo_address
              )
                return;

              localbitcoinplusplus.actions.sync_backup_supernode_from_backup_supernode(
                localbitcoinplusplus.wallets.my_local_flo_address,
                resp.trader_flo_address,
                resp.db_inst
              );
            }
            break;

          default:
            break;
        }
      }
    } catch (error) {
      console.error(error);
      return;
    }
  }
}

async function handle_backup_server_messages(response) {
  console.log("backup response: " + response);

  var res_pos = response.indexOf("{");
  if (res_pos >= 0) {
    let isRequestToLinkIp = response.search("linkMyLocalIPToMyFloId");
    let isRequestToLinkOthersIp = response.search(
      "link_Others_Local_IP_To_Their_Flo_Id"
    );
    let incoming_msg_local_ip = ``;
    if (isRequestToLinkIp >= 0 || isRequestToLinkOthersIp >= 0) {
      let index_of_ip = response.indexOf(" ");
      if (incoming_msg_local_ip >= 0) {
        incoming_msg_local_ip = response.substr(0, index_of_ip);
      }
    }
    var res = response.substr(res_pos);
    try {
      const isIncomingMessageValid = await validateIncomingMessage(res);
      console.log(
        "isIncomingMessageValid (Backup): ",
        isIncomingMessageValid
      );

      var res_obj = JSON.parse(res);

      // Only supernodes are allowed to go below
      if (
        !localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
          res_obj.nodePubKey
        )
      )
        return;

      if (
        typeof res_obj.globalParams.receiverFloId == "string" &&
        res_obj.globalParams.receiverFloId !==
          localbitcoinplusplus.wallets.my_local_flo_address
      )
        return;

      if (typeof res_obj.method !== "undefined") {
        let response_from_sever;

        const RM_WALLET = new localbitcoinplusplus.wallets();
        const RM_TRADE = new localbitcoinplusplus.trade();
        const RM_RPC = new localbitcoinplusplus.rpc();

        switch (res_obj.method) {
          
          case "server_sync_response":
            if (
              typeof res_obj.params !== "object" ||
              typeof res_obj.params[0] !== "object" ||
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                localbitcoinplusplus.wallets.my_local_flo_public_key
              )
            )
              return;
            let su_backup_db_data = res_obj.params[0];

            if (
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                localbitcoinplusplus.wallets.my_local_flo_public_key
              )
            )
              return;

            RM_RPC.filter_legit_backup_requests(
              su_backup_db_data.trader_flo_address,
              async function(is_valid_request) {
                if (!is_valid_request) return false;

                (async function() {
                  for (let tableStoreName in su_backup_db_data) {
                    // skip loop if the property is from prototype
                    if (
                      tableStoreName == "trader_flo_address" ||
                      tableStoreName == "receiver_flo_address" ||
                      !su_backup_db_data.hasOwnProperty(tableStoreName)
                    )
                      continue;

                    try {
                      let obj = su_backup_db_data[tableStoreName];
                      if (
                        [
                          "userPublicData"
                        ].includes(tableStoreName)
                      ) {
                        if (obj.length > 0) {
                          for (var prop in obj) {
                            if (!obj.hasOwnProperty(prop)) continue;
                            await updateinDB(
                              tableStoreName,
                              obj[prop],
                              obj[prop].trader_flo_address
                            );
                          }
                        }
                      } else {
                        let resdbdata = await removeAllinDB(
                          tableStoreName
                        );
                        if (resdbdata !== false) {
                          if (obj.length > 0) {
                            for (var prop in obj) {
                              if (!obj.hasOwnProperty(prop)) continue;
                              await addDB(resdbdata, obj[prop]);
                            }
                          }
                        }
                      }
                    } catch (error) {
                      console.log(error);
                    }
                  }
                })();
              }
            );

            break;

          case "trade_buy_request_response":
            if (
              typeof res_obj.params !== "object" ||
              typeof res_obj.params[0] !== "object"
            )
              return;
            let buyOrders_data = res_obj.params[0];

            if (
              typeof localbitcoinplusplus.master_configurations
                .supernodesPubKeys == "object" &&
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                buyOrders_data.supernodePubKey
              )
            ) {
              let isDataSignedBySuperNode = RM_WALLET.verify(
                buyOrders_data.data_hash,
                buyOrders_data.supernode_sign,
                buyOrders_data.supernodePubKey
              );
              if (isDataSignedBySuperNode === true) {
                let getPrimarySuObj = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                  buyOrders_data.trader_flo_address
                );
                const primarySupernode = getPrimarySuObj[0].data.id;
                const backup_server_db_instance =
                  localbitcoinplusplus.newBackupDatabase.db[
                    primarySupernode
                  ];

                if (typeof backup_server_db_instance !== "object") {
                  let backup_db_error_msg = `WARNING: Unknown DB instance. DB Backup failed.`;
                  showMessage(backup_db_error_msg);
                  throw new Error(backup_db_error_msg);
                }

                // Add buy order
                backup_server_db_instance
                  .backup_addDB("buyOrders", buyOrders_data);
              }
            }
            break;
          case "trade_sell_request_response":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              let sellOrders_data = res_obj.params[0];
              if (
                typeof localbitcoinplusplus.master_configurations
                  .supernodesPubKeys == "object" &&
                localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                  sellOrders_data.supernodePubKey
                )
              ) {
                let isDataSignedBySuperNode = RM_WALLET.verify(
                  sellOrders_data.data_hash,
                  sellOrders_data.supernode_sign,
                  sellOrders_data.supernodePubKey
                );
                if (isDataSignedBySuperNode === true) {
                  let getPrimarySuObj = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                    sellOrders_data.trader_flo_address
                  );
                  const primarySupernode = getPrimarySuObj[0].data.id;
                  const backup_server_db_instance =
                    localbitcoinplusplus.newBackupDatabase.db[
                      primarySupernode
                    ];

                  if (typeof backup_server_db_instance !== "object") {
                    let backup_db_error_msg = `WARNING: Unknown DB instance. DB Backup failed.`;
                    showMessage(backup_db_error_msg);
                    throw new Error(backup_db_error_msg);
                  }

                  // Add buy order
                  backup_server_db_instance
                    .backup_addDB("sellOrders", sellOrders_data);
                }
              }
            }
            break;

          case "deposit_asset_request_response":
            if (
              typeof res_obj.params !== "object" ||
              typeof res_obj.params[0] !== "object"
            )
              return;
            let deposit_res_data = res_obj.params[0];
            RM_RPC.filter_legit_backup_requests(
              deposit_res_data.trader_flo_address,
              async function(is_valid_request) {
                if (!is_valid_request) return false;
                if (
                  typeof res_obj.params == "object" &&
                  typeof res_obj.params[0] == "object" &&
                  typeof res_obj.params[0].data == "object"
                ) {
                  let resp = res_obj.params[0];
                  if (
                    RM_WALLET.verify(
                      resp.data.depositDataHash,
                      resp.data.order_validator_sign,
                      resp.data.order_validator_public_key
                    )
                  ) {
                    let getPrimarySuObj = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                      resp.data.trader_flo_address
                    );
                    const primarySupernode = getPrimarySuObj[0].data.id;
                    const backup_server_db_instance =
                      localbitcoinplusplus.newBackupDatabase.db[
                        primarySupernode
                      ];
                    if (typeof backup_server_db_instance !== "object") {
                      let backup_db_error_msg = `WARNING: Unknown DB instance. DB Backup failed.`;
                      showMessage(backup_db_error_msg);
                      throw new Error(backup_db_error_msg);
                    }

                    backup_server_db_instance.backup_addDB(
                      "deposit",
                      resp.data
                    );
                    if (typeof resp.withdrawer_data == "object") {
                      backup_server_db_instance.backup_updateinDB(
                        "withdraw_cash",
                        resp.withdrawer_data,
                        resp.withdrawer_data.trader_flo_address,
                        true,
                        false
                      );
                    }
                  }
                }
              }
            );
            break;

          case "deposit_cash_request_response":
            if (
              typeof res_obj.params !== "object" ||
              typeof res_obj.params[0] !== "object"
            )
              return;
            let deposit_cash_data = res_obj.params[0];
            RM_RPC.filter_legit_backup_requests(
              deposit_cash_data.trader_flo_address,
              async function(is_valid_request) {
                if (!is_valid_request) return false;
                if (
                  typeof res_obj.params == "object" &&
                  typeof res_obj.params[0] == "object" &&
                  typeof res_obj.params[0].data == "object"
                ) {
                  let resp = res_obj.params[0];
                  if (
                    RM_WALLET.verify(
                      resp.data.depositDataHash,
                      resp.data.order_validator_sign,
                      resp.data.order_validator_public_key
                    )
                  ) {
                    let getPrimarySuObj = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                      resp.data.trader_flo_address
                    );
                    const primarySupernode = getPrimarySuObj[0].data.id;
                    const backup_server_db_instance =
                      localbitcoinplusplus.newBackupDatabase.db[
                        primarySupernode
                      ];
                    if (typeof backup_server_db_instance !== "object") {
                      let backup_db_error_msg = `WARNING: Unknown DB instance. DB Backup failed.`;
                      showMessage(backup_db_error_msg);
                      throw new Error(backup_db_error_msg);
                    }

                    backup_server_db_instance.backup_addDB(
                      "cash_deposits",
                      resp.data
                    );

                    // Delete the request after 24 hours
                    let cash_order_life = JSON.parse(localbitcoinplusplus.master_configurations.ordersLife);
                    localbitcoinplusplus.actions.delay(cash_order_life.cashDeposit).then(function() {
                      backup_server_db_instance.backup_removeinDB("cash_deposits", 
                      resp.data.id);
                    });
                  }
                }
              }
            );
            break;

          case "withdrawal_request_response":                
            if (
              typeof res_obj.params !== "object" ||
              typeof res_obj.params[0] !== "object"
            )
              return;
            let withdrawal_res_data = res_obj.params[0];
            RM_RPC.filter_legit_backup_requests(
              withdrawal_res_data.trader_flo_address,
              async function(is_valid_request) {
                if (!is_valid_request) return false;
                
                if (
                  typeof res_obj.params == "object" &&
                  typeof res_obj.params[0] == "object"
                ) {
                  if (
                    RM_WALLET.verify(
                      res_obj.params[0].withdrawDataHash,
                      res_obj.params[0].order_validator_sign,
                      res_obj.params[0].order_validator_public_key
                    )
                  ) {
                    let getPrimarySuObj = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                      withdrawal_res_data.trader_flo_address
                    );
                    const primarySupernode = getPrimarySuObj[0].data.id;
                    const backup_server_db_instance =
                      localbitcoinplusplus.newBackupDatabase.db[
                        primarySupernode
                      ];

                    if (typeof backup_server_db_instance !== "object") {
                      let backup_db_error_msg = `WARNING: Unknown DB instance. DB Backup failed.`;
                      showMessage(backup_db_error_msg);
                      throw new Error(backup_db_error_msg);
                    }

                    backup_server_db_instance
                      .backup_addDB("withdraw_cash", res_obj.params[0]);
                  }
                }
              }
            );
            break;

          case "cancel_trade_in_backup":
            if (
              typeof res_obj.params !== "object" ||
              typeof res_obj.params[0] !== "object" ||
              !localbitcoinplusplus.master_configurations.supernodesPubKeys
              .includes(res_obj.nodePubKey)
            )
              return;
            let cancel_res_data = res_obj.params[0];
            RM_RPC.filter_legit_backup_requests(
              cancel_res_data.trader_flo_address,
              async function(is_valid_request) {
                if (!is_valid_request) return false;
                if (
                  typeof res_obj.params == "object" &&
                  typeof res_obj.params[0] == "object"
                ) {
                  let cancel_request = cancel_res_data.cancel_trade_obj;
                  if (cancel_request.job == "cancel_trade_request") {
                    let getPrimarySuObj = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                      cancel_res_data.trader_flo_address
                    );
                    const primarySupernode = getPrimarySuObj[0].data.id;
                    const backup_server_db_instance =
                      localbitcoinplusplus.newBackupDatabase.db[
                        primarySupernode
                      ];

                    if (typeof backup_server_db_instance !== "object") {
                      let backup_db_error_msg = `WARNING: Unknown DB instance. DB Backup failed.`;
                      throw new Error(backup_db_error_msg);
                    }
                        tradeDB =
                          cancel_request.trade_type == "buy"
                            ? "buyOrders"
                            : "sellOrders";
                        if (
                          RM_WALLET.verify(
                            cancel_request.trade_id,
                            cancel_request.signed_trade_id,
                            cancel_res_data.trader_flo_pubkey
                          )
                        ) {
                          backup_server_db_instance
                            .backup_removeinDB(
                              tradeDB,
                              cancel_request.trade_id
                            );
                        }
                  }
                }
              }
            );
            break;

          case "trade_balance_updates":
            if (
              !localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                res_obj.nodePubKey
              )
            )
              return;
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              const trade_balance_res = res_obj.params[0];
              // Verify data
              let trade_info_str = JSON.stringify(
                trade_balance_res.trade_infos
              );
              let buyer_cash_data_str = JSON.stringify(
                trade_balance_res.buyer_cash_data
              );
              let seller_cash_data_str = JSON.stringify(
                trade_balance_res.seller_cash_data
              );
              let buyer_btc_data_str = JSON.stringify(
                trade_balance_res.buyer_btc_data
              );
              let seller_btc_data_str = JSON.stringify(
                trade_balance_res.seller_btc_data
              );

              let res_str = `${trade_info_str}${buyer_cash_data_str}${seller_cash_data_str}${buyer_btc_data_str}${seller_btc_data_str}`;
              let hashed_data = Crypto.SHA256(res_str);

              RM_RPC.filter_legit_backup_requests(
                trade_balance_res.trade_infos.buyer_flo_id,
                async function(is_valid_request) {
                  if (is_valid_request !== true) return false;

                  if (
                    localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                      trade_balance_res.supernodePubKey
                    )
                  ) {
                    if (
                      RM_WALLET.verify(
                        hashed_data,
                        trade_balance_res.supernode_sign,
                        trade_balance_res.supernodePubKey
                      )
                    ) {
                      let getPrimarySuObj = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                        trade_balance_res.trade_infos.buyer_flo_id
                      );
                      const primarySupernode = getPrimarySuObj[0].data.id;
                      const backup_server_db_instance =
                        localbitcoinplusplus.newBackupDatabase.db[
                          primarySupernode
                        ];

                      if (typeof backup_server_db_instance !== "object") {
                        let backup_db_error_msg = `WARNING: Unknown DB instance. DB Backup failed.`;
                        showMessage(backup_db_error_msg);
                        throw new Error(backup_db_error_msg);
                      }

                      // Delete orders in clients DB
                      try {
                        backup_server_db_instance.backup_removeinDB(
                          "buyOrders",
                          trade_balance_res.trade_infos.buy_order_id
                        );
                        backup_server_db_instance.backup_removeinDB(
                          "sellOrders",
                          trade_balance_res.trade_infos.sell_order_id
                        );
                      } catch (error) {
                        callback(false);
                        throw new Error(error);
                      }

                      // Update balances in clients DB
                      try {
                        let b1 = backup_server_db_instance.backup_updateinDB(
                          "cash_balances",
                          trade_balance_res.buyer_cash_data,
                          trade_balance_res.trade_infos.buyer_flo_id,
                          true,
                          false
                        );
                        let b2 = backup_server_db_instance.backup_updateinDB(
                          "cash_balances",
                          trade_balance_res.seller_cash_data,
                          trade_balance_res.trade_infos.seller_flo_id,
                          true,
                          false
                        );
                        let b3 = backup_server_db_instance.backup_updateinDB(
                          "crypto_balances",
                          trade_balance_res.buyer_btc_data,
                          trade_balance_res.trade_infos.buyer_flo_id,
                          true,
                          false
                        );
                        let b4 = backup_server_db_instance.backup_updateinDB(
                          "crypto_balances",
                          trade_balance_res.seller_btc_data,
                          trade_balance_res.trade_infos.seller_flo_id,
                          true,
                          false
                        );

                        Promise.all([b1,b2,b3,b4])
                          .catch(e => {throw new Error(e)});

                      } catch (error) {
                        callback(false);
                        throw new Error(error);
                      }
                    }
                  }
                }
              );
            }
            break;

          case "update_all_new_cash_withdraw_recorded_in_db":
            if (
              typeof res_obj.params !== "object" ||
              typeof res_obj.params[0] !== "object"
            )
              return;
            let update_deposit_withdraw_claim_data = res_obj.params[0];
            RM_RPC.filter_legit_backup_requests(
              update_deposit_withdraw_claim_data.trader_flo_address,
              async function(is_valid_request) {
                if (!is_valid_request) return false;
                if (
                  typeof res_obj.params == "object" &&
                  typeof res_obj.params[0] == "object"
                ) {
                  let withdraw_success_response = res_obj.params[0];
                  let update_cash_balance_obj_res = {
                    withdrawer_cash_data:
                      withdraw_success_response.withdrawer_cash_data
                  };
                  let update_cash_balance_obj_res_str = JSON.stringify(
                    update_cash_balance_obj_res
                  );
                  let update_cash_balance_obj_res_hash = Crypto.SHA256(
                    update_cash_balance_obj_res_str
                  );
                  let update_cash_balance_obj_res_verification = RM_WALLET.verify(
                    update_cash_balance_obj_res_hash,
                    withdraw_success_response.sign,
                    withdraw_success_response.publicKey
                  );

                  if (
                    update_cash_balance_obj_res_hash ==
                      withdraw_success_response.hash &&
                    update_cash_balance_obj_res_verification == true
                  ) {
                    let getPrimarySuObj = await localbitcoinplusplus.kademlia.determineClosestSupernode(
                      update_deposit_withdraw_claim_data.trader_flo_address
                    );
                    const primarySupernode = getPrimarySuObj[0].data.id;
                    const backup_server_db_instance =
                      localbitcoinplusplus.newBackupDatabase.db[
                        primarySupernode
                      ];

                    if (typeof backup_server_db_instance !== "object") {
                      let backup_db_error_msg = `WARNING: Unknown DB instance. DB Backup failed.`;
                      showMessage(backup_db_error_msg);
                      throw new Error(backup_db_error_msg);
                    }

                    backup_server_db_instance.backup_updateinDB(
                      "cash_balances",
                      withdraw_success_response.withdrawer_cash_data,
                      withdraw_success_response.withdrawer_cash_data.id,
                      true, 
                      false
                    );

                    return true;
                  }
                  return false;
                }
              }
            );
            break;
          case "requestSupernodesToRemoveAUserFloIdFromTheirKBucket":
            if (
              typeof res_obj.params !== "object" ||
              typeof res_obj.params[0] !== "object"
            )
              return;
            let removeUserFromKBData = res_obj.params[0];
            RM_RPC.filter_legit_backup_requests(
              removeUserFromKBData.trader_flo_address,
              function(is_valid_request) {
                if (!is_valid_request) return false;
                if (
                  typeof res_obj.params == "object" &&
                  typeof res_obj.params[0] == "object"
                ) {
                  const removeKBReq = res_obj.params[0];
                  const currentSupernodeFloIdOfUser =
                    removeKBReq.currentSupernodeFloId;
                  if (
                    localbitcoinplusplus.wallets.my_local_flo_address ==
                    currentSupernodeFloIdOfUser
                  )
                    return;
                  const userKbucketObject_id_array = Object.values(
                    removeKBReq.redundantKbucketNodeU8Id
                  );
                  const userKBId = new Uint8Array(
                    userKbucketObject_id_array
                  );
                  KBucket.remove(userKBId);
                  return true;
                }
              }
            );
            break;
          case "requestSupernodesKBucketData":
            if (
              typeof res_obj.params !== "object" ||
              typeof res_obj.params[0] !== "object"
            )
              return;
            let reqSuKBData = res_obj.params[0];
            RM_RPC.filter_legit_backup_requests(
              reqSuKBData.trader_flo_address,
              function(is_valid_request) {
                if (!is_valid_request) return false;
                if (typeof res_obj.globalParams.senderFloId !== "string")
                  return;
                let sender = res_obj.globalParams.senderFloId;
                readAllDB("kBucketStore").then(myKBData => {
                  myKBData.receiver_flo_address = sender;

                  localbitcoinplusplus.rpc.prototype.send_rpc
                    .call(this, "SupernodesKBucketDataResponse", myKBData)
                    .then(sendBackMySupernodeKBucket =>
                      doSend(sendBackMySupernodeKBucket)
                    );
                });
              }
            );
            break;
          case "SupernodesKBucketDataResponse":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              const reqSuKBResponseData = res_obj.params[0];
              RM_RPC.filter_legit_backup_requests(
                reqSuKBResponseData.trader_flo_address,
                function(is_valid_request) {
                  if (!is_valid_request) return false;
                  reqSuKBResponseData.map(kd => {
                    let kb =
                      window[
                        `SKBucket_${kd.primary_supernode_flo_public_key}`
                      ];
                    localbitcoinplusplus.kademlia.addFullKBDataInKBucketAndDB(
                      kd,
                      kb
                    );
                  });
                }
              );
            }
            break;
          case "link_My_Local_IP_To_My_Flo_Id":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              const req_params = res_obj.params[0];
              if (typeof req_params.requesters_pub_key !== "string")
                return;
              let flo_addr_for_pubkey = bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(
                req_params.requesters_pub_key
              );
              if (typeof flo_addr_for_pubkey !== "string") return;
              if (
                flo_addr_for_pubkey !== res_obj.globalParams.senderFloId
              )
                return;
              updateinDB("ipTable", {
                id: helper_functions.unique_id(),  
                flo_public_key: req_params.requesters_pub_key,
                temporary_ip: incoming_msg_local_ip
              }).then(() => {
                  linkBackOthersLocalIPToTheirFloId();
                });
            }
            break;
          case "link_Others_Local_IP_To_Their_Flo_Id":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              const req_params = res_obj.params[0];
              if (typeof req_params.requesters_pub_key !== "string")
                return;
              let flo_addr_for_pubkey = bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(
                req_params.requesters_pub_key
              );
              if (typeof flo_addr_for_pubkey !== "string") return;
              if (
                flo_addr_for_pubkey !== res_obj.globalParams.senderFloId
              )
                return;
              updateinDB("ipTable", {
                id: helper_functions.unique_id(),
                flo_public_key: req_params.requesters_pub_key,
                temporary_ip: incoming_msg_local_ip
              });
            }
            break;

          case "add_user_public_data":
            let supernode_flo_public_key =
              localbitcoinplusplus.wallets.my_local_flo_public_key;
            RM_RPC.filter_legit_backup_requests(
              res_obj.params[0].trader_flo_address,
              function(is_valid_request) {
                if (is_valid_request !== true) return false;

                if (
                  typeof res_obj.params == "object" &&
                  typeof res_obj.params[0] == "object"
                ) {
                  let req_data = res_obj.params[0];
                  try {
                    let flo_address = bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(
                      req_data.trader_flo_pubKey
                    );

                    if (
                      flo_address == req_data.trader_flo_address &&
                      req_data.trader_flo_address.length > 0
                    ) {
                      let public_req_object = {
                        trader_flo_address: req_data.trader_flo_address,
                        trader_flo_pubKey: req_data.trader_flo_pubKey,
                        supernode_flo_public_key: supernode_flo_public_key,
                        trader_reputation: 0,
                        timestamp: +new Date()
                      };

                      addDB("userPublicData", public_req_object);

                      localbitcoinplusplus.kademlia
                        .determineClosestSupernode(
                          req_data.trader_flo_address
                        )
                        .then(my_closest_su_list => {
                          const primarySupernodeOfThisUser =
                            my_closest_su_list[0].data.id;
                          const backup_server_db_instance =
                            localbitcoinplusplus.newBackupDatabase.db[
                              primarySupernodeOfThisUser
                            ];

                          if (
                            typeof backup_server_db_instance !== "object"
                          ) {
                            let backup_db_error_msg = `WARNING: Unknown DB instance. DB Backup failed.`;
                            showMessage(backup_db_error_msg);
                            throw new Error(backup_db_error_msg);
                          }
                          backup_server_db_instance.backup_addDB(
                            "userPublicData",
                            public_req_object
                          );
                        });
                    }
                  } catch (error) {
                    throw new Error(
                      "Invalid public key and flo address combination."
                    );
                  }
                }
              }
            );
            break;

          case "add_user_public_data_inBackup_db":
            RM_RPC.filter_legit_backup_requests(
              res_obj.params[0].trader_flo_address,
              function(is_valid_request) {
                if (is_valid_request !== true) return false;

                let supernode_flo_public_key =
                  localbitcoinplusplus.wallets.my_local_flo_public_key;

                if (
                  typeof res_obj.params == "object" &&
                  typeof res_obj.params[0] == "object"
                ) {
                  let req_data = res_obj.params[0];
                  try {
                    let flo_address = bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(
                      req_data.trader_flo_pubKey
                    );

                    if (
                      flo_address == req_data.trader_flo_address &&
                      req_data.trader_flo_address.length > 0
                    ) {
                      let public_req_object = {
                        trader_flo_address: req_data.trader_flo_address,
                        trader_flo_pubKey: req_data.trader_flo_pubKey,
                        supernode_flo_public_key: supernode_flo_public_key,
                        trader_reputation: 0,
                        timestamp: +new Date()
                      };

                      addDB("userPublicData", public_req_object);

                      localbitcoinplusplus.kademlia
                        .determineClosestSupernode(
                          req_data.trader_flo_address
                        )
                        .then(my_closest_su_list => {
                          const primarySupernodeOfThisUser =
                            my_closest_su_list[0].data.id;
                          const backup_server_db_instance =
                            localbitcoinplusplus.newBackupDatabase.db[
                              primarySupernodeOfThisUser
                            ];

                          if (
                            typeof backup_server_db_instance !== "object"
                          ) {
                            let backup_db_error_msg = `WARNING: Unknown DB instance. DB Backup failed.`;
                            showMessage(backup_db_error_msg);
                            throw new Error(backup_db_error_msg);
                          }
                          backup_server_db_instance.backup_addDB(
                            "userPublicData",
                            public_req_object
                          );
                        });
                    }
                  } catch (error) {
                    throw new Error(
                      "Invalid public key and flo address combination."
                    );
                  }
                }
              }
            );
            break;

          case "send_back_shamirs_secret_btc_pvtkey":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              if (
                typeof res_obj.nodePubKey != "string"
                || !localbitcoinplusplus.master_configurations.supernodesPubKeys
                .includes(res_obj.nodePubKey)
                || typeof localbitcoinplusplus.newBackupDatabase.db[res_obj.params[0].db_inst]
                !== "object"
                || !localbitcoinplusplus.master_configurations.supernodesPubKeys
                .includes(localbitcoinplusplus.wallets.my_local_flo_public_key)
              )
                return;

                localbitcoinplusplus.newBackupDatabase.db[res_obj.params[0].db_inst]
                .backup_readDB(
                "supernode_private_key_chunks",
                res_obj.params[0].chunk_val
              ).then(function(res) {
                RM_RPC.send_rpc
                  .call(this, "retrieve_shamirs_secret_btc_pvtkey", {
                    retrieve_pvtkey_req_id:
                      res_obj.params[0].retrieve_pvtkey_req_id,
                    private_key_chunk: res,
                    withdraw_id: res_obj.params[0].withdraw_id,
                    receiver_flo_address:
                      res_obj.globalParams.senderFloId,
                    db_inst: res_obj.params[0].db_inst
                  })
                  .then(send_pvtkey_req => doSend(send_pvtkey_req));
              });
            }
            break;

          case "delete_shamirs_secret_btc_pvtkey":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              if (
                typeof res_obj.nodePubKey != "string"
                || !localbitcoinplusplus.master_configurations.supernodesPubKeys
                .includes(res_obj.nodePubKey)
                || typeof localbitcoinplusplus.newBackupDatabase.db[res_obj.params[0].db_inst]
                !== "object"
                || !localbitcoinplusplus.master_configurations.supernodesPubKeys
                .includes(localbitcoinplusplus.wallets.my_local_flo_public_key)
              )
                return;

                localbitcoinplusplus.newBackupDatabase.db[res_obj.params[0].db_inst]
                .backup_removeinDB(
                  "supernode_private_key_chunks",
                  res_obj.params[0].chunk_val
                 );
            }
            break;  

          case "store_shamirs_secret_pvtkey_shares":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              if (
                typeof res_obj.params == "object" &&
                typeof res_obj.params[0] == "object"
              ) {
                if(typeof res_obj.params[0].trader_flo_address !="string") return;
                localbitcoinplusplus.kademlia.determineClosestSupernode(res_obj.params[0].trader_flo_address)
                .then(my_closest_su_list=>{
                    const primarySupernodeOfThisUser = my_closest_su_list[0].data.id;
                    const backup_server_db_instance = localbitcoinplusplus.newBackupDatabase.db[primarySupernodeOfThisUser];

                    if(typeof backup_server_db_instance !== "object") {
                        let backup_db_error_msg = `WARNING: Unknown DB instance. DB Backup failed.`;
                        showMessage(backup_db_error_msg);
                        throw new Error(backup_db_error_msg);
                    };

                    delete res_obj.params[0].trader_flo_address;
                    backup_server_db_instance.backup_addDB("supernode_private_key_chunks", res_obj.params[0]);
                });
              }
              }
            break;

          case "retrieve_shamirs_secret_btc_pvtkey":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object" &&
              typeof res_obj.params[0].private_key_chunk == "object" &&
              typeof res_obj.params[0].retrieve_pvtkey_req_id ==
                "string" &&
              typeof res_obj.params[0].withdraw_id == "string" &&
              typeof localbitcoinplusplus.wallets.my_local_flo_address ==
                "string" &&
              res_obj.params[0].receiver_flo_address ===
                localbitcoinplusplus.wallets.my_local_flo_address
            ) {

              let shamirs_shares_response = res_obj.params[0];
              let retrieve_pvtkey_req_id =
                res_obj.params[0].retrieve_pvtkey_req_id;
              let withdraw_id = res_obj.params[0].withdraw_id;
              if (typeof btc_pvt_arr !== "object") btc_pvt_arr = [];
              if (
                typeof btc_pvt_arr[retrieve_pvtkey_req_id] == "undefined"
              ) {
                  btc_pvt_arr[retrieve_pvtkey_req_id] = [];
                  localbitcoinplusplus.actions.delay(15*60*1000)
                    .then(()=>{
                        if(typeof btc_pvt_arr[retrieve_pvtkey_req_id]=="object") {
                          btc_pvt_arr[retrieve_pvtkey_req_id] = null;
                        }
                    });
              }

              // Filter function below logic source -
              // https://stackoverflow.com/a/9229821/5348972
              let seen_chunk_id_list = [];

              btc_pvt_arr[retrieve_pvtkey_req_id].filter(function(item) {
                  if(typeof item.private_key_chunk=="object" &&
                      typeof item.private_key_chunk.id=="string" &&
                      !seen_chunk_id_list.hasOwnProperty(
                      item.private_key_chunk.id
                  ) ) {
                      return seen_chunk_id_list.push(item.private_key_chunk.id);
                  }
              });

              if (
                !seen_chunk_id_list.includes(
                  shamirs_shares_response.private_key_chunk.id
                ) &&
                typeof shamirs_shares_response.private_key_chunk.id ==
                  "string"
              ) {
                btc_pvt_arr[retrieve_pvtkey_req_id].push(
                  shamirs_shares_response
                );
              }

              if (
                btc_pvt_arr[retrieve_pvtkey_req_id].length ===
                localbitcoinplusplus.master_configurations
                  .ShamirsMaxShares
              ) {
                delete res_obj.params[0].private_key_chunk;

                let btc_pk_shares_array = btc_pvt_arr[retrieve_pvtkey_req_id]
                      .map(pkChunks => {
                          if (typeof pkChunks.private_key_chunk !== "undefined")
                              return pkChunks.private_key_chunk.privateKeyChunks;
                      })
                      .filter(val => val !== undefined);
                  console.log(btc_pk_shares_array);

                let _readDB = readDB;
                let _readDBbyIndex = readDBbyIndex;
                let _updateinDB = updateinDB;
                
                if(shamirs_shares_response.db_inst!==localbitcoinplusplus.wallets.my_local_flo_address) {
                  if (typeof localbitcoinplusplus.newBackupDatabase.db[shamirs_shares_response.db_inst] ==
                      "object") {
                      const foreign_db =
                          localbitcoinplusplus.newBackupDatabase.db[shamirs_shares_response.db_inst];
                      _readDB = foreign_db.backup_readDB.bind(foreign_db);
                      _readDBbyIndex = foreign_db.backup_readDBbyIndex.bind(foreign_db);
                      _updateinDB = foreign_db.backup_updateinDB.bind(foreign_db);
                  } else {
                      err_msg = `WARNING: Invalid Backup DB Instance Id: ${shamirs_shares_response.db_inst}.`;
                      showMessage(err_msg);
                      throw new Error(err_msg);
                  }
                }
                
                const btc_reserves = await _readDB("system_btc_reserves_private_keys", retrieve_pvtkey_req_id);
                if (typeof btc_reserves !== "object") {
                  console.warn(`Record for ${retrieve_pvtkey_req_id} not found in system_btc_reserves_private_keys`);
                  break;
                }

                let transaction_key = localbitcoinplusplus.actions
                      .master_decrypt(btc_reserves.supernode_transaction_key);
                if(typeof transaction_key=="string") {
                  transaction_key = JSON.parse(transaction_key);
                }     
                if (transaction_key.length <= 0) {
                  console.warn(`Failed to build tx key for ${retrieve_pvtkey_req_id} in system_btc_reserves_private_keys`);
                  break;
                }
                let btc_private_key = RM_WALLET.rebuild_private_key(
                  btc_pk_shares_array,
                  transaction_key
                );
                if (btc_private_key.length <= 0) {
                  console.warn(`Failed to build private key for ${retrieve_pvtkey_req_id} in system_btc_reserves_private_keys`);
                  break;
                }
                console.log(btc_private_key);

                  const withdraw_res = await _readDB("withdraw_btc", withdraw_id);
                  if(typeof withdraw_res=="object" 
                  && typeof withdraw_res.utxo_addr=="object") {
                  const RM_WALLET = new localbitcoinplusplus.wallets;
                  let crypto_addr_gen = RM_WALLET.generateFloKeys(btc_private_key, withdraw_res.product);
                  let crypto_addr = crypto_addr_gen.address;

                  // Very Important Validation: to prevent different withdraw requests mashup
                  if(!Object.values(withdraw_res.utxo_addr).includes(crypto_addr)) {
                      console.warn(`${crypto_addr} deposit address not present in withdraw id ${withdraw_id}`);
                      break;
                  }
                  if(typeof localbitcoinplusplus.btc_private_key_array!=="object"
                  || Object.keys(localbitcoinplusplus.btc_private_key_array).length==0) {
                      localbitcoinplusplus.btc_private_key_array={};
                  }
                  if(typeof localbitcoinplusplus.btc_private_key_array[withdraw_id] !== "object"
                   || localbitcoinplusplus.btc_private_key_array[withdraw_id]==null) {
                      localbitcoinplusplus.btc_private_key_array[withdraw_id] = [];
                  }
                  localbitcoinplusplus.btc_private_key_array[withdraw_id].push(btc_private_key);
                  
                  if(localbitcoinplusplus.btc_private_key_array[withdraw_id].length
                      ===Object.values(withdraw_res.utxo_addr).length) {
                      // When all the private keys are built successfully proceed further
                      res_obj.params[0].btc_private_key_array = 
                          localbitcoinplusplus.btc_private_key_array[withdraw_id];
                      
                      res_obj.params[0].trader_flo_address = withdraw_res.trader_flo_address;
                      
                      if(shamirs_shares_response.db_inst==localbitcoinplusplus.wallets.my_local_flo_address) {
                          RM_RPC.receive_rpc_response.call(
                              this,
                              JSON.stringify(res_obj)
                          );

                      } else {
                          RM_RPC.backup_receive_rpc_response.call(
                              this,
                              JSON.stringify(res_obj)
                          );
                      }

                      if(!delete localbitcoinplusplus.btc_private_key_array[withdraw_id]) {
                          localbitcoinplusplus.btc_private_key_array[withdraw_id] = null;
                      }
                      
                  }
              }
              btc_pvt_arr = Object.keys(btc_pvt_arr).filter(f=>f!==retrieve_pvtkey_req_id);
            }
          }
            break;

          case "updateUserCryptoBalanceRequest":
            if (
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                res_obj.nodePubKey
              )
            ) {
              if (
                typeof res_obj.params == "object" &&
                typeof res_obj.params[0] == "object"
              ) {
                let updateUserCryptoBalanceResponseObject =
                  res_obj.params[0];

                if (
                  typeof res_obj.params[0].trader_flo_address != "string"
                )
                  return;
                localbitcoinplusplus.kademlia
                  .determineClosestSupernode(
                    res_obj.params[0].trader_flo_address
                  )
                  .then(my_closest_su_list => {
                    const primarySupernodeOfThisUser =
                      my_closest_su_list[0].data.id;
                    const backup_server_db_instance =
                      localbitcoinplusplus.newBackupDatabase.db[
                        primarySupernodeOfThisUser
                      ];

                    if (typeof backup_server_db_instance !== "object") {
                      let backup_db_error_msg = `WARNING: Unknown DB instance. DB Backup failed.`;
                      showMessage(backup_db_error_msg);
                      throw new Error(backup_db_error_msg);
                    }

                    let updateUserCryptoBalanceResponseString = JSON.stringify(
                      updateUserCryptoBalanceResponseObject.updatedBTCBalanceObject
                    );
                    let updateUserCryptoBalanceResponseStringHash = Crypto.SHA256(
                      updateUserCryptoBalanceResponseString
                    );
                    let isBalanceLegit = RM_WALLET.verify(
                      updateUserCryptoBalanceResponseStringHash,
                      updateUserCryptoBalanceResponseObject.updatedBTCBalanceObjectSign,
                      res_obj.nodePubKey
                    );
                    if (isBalanceLegit) {
                      backup_server_db_instance.backup_updateinDB(
                        "crypto_balances",
                        updateUserCryptoBalanceResponseObject.updatedBTCBalanceObject,
                        updateUserCryptoBalanceResponseObject.updatedBTCBalanceObject.id,
                        true,
                        false
                      ).then(()=>{
                          if (
                          localbitcoinplusplus.wallets.my_local_flo_address ==
                          updateUserCryptoBalanceResponseObject.trader_flo_address
                          ) {
                          displayBalances(
                              updateUserCryptoBalanceResponseObject.trader_flo_address
                          );
                          showMessage(`INFO: Your balance is updated.`);
                          }
                          return true;
                      })
                    } else {
                      showMessage(
                        `WARNING: Failed to update balance in your DB. Please refresh.`
                      );
                    }
                  });
              }
            }

            break;

          case "updateUsertraderDepositsRequest":
            if (
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                res_obj.nodePubKey
              )
            ) {
              let updateUserDepositsResponseObject = res_obj.params[0];

              if (typeof res_obj.params[0].trader_flo_address != "string")
                return;
              localbitcoinplusplus.kademlia
                .determineClosestSupernode(
                  res_obj.params[0].trader_flo_address
                )
                .then(my_closest_su_list => {
                  const primarySupernodeOfThisUser =
                    my_closest_su_list[0].data.id;
                  const backup_server_db_instance =
                    localbitcoinplusplus.newBackupDatabase.db[
                      primarySupernodeOfThisUser
                    ];

                  if (typeof backup_server_db_instance !== "object") {
                    let backup_db_error_msg = `WARNING: Unknown DB instance. DB Backup failed.`;
                    showMessage(backup_db_error_msg);
                    throw new Error(backup_db_error_msg);
                  }

                  let updateUserDepositsResponseString = JSON.stringify(
                    updateUserDepositsResponseObject.updatedTraderDepositObject
                  );
                  let updateUserDepositsResponseStringHash = Crypto.SHA256(
                    updateUserDepositsResponseString
                  );
                  let isBalanceLegit = RM_WALLET.verify(
                    updateUserDepositsResponseStringHash,
                    updateUserDepositsResponseObject.updatedDepositsObjectSign,
                    res_obj.nodePubKey
                  );
                  if (isBalanceLegit) {
                    backup_server_db_instance.backup_updateinDB(
                      "deposit",
                      updateUserDepositsResponseObject.updatedTraderDepositObject,
                      updateUserDepositsResponseObject.updatedTraderDepositObject.id,
                      true,
                      false
                    ).then(()=>{
                      if (
                          localbitcoinplusplus.wallets.my_local_flo_address ==
                          updateUserDepositsResponseObject.trader_flo_address
                      ) {
                          displayBalances(
                          updateUserDepositsResponseObject.trader_flo_address
                          );
                          showMessage(`INFO: Your balance is updated.`);
                      }
                      return true;
                    })
                  } else {
                    showMessage(
                      `WARNING: Failed to update balance in your DB. Please refresh.`
                    );
                  }
                });
            }
            break;

            case "sync_backup_supernode_from_backup_supernode_response":
            let su_db_data = res_obj.params[0];
            if (
              typeof localbitcoinplusplus.wallets.my_local_flo_address !==
                "string" ||
              typeof su_db_data.receiver_flo_address !== "string" ||
              su_db_data.receiver_flo_address !==
                localbitcoinplusplus.wallets.my_local_flo_address
            ) {
              console.warn(
                `WARNING: This backup response data was not meant for you.`
              );
              return;
            }

            const timenow = + new Date();
            const lifetime = JSON.parse(localbitcoinplusplus.master_configurations.ordersLife);
            const db_sync_promises = [];

            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object"
            ) {
              (async function() {
                let _addDB = addDB;
                let _updateinDB = updateinDB;
                let backup_db;

                if (
                  typeof localbitcoinplusplus.wallets
                    .my_local_flo_address !== "string" ||
                  localbitcoinplusplus.wallets.my_local_flo_address
                    .length < 1
                ) {
                  console.warn(`WARNING: Local FLO Address is not set.`);
                  return;
                }

                if (
                  su_db_data.trader_flo_address !==
                  localbitcoinplusplus.wallets.my_local_flo_address
                ) {
                  backup_db = su_db_data.trader_flo_address;
                }
                if (
                  typeof backup_db == "string" &&
                  backup_db.length > 0
                ) {
                  if (
                    typeof localbitcoinplusplus.newBackupDatabase.db[
                      backup_db
                    ] == "object"
                  ) {
                    const foreign_db =
                      localbitcoinplusplus.newBackupDatabase.db[
                        backup_db
                      ];
                    _readDB = foreign_db.backup_readDB.bind(foreign_db);
                    _readDBbyIndex = foreign_db.backup_readDBbyIndex.bind(
                      foreign_db
                    );
                    _updateinDB = foreign_db.backup_updateinDB.bind(
                      foreign_db
                    );
                   _removeinDB = foreign_db.backup_removeinDB.bind(
                      foreign_db
                    );
                  } else {
                    err_msg = `WARNING: Invalid Backup DB Instance Id: ${backup_db}.`;
                    showMessage(err_msg);
                    throw new Error(err_msg);
                  }
                }
                let i = 0;
                for (let tableStoreName in su_db_data) {
                  i++;
                  if (i == Object.keys(su_db_data).length - 2) {
                    // Close unnecessary connections now
                    reactor.dispatchEvent(
                      "remove_extra_backup_connections"
                    );
                  }
                  // skip loop if the property is from prototype
                  if (
                    tableStoreName == "trader_flo_address" ||
                    tableStoreName == "receiver_flo_address" ||
                    !su_db_data.hasOwnProperty(tableStoreName)
                  )
                    continue;

                  try {
                    let obj = su_db_data[tableStoreName];
                    if (obj.length > 0) {
                      for (var prop in obj) {
                        if (!obj.hasOwnProperty(prop)) continue;
                        if(tableStoreName=="buyOrders" || tableStoreName=="sellOrders") {
                          if(timenow-obj[prop].timestamp>=lifetime.trade) {
                              db_sync_promises.push(_removeinDB(tableStoreName, obj[prop].id));
                              continue;
                          } else {
                              db_sync_promises.push(localbitcoinplusplus.actions
                              .delay(timenow-obj[prop].timestamp)
                              .then(()=>_removeinDB(tableStoreName, obj[prop].id)))
                          } 
                        }
                        
                        if(tableStoreName=="cash_deposits") {
                          if(timenow-obj[prop].timestamp>=lifetime.cashDeposit) {
                              db_sync_promises.push(_removeinDB(tableStoreName, obj[prop].id));
                              continue;
                          } else {
                              db_sync_promises.push(localbitcoinplusplus.actions
                              .delay(timenow-obj[prop].timestamp)
                              .then(()=>_removeinDB(tableStoreName, obj[prop].id)))
                          }
                        }

                        if(tableStoreName=="deposit") {
                          // if(timenow-obj[prop].timestamp>=lifetime.cryptoDeposit) {
                          //     db_sync_promises.push(_removeinDB(tableStoreName, obj[prop].id));
                          //     continue;
                          // } else {
                          //     db_sync_promises.push(localbitcoinplusplus.actions
                          //     .delay(timenow-obj[prop].timestamp)
                          //     .then(()=>_removeinDB(tableStoreName, obj[prop].id)))
                          // } 
                        }

                        if(tableStoreName=="withdraw_btc") {
                          if(timenow-obj[prop].timestamp>=lifetime.cryptoWithdraw) {
                              db_sync_promises.push(_removeinDB(tableStoreName, obj[prop].id));
                              continue;
                          } else {
                              db_sync_promises.push(localbitcoinplusplus.actions
                              .delay(timenow-obj[prop].timestamp)
                              .then(()=>_removeinDB(tableStoreName, obj[prop].id)))
                          } 
                        }

                        db_sync_promises.push(_updateinDB(
                          tableStoreName,
                          obj[prop],
                          obj[prop].id,
                          true,
                          false
                        ));
                        showMessage(
                          `INFO: "${tableStoreName}" datastore syncing is complete.`
                        );
                      }
                    }
                  } catch (error) {
                    console.log(error);
                  }
                }
              })();
                await Promise.all(db_sync_promises);

                const RM_RPC = new localbitcoinplusplus.rpc();                            
                // Inform users
                RM_RPC.send_rpc
                  .call(this, "supernode_message", {
                  trader_flo_address:
                      su_db_data.trader_flo_address,
                  server_msg: `Backup system is synced and ready to serve.`
                  })
                  .then(server_response => doSend(server_response));
            }
            break;

          case "do_you_have_latest_data_for_this_supernode":
            if (
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                res_obj.nodePubKey
              )
            ) {
              const response_object = res_obj.params[0];
              if (typeof response_object.trader_flo_address != "string")
                return;
              if (
                typeof response_object.allowed_receivers == "object" &&
                !response_object.allowed_receivers.includes(
                  localbitcoinplusplus.wallets.my_local_flo_address
                )
              )
                return;

              localbitcoinplusplus.kademlia
                .determineClosestSupernode(
                  res_obj.params[0].trader_flo_address
                )
                .then(async subject_floId_closest_su_list => {
                  const primarySupernodeOfThisUser = subject_floId_closest_su_list[0].data.id;

                  let _readAllDB = readAllDB;
                  if (
                    typeof primarySupernodeOfThisUser == "string" &&
                    primarySupernodeOfThisUser.length > 0 &&
                    typeof primarySupernodeOfThisUser !== "undefined" &&
                    primarySupernodeOfThisUser !==
                      localbitcoinplusplus.wallets.my_local_flo_address
                  ) {
                      
                    if (
                      typeof localbitcoinplusplus.newBackupDatabase.db[
                        primarySupernodeOfThisUser
                      ] == "object"
                    ) {
                      const foreign_db =
                        localbitcoinplusplus.newBackupDatabase.db[
                          primarySupernodeOfThisUser
                        ];
                      _readAllDB = foreign_db.backup_readAllDB.bind(
                        foreign_db
                      );
                    } else {
                      err_msg = `WARNING: Invalid Backup DB Instance Id: ${primarySupernodeOfThisUser}.`;
                      showMessage(err_msg);
                      throw new Error(err_msg);
                    }
                  }

                  // Inform (relevent) user nodes they should connect to another more eligible supenode
                  // Send only if you were the acting supernode for res_obj.globalParams.senderFloId

                  RM_RPC.send_rpc
                    .call(this, "reconnect_with_another_supernode", {
                      trader_flo_address:
                        res_obj.globalParams.senderFloId,
                      server_msg: `A new Supernode is live and synced. You will now be connected to ${res_obj.globalParams.senderFloId}.
                                  The process can take some time. You will be notified shortly once system is ready to serve.`
                    })
                    .then(server_response => doSend(server_response));

                  const tableArray = [
                    "deposit",
                    "cash_deposits",
                    "withdraw_cash",
                    "withdraw_btc",
                    "cash_balances",
                    "crypto_balances",
                    "buyOrders",
                    "sellOrders",
                    "system_btc_reserves_private_keys",
                    "supernode_private_key_chunks"
                  ];

                  let backup_database = "";
                  if (
                    primarySupernodeOfThisUser !==
                    localbitcoinplusplus.wallets.my_local_flo_address
                  ) {
                    backup_database = primarySupernodeOfThisUser;
                  }

                  const su_db_data_from_my_db = await localbitcoinplusplus.actions.get_sharable_db_data(
                    tableArray,
                    backup_database,
                    false
                  );

                  const dbHashData_from_my_db = await localbitcoinplusplus.actions.getDBTablesLatestHashAndTimestamp(
                    primarySupernodeOfThisUser,
                    su_db_data_from_my_db
                  );

                  // If you have same data as the sender has, you don't need to return any data to him
                  if (
                    dbHashData_from_my_db.DBHash ===
                    response_object.DBHash
                  )
                    return;
                  if (dbHashData_from_my_db.id !== response_object.id)
                    return;
                  if (
                    dbHashData_from_my_db.data_of !==
                    response_object.data_of
                  )
                    return;

                  let mismatched_fields = [];

                  for (var q in dbHashData_from_my_db) {
                    if (
                      dbHashData_from_my_db.hasOwnProperty(q) &&
                      q != "higestTimestampList" &&
                      q != "id" &&
                      q != "data_of" &&
                      q != "DBHash" &&
                      q != "trader_flo_address"
                    ) {
                      if (
                        dbHashData_from_my_db[q] !== response_object[q]
                      ) {
                        mismatched_fields.push(q);
                      }
                    }
                  }

                  console.log(mismatched_fields);

                  let latest_data = {};
                  let old_data = {};

                  for (var i = 0; i < mismatched_fields.length; i++) {
                    const mf = mismatched_fields[i];
                    latest_data[mf] = [];
                    old_data[mf] = [];
                    const res_data_obj = await _readAllDB(mf);
                    if(res_data_obj.length===0) {
                      old_data[mf].push(res_data_obj);
                      continue;
                    }
                    for (let j = 0; j < res_data_obj.length; j++) {
                      const odho = res_data_obj[j];
                      if (
                        typeof odho.timestamp == "number" &&
                        typeof response_object
                        .higestTimestampList[`${mf}_TIME`] !== "undefined"
                      ) {
                          if(odho.timestamp >=
                              Number(
                              response_object.higestTimestampList[
                                  `${mf}_TIME`
                              ] - 3600000
                          )) {
                              latest_data[mf].push(odho);    
                          } else {
                              old_data[mf].push(odho);
                          }
                      }  
                    }
                  }

                  console.log(latest_data);
                  console.log(old_data);

                  // Send the data back to sender
                  if (
                    primarySupernodeOfThisUser ==
                    res_obj.globalParams.senderFloId
                  ) {
                    latest_data.trader_flo_address = primarySupernodeOfThisUser;
                    latest_data.receiver_flo_address =
                      res_obj.globalParams.senderFloId;
                    RM_RPC.send_rpc
                      .call(
                        this,
                        "sync_primary_supernode_from_backup_supernode_response",
                        latest_data
                      )
                      .then(server_sync_response =>
                        doSend(server_sync_response)
                      );
                  } else {
                    latest_data.trader_flo_address = primarySupernodeOfThisUser;
                    latest_data.receiver_flo_address = res_obj.globalParams.senderFloId;
                    RM_RPC.send_rpc
                      .call(
                        this,
                        "sync_backup_supernode_from_backup_supernode_response",
                        latest_data
                      )
                      .then(server_sync_response =>
                        doSend(server_sync_response)
                      );
                  }

                  // Issue: Causes request loop
                  // let old_data_with_values = Object.values(old_data).filter(f=>f.length>0);
                  // if(Object.values(old_data_with_values).length) {
                  //     localbitcoinplusplus.actions.sync_backup_supernode_from_backup_supernode(
                  //         localbitcoinplusplus.wallets.my_local_flo_address,
                  //         res_obj.globalParams.senderFloId,
                  //         primarySupernodeOfThisUser
                  //     );
                  // }
                });
            }

            break;

          case "store_backup_system_btc_reserves_private_keys":
            if (
              typeof res_obj.params == "object" &&
              typeof res_obj.params[0] == "object" &&
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                res_obj.nodePubKey
              ) &&
              res_obj.globalParams.receiverFloId ==
                localbitcoinplusplus.wallets.my_local_flo_address
            ) {
              const resp_data = res_obj.params[0];

              try {
                const btc_pk_str = localbitcoinplusplus.encrypt.decryptMessage(
                  resp_data.data.secret,
                  resp_data.data.senderPublicKeyString
                );

                const btc_pk_obj = JSON.parse(btc_pk_str);

                const subject_user =
                  btc_pk_obj.trader_flo_address ||
                  resp_data.trader_flo_address;
                localbitcoinplusplus.kademlia
                  .determineClosestSupernode(subject_user)
                  .then(get_su => {
                    const supernode_flo_id = get_su[0].data.id;

                    if (typeof supernode_flo_id !== "string")
                      throw new Error(`ERROR: Invalid FLO key.`);

                    if (
                      supernode_flo_id ==
                      localbitcoinplusplus.wallets.my_local_flo_address
                    ) {
                      updateinDB(
                        "system_btc_reserves_private_keys",
                        btc_pk_obj,
                        btc_pk_obj.id,
                        false,
                        false
                      );
                    } else if (
                      typeof localbitcoinplusplus.newBackupDatabase.db[
                        supernode_flo_id
                      ] == "object"
                    ) {
                      localbitcoinplusplus.newBackupDatabase.db[
                        supernode_flo_id
                      ].backup_updateinDB(
                        "system_btc_reserves_private_keys",
                        btc_pk_obj,
                        btc_pk_obj.id,
                        false,
                        false
                      );
                    } else {
                      throw new Error(
                        `ERROR: Failed to store backup system_btc_reserves_private_keys id ${btc_pk_obj.id}`
                      );
                    }
                  });
              } catch (e) {
                throw new Error(e);
              }
            }
            break;

          case "update_deposited_crypto_instance":
            if (
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                res_obj.nodePubKey
              )
            ) {
              const res_data = res_obj.params[0];
              const backup_db = res_data.db_inst;
              let _updateinDB = updateinDB;
              try {
                if (
                  typeof backup_db == "string" &&
                  backup_db.length > 0
                ) {
                  if (
                    localbitcoinplusplus.wallets.my_local_flo_address !==
                      backup_db &&
                    typeof localbitcoinplusplus.newBackupDatabase.db[
                      backup_db
                    ] == "object"
                  ) {
                    const foreign_db =
                      localbitcoinplusplus.newBackupDatabase.db[
                        backup_db
                      ];
                    _updateinDB = foreign_db.backup_updateinDB.bind(
                      foreign_db
                    );
                  }

                  if (typeof res_data.deposit_data == "object") {
                      for (const deposits of res_data.deposit_data) {
                          _updateinDB(
                              "deposit",
                              deposits,
                              deposits.id,
                              true,
                              false
                          );                                
                      }
                  }
                }
              } catch (e) {
                console.error(e);
              }
            }
            break;

          case "delete_deposited_crypto_instance":
            if (
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                res_obj.nodePubKey
              )
            ) {
              const res_data = res_obj.params[0];
              const backup_db = res_data.db_inst;
              let _removeinDB = removeinDB;
              try {
                if (
                  typeof backup_db == "string" &&
                  backup_db.length > 0
                ) {
                  if (
                    localbitcoinplusplus.wallets.my_local_flo_address !==
                      backup_db &&
                    typeof localbitcoinplusplus.newBackupDatabase.db[
                      backup_db
                    ] == "object"
                  ) {
                    const foreign_db =
                      localbitcoinplusplus.newBackupDatabase.db[
                        backup_db
                      ];
                    _removeinDB = foreign_db.backup_removeinDB.bind(
                      foreign_db
                    );
                  }
                  if (typeof res_data.withdraw_btc_id == "string")
                    _removeinDB("withdraw_btc", res_data.withdraw_btc_id);
                  if(typeof res_data.deposit_id=="string")
                      _removeinDB("deposit", res_data.deposit_id);
                  if(typeof res_data.reserves_id=="string")
                      _removeinDB("system_btc_reserves_private_keys", 
                      res_data.reserves_id);
                }
              } catch (e) {
                console.error(e);
              }
            }
            break;

          case "request_me_db_data":
            if (
              localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                res_obj.nodePubKey
              )
            ) {
              const resp = res_obj.params[0];

              if (
                localbitcoinplusplus.wallets.my_local_flo_address !==
                resp.receiver_flo_address
              )
                return;

              localbitcoinplusplus.actions.sync_backup_supernode_from_backup_supernode(
                localbitcoinplusplus.wallets.my_local_flo_address,
                resp.trader_flo_address,
                resp.db_inst
              );
            }
            break;

          case "update_all_deposit_success":
              // If either Sender and Receiver are not Supernodes, return.
              if (!localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                  res_obj.nodePubKey) 
                  || 
                  !localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                  localbitcoinplusplus.wallets.my_local_flo_public_key) 
              ) return;

              if (typeof res_obj.params == "object" && typeof res_obj.params[0] == "object") {
                  const deposit_success_response = res_obj.params[0];
                  let update_cash_balance_obj_res = {
                      depositor_cash_data: deposit_success_response.depositor_cash_data,
                      deposit_req_id: deposit_success_response.deposit_req_id
                  }
                  let update_cash_balance_obj_res_str = JSON.stringify(update_cash_balance_obj_res);
                  let update_cash_balance_obj_res_hash = Crypto.SHA256(
                      update_cash_balance_obj_res_str);
                  let update_cash_balance_obj_res_verification = RM_WALLET
                      .verify(update_cash_balance_obj_res_hash, deposit_success_response.sign,
                      deposit_success_response.publicKey);

                  if ((update_cash_balance_obj_res_hash === deposit_success_response.hash) &&
                      update_cash_balance_obj_res_verification === true) {
                      
                      const my_closest_su_list = await localbitcoinplusplus.kademlia
                      .determineClosestSupernode(
                          res_obj.params[0].trader_flo_address
                      );
                      const primarySupernodeOfThisUser = my_closest_su_list[0].data.id;
                      const foreign_db =
                      localbitcoinplusplus.newBackupDatabase.db[primarySupernodeOfThisUser];

                      _removeinDB = foreign_db.backup_removeinDB.bind(foreign_db);
                      _updateinDB = foreign_db.backup_updateinDB.bind(foreign_db);
                      
                      _updateinDB('cash_balances', deposit_success_response.depositor_cash_data, 
                          deposit_success_response.depositor_cash_data.id, false, false);
                      _removeinDB('cash_deposits', deposit_success_response.deposit_req_id);

                      return true;
                  }
                  throw new Error(`Error: Hash matching failed while updating cash deposit.`);
                  return false;
              }
          break;

          case "record_upi_tx_of_successfull_withdraw":
              // If either Sender and Receiver are not Supernodes, return.
              if (!localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                  res_obj.nodePubKey) 
                  || 
                  !localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
                  localbitcoinplusplus.wallets.my_local_flo_public_key) 
              ) return;

              if (typeof res_obj.params == "object" && typeof res_obj.params[0] == "object") {
                  const successfull_withdraw_resp = res_obj.params[0];

                  localbitcoinplusplus.kademlia.determineClosestSupernode(
                          successfull_withdraw_resp.trader_flo_address
                  ).then(my_closest_su_list=>{
                      if(typeof my_closest_su_list[0]!=="object") return;
                      const primarySupernodeOfThisUser = my_closest_su_list[0].data.id;
                      const foreign_db =
                      localbitcoinplusplus.newBackupDatabase.db[primarySupernodeOfThisUser];

                      _updateinDB = foreign_db.backup_updateinDB.bind(foreign_db);
                      _removeinDB = foreign_db.backup_removeinDB.bind(foreign_db);

                      _updateinDB('withdraw_cash', successfull_withdraw_resp, 
                          successfull_withdraw_resp.id, true, false);

                      let withdraw_cash_life = JSON.parse(localbitcoinplusplus.master_configurations.ordersLife);
                      localbitcoinplusplus.actions.delay(withdraw_cash_life.cashWithdraw).then(function() {
                          _removeinDB('withdraw_cash', successfull_withdraw_resp.id);
                      })
                  });
              }

          break;
  
          default:
            break;
        }
      }
    } catch (e) {
      console.warn(e);
    }
  }
}

async function handleCashierMessages(evt) {
  var response = evt.data || evt;
  console.log("RESPONSE: " + response);

  const isMsgFromCashier = response.search("__FOR__CASHIER__");
  if (isMsgFromCashier < 0) return;

  var res_pos = response.indexOf("{");
  if (res_pos >= 0) {
    var res = response.substr(res_pos);
    try {
      var res_obj = JSON.parse(res);

      if (
        typeof res_obj.globalParams !== "object" ||
        !Object.keys(
          JSON.parse(localbitcoinplusplus.master_configurations.cashiers)
        ).includes(res_obj.nodePubKey) ||
        (typeof res_obj.globalParams.receiversList == "object" &&
          !res_obj.globalParams.receiversList.includes(
            localbitcoinplusplus.wallets.my_local_flo_address
          ))
      )
        return;

      if (
        typeof res_obj.globalParams.receiverFloId == "string" &&
        res_obj.globalParams.receiverFloId !==
          localbitcoinplusplus.wallets.my_local_flo_address
      )
        return;

      const isIncomingMessageValid = await validateIncomingMessage(res);
      console.log("isIncomingMessageValid: ", isIncomingMessageValid);

      if (!isIncomingMessageValid) return;

      if (typeof res_obj.globalParams.senderFloId !== "string")
        throw new Error(
          `WARNING: The request did not contain sender FLO Id. Request Aborted.`
        );

      if (typeof res_obj.method !== "undefined") {
        localbitcoinplusplus.CashierStatusObject[res_obj.nodePubKey].is_live=true;
        let response_from_sever;

        const RM_WALLET = new localbitcoinplusplus.wallets();
        const RM_RPC = new localbitcoinplusplus.rpc();

        switch (res_obj.method) {
          case "give_cashier_latest_pending_cash_deposits":
            response_from_sever = RM_RPC.receive_cashiers_rpc_response.call(
              this,
              JSON.stringify(res_obj)
            );
            break;
          case "give_cashier_latest_pending_cash_withdraws":
            response_from_sever = RM_RPC.receive_cashiers_rpc_response.call(
              this,
              JSON.stringify(res_obj)
            );
            break;
          case "cashier_confirms_user_cash_deposit":
            response_from_sever = RM_RPC.receive_cashiers_rpc_response.call(
              this,
              JSON.stringify(res_obj)
            );
            break;
          case "cashier_confirms_user_cash_withdraw":
            response_from_sever = RM_RPC.receive_cashiers_rpc_response.call(
              this,
              JSON.stringify(res_obj)
            );
            break;
          case "cashier_left":
              localbitcoinplusplus.CashierStatusObject[res_obj.nodePubKey].is_live=false; 
          break;  

          default:
            break;
        }
      }
    } catch (e) {
      throw new Error(e);
    }
  }
}

function onError(evt) {
  let msg = `ERROR: Websocket Connection to ${evt.srcElement.url} returned error.`;
  showMessage(msg);
  return msg;
}

function doSend(message, user_flo_id = "") {
  const request_array = [
    "send_back_shamirs_secret_supernode_pvtkey",
    "retrieve_shamirs_secret_supernode_pvtkey",
    "store_shamirs_secret_pvtkey_shares",
    "request_me_db_data"
  ];

  let finalMessage = message;

  const msgObj = JSON.parse(message);

  if (!request_array.includes(msgObj.method) ||  (
      typeof localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY ===
      "string"
    )) {
    const RM_WALLET = new localbitcoinplusplus.wallets();

    message = JSON.stringify(msgObj);
    const message256hash = Crypto.SHA256(message);

    if (
      typeof localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY !==
      "string"
    )
      throw new Error(`WARNING: Private key could not be found.`);

    const nodeSignedMessage = RM_WALLET.sign(
      message256hash,
      localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
    );

    msgObj.nodeMessage256hash = message256hash;
    msgObj.nodeSignedMessage = nodeSignedMessage;
    msgObj.nodePubKey =
      localbitcoinplusplus.wallets.my_local_flo_public_key;

    finalMessage = JSON.stringify(msgObj);
  } else {
      msgObj.nodePubKey =
      localbitcoinplusplus.wallets.my_local_flo_public_key;

      finalMessage = JSON.stringify(msgObj);
  }

  // The message is for a specific supernode only
  if (user_flo_id !== "" && user_flo_id.length > 0) {
    try {
      if (typeof localbitcoinplusplus.backupWS[user_flo_id] == "object") {
        wsConn = localbitcoinplusplus.backupWS[user_flo_id].ws_connection;
        if (wsConn.readyState !== 1) {
          let msg = "WARNING: Websocket not ready to broadcast messages.";
          showMessage(msg);
          console.warn(msg);
          return;
        }
        wsConn.send(finalMessage);
      } else if(user_flo_id===localbitcoinplusplus.wallets.my_local_flo_address) {
          websocket.send(finalMessage);    
      }
    } catch (error) {
      showMessage(
        `ERROR: Failed to determine WS connection with ${user_flo_id}.`
      );
      throw new Error(error);
    }
  } else {
    // The message is for usernodes and all backup supernodes
    try {
      websocket.send(finalMessage);

      for (const key in localbitcoinplusplus.backupWS) {
        if (localbitcoinplusplus.backupWS.hasOwnProperty(key)) {
          if (typeof localbitcoinplusplus.backupWS[key] == "object") {
            const ws_conn =
              localbitcoinplusplus.backupWS[key].ws_connection;
            if (ws_conn.readyState !== 1) {
              let msg =
                "WARNING: Websocket not ready to broadcast messages.";
              showMessage(msg);
              console.warn(msg);
            } else {
              ws_conn.send(finalMessage);
            }
          }
        }
      }
    } catch (error) {
      showMessage(
        `ERROR: Failed to determine WS connection with ${user_flo_id}.`
      );
      throw new Error(error);
    }
  }

  console.trace("SENT: " + finalMessage);
}

function validateIncomingMessage(message) {
  return new Promise((resolve, reject) => {
    if (message.length < 1) {
      showMessage(
        `WARNING: The incoming websocket message on was empty.`
      );
      reject(false);
    }
    const request_array = [
      "send_back_shamirs_secret_supernode_pvtkey",
      "retrieve_shamirs_secret_supernode_pvtkey",
      "store_shamirs_secret_pvtkey_shares",
      "request_me_db_data"
    ];

    try {
      const msgObj = JSON.parse(message);

      if (request_array.includes(msgObj.method)) return resolve(true);

      const getFloId = bitjs[localbitcoinplusplus.BASE_BLOCKCHAIN].pubkey2address(msgObj.nodePubKey);

      // Check if the public key belongs to real sender
      if (getFloId !== msgObj.globalParams.senderFloId) {
        showMessage(
          `Sender FLO address did not match signer FLO address.`
        );
        reject(false);
      }
      const initialMsgObj = {
        jsonrpc: msgObj.jsonrpc,
        id: msgObj.id,
        method: msgObj.method,
        params: msgObj.params,
        globalParams: msgObj.globalParams
      };

      const initialMsgObjStr = JSON.stringify(initialMsgObj);
      console.log(initialMsgObjStr);

      const initialMsgObjStrHash = Crypto.SHA256(initialMsgObjStr);
      console.log(initialMsgObjStrHash);

      const RM_WALLET = new localbitcoinplusplus.wallets();
      if (
        RM_WALLET.verify(
          initialMsgObjStrHash,
          msgObj.nodeSignedMessage,
          msgObj.nodePubKey
        )
      ) {
        resolve(true);
      } else {
        showMessage(
          `WARNING: Incoming Websocket message verification failed.`
        );
        reject(false);
      }
    } catch (error) {
      reject(error);
    }
  });
}

/* Websocket Code Ends Here*/
</script>

<!-- Indexed DB -->
<script>
//prefixes of implementation that we want to test
window.indexedDB =
  window.indexedDB ||
  window.mozIndexedDB ||
  window.webkitIndexedDB ||
  window.msIndexedDB;

//prefixes of window.IDB objects
window.IDBTransaction =
  window.IDBTransaction ||
  window.webkitIDBTransaction ||
  window.msIDBTransaction;
window.IDBKeyRange =
  window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;

if (!window.indexedDB) {
  window.alert(
    "Your browser doesn't support a stable version of IndexedDB."
  );
}

let localbitcoinplusplusObj = {
  id: "00-01",
  myLocalFLOAddress: "",
  myLocalFLOPublicKey: "",
  myAddressTrustLevel: 1,
  lastConnectedSupernode: "",
  lastConnectedTime: ""
};

var db;
const request = window.indexedDB.open(DBName, 2);

request.onerror = function(event) {
  //https://stackoverflow.com/questions/13972385/invalidstateerror-while-opening-indexeddb-in-firefox
  event.preventDefault();
  var error = event.target.error;
  console.log(
    "IndexedDB database open error:",
    error.name,
    error.message
  );
};

request.onsuccess = function(event) {
  db = request.result;
  doShreeGanesh();
  loadLocalDBData();
};

request.onupgradeneeded = function(event) {
  var db = event.target.result;
  if (!db.objectStoreNames.contains("localbitcoinUser")) {
    var objectStore = db.createObjectStore("localbitcoinUser", {
      keyPath: "id"
    });
    objectStore.createIndex("myLocalFLOAddress", "myLocalFLOAddress", {
      unique: false
    });
    objectStore.put(localbitcoinplusplusObj);
  }
  if (!db.objectStoreNames.contains("buyOrders")) {
    var objectStore = db.createObjectStore("buyOrders", {
      keyPath: "id"
    });
    objectStore.createIndex("trader_flo_address", "trader_flo_address", {
      unique: false
    });
  }
  if (!db.objectStoreNames.contains("sellOrders")) {
    var objectStore = db.createObjectStore("sellOrders", {
      keyPath: "id"
    });
    objectStore.createIndex("trader_flo_address", "trader_flo_address", {
      unique: false
    });
  }
  if (!db.objectStoreNames.contains("deposit")) {
    var objectStore = db.createObjectStore("deposit", {
      keyPath: "id"
    });
    objectStore.createIndex("trader_flo_address", "trader_flo_address", {
      unique: false
    });
    objectStore.createIndex("btc_address", "btc_address", {
      unique: false
    });
  }
  if (!db.objectStoreNames.contains("crypto_balances")) {
    var objectStore = db.createObjectStore("crypto_balances", {
      keyPath: "id",
      autoIncrement: false
    });
    objectStore.createIndex("trader_flo_address", "trader_flo_address", {
      unique: false
    });
    objectStore.createIndex("crypto_currency", "crypto_currency", {
      unique: false
    });
  }
  if (!db.objectStoreNames.contains("cash_balances")) {
    var objectStore = db.createObjectStore("cash_balances", {
      keyPath: "id",
      autoIncrement: false
    });
    objectStore.createIndex("trader_flo_address", "trader_flo_address", {
      unique: false
    });
    objectStore.createIndex("currency", "currency", {
      unique: false
    });
  }
  if (!db.objectStoreNames.contains("my_supernode_private_key_chunks")) {
    var objectStore = db.createObjectStore(
      "my_supernode_private_key_chunks",
      {
        keyPath: "id"
      }
    );
    objectStore.createIndex(
      "supernode_transaction_key",
      "supernode_transaction_key",
      {
        unique: false
      }
    );
  }
  if (!db.objectStoreNames.contains("supernode_private_key_chunks")) {
    var objectStore = db.createObjectStore(
      "supernode_private_key_chunks",
      {
        keyPath: "id"
      }
    );
  }
  if (!db.objectStoreNames.contains("system_btc_reserves_private_keys")) {
    var objectStore = db.createObjectStore(
      "system_btc_reserves_private_keys",
      {
        keyPath: "id"
      }
    );
    objectStore.createIndex("trader_flo_address", "trader_flo_address", {
      unique: false
    });
    objectStore.createIndex("btc_address", "btc_address", {
      unique: false
    });
    objectStore.createIndex(
      "supernode_transaction_key",
      "supernode_transaction_key",
      {
        unique: false
      }
    );
  }
  if (!db.objectStoreNames.contains("withdraw_btc")) {
    var objectStore = db.createObjectStore("withdraw_btc", {
      keyPath: "id"
    });
    objectStore.createIndex("trader_flo_address", "trader_flo_address", {
      unique: false
    });
    objectStore.createIndex("utxo_addr", "utxo_addr", {
      unique: false
    });
    objectStore.createIndex("receiverBTCAddress", "receiverBTCAddress", {
      unique: false
    });
  }
  if (!db.objectStoreNames.contains("userPublicData")) {
    var objectStore = db.createObjectStore("userPublicData", {
      keyPath: "trader_flo_address"
    });
    objectStore.createIndex("trader_flo_pubKey", "trader_flo_pubKey", {
      unique: true
    });
    objectStore.createIndex("trader_reputation", "trader_reputation", {
      unique: false
    });
  }
  if (!db.objectStoreNames.contains("external_files")) {
    var objectStore = db.createObjectStore("external_files", {
      keyPath: "filename"
    });
    objectStore.createIndex("filehash", "filehash", {
      unique: true
    });
  }
  if (!db.objectStoreNames.contains("kBucketStore")) {
    var objectStore = db.createObjectStore("kBucketStore", {
      keyPath: "id"
    });
    objectStore.createIndex(
      "primary_supernode_flo_public_key",
      "primary_supernode_flo_public_key",
      {
        unique: false
      }
    );
  }
  if (!db.objectStoreNames.contains("myClosestSupernodes")) {
    var objectStore = db.createObjectStore("myClosestSupernodes", {
      keyPath: "id"
    });
    objectStore.createIndex("trader_flo_address", "trader_flo_address", {
      unique: true
    });
    objectStore.createIndex("ip", "ip", {
      unique: false
    });
  }
  if (!db.objectStoreNames.contains("ipTable")) {
    var objectStore = db.createObjectStore("ipTable", {
      keyPath: "id"
    });
    objectStore.createIndex("flo_public_key", "flo_public_key", {
      unique: false
    });
    objectStore.createIndex("temporary_ip", "temporary_ip", {
      unique: false
    });
  }
  if (!db.objectStoreNames.contains("crypto_fiat_rates")) {
    var objectStore = db.createObjectStore("crypto_fiat_rates", {
      keyPath: "id"
    });
    objectStore.createIndex("currency_code", "currency_code", {
      unique: false
    });
    objectStore.createIndex("crypto_code", "crypto_code", {
      unique: false
    });
  }
  if (!db.objectStoreNames.contains("cash_deposits")) {
    var objectStore = db.createObjectStore("cash_deposits", {
      keyPath: "id"
    });
    objectStore.createIndex("trader_flo_address", "trader_flo_address", {
      unique: false
    });
    objectStore.createIndex("currency", "currency", {
      unique: false
    });
    objectStore.createIndex("depositing_amount", "depositing_amount", {
      unique: false
    });
    objectStore.createIndex("cashier_pubKey", "cashier_pubKey", {
      unique: false
    });
    objectStore.createIndex("cashier_upi", "cashier_upi", {
      unique: false
    });
  }
  if (!db.objectStoreNames.contains("withdraw_cash")) {
    var objectStore = db.createObjectStore("withdraw_cash", {
      keyPath: "id"
    });
    objectStore.createIndex("trader_flo_address", "trader_flo_address", {
      unique: false
    });
    objectStore.createIndex("currency", "currency", {
      unique: false
    });
    objectStore.createIndex("withdrawing_amount", "withdrawing_amount", {
      unique: false
    });
    objectStore.createIndex("cashier_pubKey", "cashier_pubKey", {
      unique: false
    });
    objectStore.createIndex("cashier_upi", "cashier_upi", {
      unique: false
    });
  }
};

const exception_datastores = ['localbitcoinUser', 'ipTable', 'kBucketStore', 'myClosestSupernodes',
                              'my_supernode_private_key_chunks'];

function signDBData(objectdata) {
    try {
        if(typeof localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY !=="string")
          throw new Error("Private key not found.");
        const RM_WALLET = new localbitcoinplusplus.wallets;
        const pubKey = RM_WALLET.generateFloKeys(localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY).pubKeyHex;  
        if(!localbitcoinplusplus.master_configurations.supernodesPubKeys
          .includes(pubKey)) return objectdata;
        
        let objectdata_copy = JSON.parse(JSON.stringify(objectdata));
        if(typeof objectdata_copy.db_sign=="string")  delete objectdata_copy.db_sign;
        if(typeof objectdata_copy.db_signer=="string") delete objectdata_copy.db_signer;
        objectdata_copy.db_sign = RM_WALLET.sign(JSON.stringify(objectdata_copy), localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY);
        objectdata_copy.db_signer = pubKey;
        return objectdata_copy;
    } catch (error) {
        throw new Error(error);
    }
}

function verifyDBData(objectdata) {
    try {
        if(!localbitcoinplusplus.master_configurations.supernodesPubKeys
          .includes(objectdata.db_signer)) return false;
        const RM_WALLET = new localbitcoinplusplus.wallets;    
        let objectdata_copy = JSON.parse(JSON.stringify(objectdata));
        delete objectdata_copy.db_sign;
        delete objectdata_copy.db_signer;
          if(RM_WALLET.verify(JSON.stringify(objectdata_copy), objectdata.db_sign, objectdata.db_signer)) {
              return true;         
          } else {
              console.error('verification failed');
              console.trace(objectdata);
              return false;
          }
    } catch(error) {
        throw new Error(error);
    } 
}

function exportToJson(idbDatabase, dataStores=[]) {
  return new Promise((resolve, reject) => {
      const exportObject = {}
      if (idbDatabase.objectStoreNames.length === 0) {
        resolve(JSON.stringify(exportObject))
      } else {
          const transaction = idbDatabase.transaction(
              idbDatabase.objectStoreNames,
              'readonly'
          )

      transaction.addEventListener('error', reject)

      for (const storeName of idbDatabase.objectStoreNames) {
          if(dataStores.length>0 && !dataStores.includes(storeName)) continue;
          const allObjects = []
          transaction
          .objectStore(storeName)
          .openCursor()
          .addEventListener('success', event => {
              const cursor = event.target.result
              if (cursor) {
                  // Cursor holds value, put it into store data
                  allObjects.push(cursor.value)
                  cursor.continue()
              } else {
                  // No more values, store is done
                  exportObject[storeName] = allObjects

                  // Last store was handled
                  if (
                      (idbDatabase.objectStoreNames.length ===
                      Object.keys(exportObject).length)
                      ||
                      (dataStores.length>0 
                      && Object.keys(exportObject).length===dataStores.length)
                  ) {
                      resolve(JSON.stringify(exportObject))
                  }
              }
          })
      }
      }
  })
  }

  function importFromJson(idbDatabase, json) {
      return new Promise((resolve, reject) => {
          const transaction = idbDatabase.transaction(
          idbDatabase.objectStoreNames,
          'readwrite'
          )
          transaction.addEventListener('error', reject)

          var importObject = JSON.parse(json)
          for (const storeName of idbDatabase.objectStoreNames) {
          let count = 0
          for (const toAdd of importObject[storeName]) {
              const request = transaction.objectStore(storeName).add(toAdd)
              request.addEventListener('success', () => {
              count++
              if (count === importObject[storeName].length) {
                  console.info(`Imported ${storeName} successfully.`);
                  // Added all objects for this store
                  delete importObject[storeName]
                  if (Object.keys(importObject).length === 0) {
                      // Added all object stores
                      resolve()
                  }
              }
              })
          }
          }
      })
  }

  function clearDatabase(idbDatabase, dataStores=[]) {
      return new Promise((resolve, reject) => {
          const transaction = idbDatabase.transaction(
              idbDatabase.objectStoreNames,
              'readwrite'
          )
          transaction.addEventListener('error', reject)

          let count = 0
          for (const storeName of idbDatabase.objectStoreNames) {
              if(dataStores.length>0 && !dataStores.includes(storeName)) continue;
              transaction
                  .objectStore(storeName)
                  .clear()
                  .addEventListener('success', () => {
                      console.info(`Cleared ${storeName} datastore.`);
                      count++
                      if (count === idbDatabase.objectStoreNames.length) {
                          // Cleared all object stores
                          resolve()
                      }
                  })
          }
      })
  }

function readDB(tablename, id, with_dbsigns = true) {
  return new Promise((resolve, reject) => {
    var transaction = db.transaction([tablename]);
    var objectStore = transaction.objectStore(tablename);
    var request = objectStore.get(id);

    request.onerror = function(event) {
      reject(event);
    };

    request.onsuccess = function(event) {
      if (request.result) {
          if(!exception_datastores.includes(tablename)) {
              if(!verifyDBData(request.result)) return resolve();
          }
          if (with_dbsigns == false) {
              let eachrecordcopy = JSON.parse(JSON.stringify(request.result));
              if(typeof eachrecordcopy.db_sign=="string" || typeof eachrecordcopy.db_signer=="string") {
                  delete eachrecordcopy.db_sign;
                  delete eachrecordcopy.db_signer;
              }
              resolve(eachrecordcopy);
          } else {
              resolve(request.result);
          }
      
      } else {
        resolve();
      }
    };
  });
}

function readDBbyIndex(
  tablename,
  index,
  indexValue,
  with_dbsigns = true
) {
  return new Promise((resolve, reject) => {
    var transaction = db.transaction([tablename]);
    var objectStore = transaction.objectStore(tablename);
    let response = [];
    objectStore.openCursor().onerror = function(event) {
      console.error("Error fetching data");
      reject(event);
    };
    objectStore.openCursor().onsuccess = function(event) {
      let cursor = event.target.result;
      if (cursor) {
        if (cursor.value[index] == indexValue) {
          if(!exception_datastores.includes(tablename)) {
              if(verifyDBData(cursor.value)) {
                  if (with_dbsigns == false) {
                      let eachrecordcopy = JSON.parse(JSON.stringify(cursor.value));
                      if(typeof eachrecordcopy.db_sign=="string" || typeof eachrecordcopy.db_signer=="string") {
                          delete eachrecordcopy.db_sign;
                          delete eachrecordcopy.db_signer;
                      }
                      response.push(eachrecordcopy); 
                  } else {
                      response.push(cursor.value);
                  }
              }
            } else {
              response.push(cursor.value);
            }
        }
        cursor.continue();
      } else {
        resolve(response);
      }
    };
  });
}

function readAllDB(tablename, with_dbsigns=true) {
  return new Promise((resolve, reject) => {
    let response = [];
    var objectStore = db.transaction(tablename).objectStore(tablename);
                 
      objectStore.openCursor().onsuccess = function(event) {
          let cursor = event.target.result;
          if (cursor) {
              if(!exception_datastores.includes(tablename)) {
                  if(verifyDBData(cursor.value)) {
                      if (with_dbsigns == false) {
                          let eachrecordcopy = JSON.parse(JSON.stringify(cursor.value));
                          if(typeof eachrecordcopy.db_sign=="string" || typeof eachrecordcopy.db_signer=="string") {
                              delete eachrecordcopy.db_sign;
                              delete eachrecordcopy.db_signer;
                          }
                          response.push(eachrecordcopy); 
                      } else {
                          response.push(cursor.value);
                      }
                  }
              } else {
                  response.push(cursor.value);
              }
              cursor.continue();
          } else {
              resolve(response);
          }
      };
    
  });
}

function addDB(tablename, dbObject) {
    return new Promise((resolve, reject) => {
      try {
          if (typeof dbObject.vectorClock == "undefined")
              dbObject.vectorClock = 0;
          if (typeof dbObject.timestamp == "undefined")
              dbObject.timestamp = +new Date();
          
          if(!exception_datastores.includes(tablename)) {
              dbObject = signDBData(dbObject); 
          }   
          
          let request = db.transaction([tablename], "readwrite")
                          .objectStore(tablename)
                          .add(dbObject);
          
          request.onsuccess = function (event) {
              console.trace("Data added in " + tablename);
              resolve(dbObject);
          };

          request.onerror = function (event) {
              reject(event);
          }
          
      } catch (error) {
          reject(error);
          return new Error(error);
      }
    });  


}

function updateinDB(
  tablename,
  Obj,
  key,
  updateByVectorClock = false,
  increaseVectorClock = true
) {
  return new Promise((resolve, reject) => {
     try {
          const originalObj = JSON.parse(JSON.stringify(Obj));
          if (typeof Obj.vectorClock == "undefined") {
              Obj.vectorClock = 0;
          } else if (increaseVectorClock === false) {
              // leave the vector clock field unchanged
          } else {
              Obj.vectorClock += 1;
              // If vectorClock is increased, also update timestamp
              //Obj.timestamp = +new Date();
          }
          if (typeof Obj.timestamp !== "number") {
              Obj.timestamp = +new Date();
          }
          var request = db.transaction([tablename], "readwrite")
                        .objectStore(tablename);
          if (updateByVectorClock === true) {
              if (typeof key == "undefined") {
                  key = Obj[request.keyPath];
              }
              let objectStoreRequest = request.get(key);
              objectStoreRequest.onsuccess = function (event) {
                  var myRecord = objectStoreRequest.result;
                  if (myRecord==null
                  || myRecord== undefined 
                  || typeof myRecord !== "object") {
                      Obj.vectorClock =
                          typeof Obj.vectorClock == "number" ? Obj.vectorClock : 0;
                      if(!exception_datastores.includes(tablename)) {
                          Obj = signDBData(Obj); 
                      }
                      request = db.transaction([tablename], "readwrite")
                      .objectStore(tablename).put(Obj);
                  } else if (myRecord.vectorClock < Obj.vectorClock) {
                      // First verify data here
                      if(!exception_datastores.includes(tablename)) {
                          if(verifyDBData(originalObj)===true) {
                              Obj = signDBData(Obj); 
                          } else {
                              console.trace(Obj);
                              throw new Error('Failed verification at db update');
                          }
                      }
                      request = db.transaction([tablename], "readwrite")
                          .objectStore(tablename).put(Obj);
                  } else if (myRecord.vectorClock == Obj.vectorClock) {
                      if(myRecord.timestamp < Obj.timestamp) {
                          if(!exception_datastores.includes(tablename)) {
                              if(verifyDBData(originalObj)===true) {
                                  Obj = signDBData(Obj); 
                              } else {
                                  console.trace(Obj);
                                  throw new Error('Failed verification at db update');
                              }
                          }
                          request = db.transaction([tablename], "readwrite")
                              .objectStore(tablename).put(Obj);
                      }
                  } else {
                      resolve(Obj);
                  }
                  
                  request.onsuccess = function() {
                      resolve(Obj);
                  }

                  request.onerror = function(e) {
                      reject(e);
                  }
              };
          } else {
              if(!exception_datastores.includes(tablename)) {
                  if(verifyDBData(originalObj)===true) {
                      Obj = signDBData(Obj); 
                  } else {
                      if(typeof localbitcoinplusplus.wallets.my_local_flo_public_key=="string"
                      && localbitcoinplusplus.master_configurations.supernodesPubKeys
                      .includes(localbitcoinplusplus.wallets.my_local_flo_public_key)) {
                          Obj = signDBData(Obj);
                      } else {
                          reject("Verification failed in backup update");
                      }
                  } 
              }
              request = db.transaction([tablename], "readwrite")
              .objectStore(tablename).put(Obj);
          }
          
          request.onsuccess = function() {
              resolve(Obj);
          }

          request.onerror = function(e) {
              reject(e);
          }
      } catch (error) {
          reject(error);
          return new Error(error);
      }
  });
}

function removeinDB(tablename, id) {
  return new Promise((resolve, reject) => {
      try {
          var request = db.transaction([tablename], "readwrite")
                      .objectStore(tablename)
                      .delete(id);

          request.onsuccess = function(event) {
              resolve(id);
          }
          
          request.onerror = function(event) {
              reject(event);
          }
          
      } catch (error) {
          reject(error);
          return new Error(error);
      }
  });
}

function removeByIndex(tablename, indexName, indexValue) {
  return new Promise((resolve, reject) => {
    var db_request = db
      .transaction([tablename], "readwrite")
      .objectStore(tablename);
    var index = db_request.index(indexName);
    var request = index.openCursor(IDBKeyRange.only(indexValue));
    request.onsuccess = function() {
      var cursor = request.result;
      if (cursor) {
        cursor.delete();
        cursor.continue();
      } else {
        resolve(true);
      }
    };
    request.onerror = function(e) {
      reject(e);
    };
  });
}

function removeAllinDB(tablename) {
  return new Promise((resolve, reject) => {
      try {
          var request = db.transaction([tablename], "readwrite");
          var objectStore = request.objectStore(tablename);
          var objectStoreRequest = objectStore.clear();
          objectStoreRequest.onsuccess = function(event) {
              console.info(
                  "All the data entry has been removed from your database " +
                  tablename
              );
              resolve(tablename);
          };
          objectStoreRequest.onerror = function(event) {
              reject(event);
          }
      } catch (error) {
          reject(event);
          return new Error(error);
      }
  });
}

async function formatIDB() {
      db.close();

      for(su in localbitcoinplusplus.newBackupDatabase.db) {
          localbitcoinplusplus.newBackupDatabase.db[su].db.close();
      }

      const dbs = await window.indexedDB.databases();
      dbs.forEach(db => { window.indexedDB.deleteDatabase(db.name) })
  }

</script>

<!-- Backup Indexed db Object -->
<script>
const newBackupDB = (localbitcoinplusplus.newBackupDatabase = function(
  DBName,
  version = 1
) {
  this.db = null;
  this.DBName = DBName;
  this.request = null;
  this.error = null;
  this.transaction = null;
  this.version = version;
});

newBackupDB.prototype = {
  createNewDB() {
    this.request = window.indexedDB.open(this.DBName, this.version);

    this.request.onerror = function(event) {
      //https://stackoverflow.com/questions/13972385/invalidstateerror-while-opening-indexeddb-in-firefox
      event.preventDefault();
      this.error = event.target.error;
      console.log(
        "IndexedDB database open error:",
        this.error.name,
        this.error.message
      );
    }.bind(this);

    this.request.onsuccess = function(event) {
      this.db = this.request.result;
    }.bind(this);

    this.request.onupgradeneeded = function(event) {
      this.db = event.target.result;
      if (!this.db.objectStoreNames.contains("localbitcoinUser")) {
        var objectStore = this.db.createObjectStore("localbitcoinUser", {
          keyPath: "id"
        });
        objectStore.createIndex(
          "myLocalFLOAddress",
          "myLocalFLOAddress",
          {
            unique: false
          }
        );
        objectStore.put(localbitcoinplusplusObj);
      }
      if (!this.db.objectStoreNames.contains("buyOrders")) {
        var objectStore = this.db.createObjectStore("buyOrders", {
          keyPath: "id"
        });
        objectStore.createIndex(
          "trader_flo_address",
          "trader_flo_address",
          {
            unique: false
          }
        );
      }
      if (!this.db.objectStoreNames.contains("sellOrders")) {
        var objectStore = this.db.createObjectStore("sellOrders", {
          keyPath: "id"
        });
        objectStore.createIndex(
          "trader_flo_address",
          "trader_flo_address",
          {
            unique: false
          }
        );
      }
      if (!this.db.objectStoreNames.contains("deposit")) {
        var objectStore = this.db.createObjectStore("deposit", {
          keyPath: "id"
        });
        objectStore.createIndex(
          "trader_flo_address",
          "trader_flo_address",
          {
            unique: false
          }
        );
        objectStore.createIndex("btc_address", "btc_address", {
          unique: false
        });
      }
      if (!this.db.objectStoreNames.contains("crypto_balances")) {
        var objectStore = this.db.createObjectStore("crypto_balances", {
          keyPath: "id",
          autoIncrement: false
        });
        objectStore.createIndex(
          "trader_flo_address",
          "trader_flo_address",
          {
            unique: false
          }
        );
        objectStore.createIndex("crypto_currency", "crypto_currency", {
          unique: false
        });
      }
      if (!this.db.objectStoreNames.contains("cash_balances")) {
        var objectStore = this.db.createObjectStore("cash_balances", {
          keyPath: "id",
          autoIncrement: false
        });
        objectStore.createIndex(
          "trader_flo_address",
          "trader_flo_address",
          {
            unique: false
          }
        );
        objectStore.createIndex("currency", "currency", {
          unique: false
        });
      }
      if (
        !this.db.objectStoreNames.contains(
          "my_supernode_private_key_chunks"
        )
      ) {
        var objectStore = this.db.createObjectStore(
          "my_supernode_private_key_chunks",
          {
            keyPath: "id"
          }
        );
        objectStore.createIndex(
          "supernode_transaction_key",
          "supernode_transaction_key",
          {
            unique: false
          }
        );
      }
      if (
        !this.db.objectStoreNames.contains("supernode_private_key_chunks")
      ) {
        var objectStore = this.db.createObjectStore(
          "supernode_private_key_chunks",
          {
            keyPath: "id"
          }
        );
      }
      if (
        !this.db.objectStoreNames.contains(
          "system_btc_reserves_private_keys"
        )
      ) {
        var objectStore = this.db.createObjectStore(
          "system_btc_reserves_private_keys",
          {
            keyPath: "id"
          }
        );
        objectStore.createIndex(
          "trader_flo_address",
          "trader_flo_address",
          {
            unique: false
          }
        );
        objectStore.createIndex("btc_address", "btc_address", {
          unique: false
        });
        objectStore.createIndex(
          "supernode_transaction_key",
          "supernode_transaction_key",
          {
            unique: false
          }
        );
      }
      if (!this.db.objectStoreNames.contains("withdraw_btc")) {
        var objectStore = this.db.createObjectStore("withdraw_btc", {
          keyPath: "id"
        });
        objectStore.createIndex(
          "trader_flo_address",
          "trader_flo_address",
          {
            unique: false
          }
        );
        objectStore.createIndex("utxo_addr", "utxo_addr", {
          unique: false
        });
        objectStore.createIndex(
          "receiverBTCAddress",
          "receiverBTCAddress",
          {
            unique: false
          }
        );
      }
      if (!this.db.objectStoreNames.contains("userPublicData")) {
        var objectStore = this.db.createObjectStore("userPublicData", {
          keyPath: "trader_flo_address"
        });
        objectStore.createIndex(
          "trader_flo_pubKey",
          "trader_flo_pubKey",
          {
            unique: true
          }
        );
        objectStore.createIndex(
          "trader_reputation",
          "trader_reputation",
          {
            unique: false
          }
        );
      }
      if (!this.db.objectStoreNames.contains("external_files")) {
        var objectStore = this.db.createObjectStore("external_files", {
          keyPath: "filename"
        });
        objectStore.createIndex("filehash", "filehash", {
          unique: true
        });
      }
      if (!this.db.objectStoreNames.contains("kBucketStore")) {
        var objectStore = this.db.createObjectStore("kBucketStore", {
          keyPath: "id"
        });
        objectStore.createIndex(
              "primary_supernode_flo_public_key",
              "primary_supernode_flo_public_key",
              {
              unique: false
              }
          );
      }
      if (!this.db.objectStoreNames.contains("ipTable")) {
        var objectStore = this.db.createObjectStore("ipTable", {
          keyPath: "id"
        });
        objectStore.createIndex("flo_public_key", "flo_public_key", {
          unique: false
        });
        objectStore.createIndex("temporary_ip", "temporary_ip", {
          unique: false
        });
      }
      if (!this.db.objectStoreNames.contains("myClosestSupernodes")) {
        var objectStore = this.db.createObjectStore(
          "myClosestSupernodes",
          {
            keyPath: "id"
          }
        );
        objectStore.createIndex(
          "trader_flo_address",
          "trader_flo_address",
          {
            unique: true
          }
        );
        objectStore.createIndex("ip", "ip", {
          unique: false
        });
      }
      if (!this.db.objectStoreNames.contains("crypto_fiat_rates")) {
        var objectStore = this.db.createObjectStore("crypto_fiat_rates", {
          keyPath: "id"
        });
        objectStore.createIndex("currency_code", "currency_code", {
          unique: false
        });
        objectStore.createIndex("crypto_code", "crypto_code", {
          unique: false
        });
      }
      if (!this.db.objectStoreNames.contains("cash_deposits")) {
        var objectStore = this.db.createObjectStore("cash_deposits", {
          keyPath: "id"
        });
        objectStore.createIndex(
          "trader_flo_address",
          "trader_flo_address",
          {
            unique: false
          }
        );
        objectStore.createIndex("currency", "currency", {
          unique: false
        });
        objectStore.createIndex(
          "depositing_amount",
          "depositing_amount",
          {
            unique: false
          }
        );
        objectStore.createIndex("cashier_pubKey", "cashier_pubKey", {
          unique: false
        });
        objectStore.createIndex("cashier_upi", "cashier_upi", {
          unique: false
        });
      }
      if (!this.db.objectStoreNames.contains("withdraw_cash")) {
        var objectStore = this.db.createObjectStore("withdraw_cash", {
          keyPath: "id"
        });
        objectStore.createIndex(
          "trader_flo_address",
          "trader_flo_address",
          {
            unique: false
          }
        );
        objectStore.createIndex("currency", "currency", {
          unique: false
        });
        objectStore.createIndex(
          "withdrawing_amount",
          "withdrawing_amount",
          {
            unique: false
          }
        );
        objectStore.createIndex("cashier_pubKey", "cashier_pubKey", {
          unique: false
        });
        objectStore.createIndex("cashier_upi", "cashier_upi", {
          unique: false
        });
      }
    }.bind(this);
  },

  backup_readDB(tablename, id, with_dbsigns = true) {
    return new Promise((resolve, reject) => {
      this.transaction = this.db.transaction([tablename]);
      var objectStore = this.transaction.objectStore(tablename);
      this.request = objectStore.get(id);
      let parent_request = this.request;

      this.request.onerror = function(event) {
        reject(event);
      };

      this.request.onsuccess = function(event) {
        if (parent_request.result) {
          if(!exception_datastores.includes(tablename)) {
              if(!verifyDBData(parent_request.result)) return resolve();
          }
          if (with_dbsigns == false) {
              let eachrecordcopy = JSON.parse(JSON.stringify(parent_request.result));
              if(typeof eachrecordcopy.db_sign=="string" || typeof eachrecordcopy.db_signer=="string") {
                  delete eachrecordcopy.db_sign;
                  delete eachrecordcopy.db_signer;
              }
              resolve(eachrecordcopy);
          } else {
              resolve(parent_request.result);
          }
        } else {
          resolve();
        }
      };
    });
  },

  backup_readDBbyIndex(
    tablename,
    index,
    indexValue,
    with_dbsigns = true
  ) {
    return new Promise((resolve, reject) => {
      this.transaction = this.db.transaction([tablename]);
      var objectStore = this.transaction.objectStore(tablename);
      let response = [];
      objectStore.openCursor().onerror = function(event) {
        console.error("Error fetching data");
        reject(event);
      };
      objectStore.openCursor().onsuccess = function(event) {
        let cursor = event.target.result;
        if (cursor) {
          if (cursor.value[index] == indexValue) {
            
              if(!exception_datastores.includes(tablename)) {
                  if(verifyDBData(cursor.value)) {
                      if (with_dbsigns == false) {
                          let eachrecordcopy = JSON.parse(JSON.stringify(cursor.value));
                          if(typeof eachrecordcopy.db_sign=="string" || typeof eachrecordcopy.db_signer=="string") {
                              delete eachrecordcopy.db_sign;
                              delete eachrecordcopy.db_signer;
                          }
                          response.push(eachrecordcopy); 
                      } else {
                          response.push(cursor.value);
                      }
                  }
              } else {
                  response.push(cursor.value);
              }
           
          }
          cursor.continue();
        } else {
          resolve(response);
        }
      };
    });
  },

  backup_readAllDB(tablename, with_dbsigns = true) {
    return new Promise((resolve, reject) => {
      let response = [];
      var objectStore = this.db
        .transaction(tablename)
        .objectStore(tablename);

      objectStore.openCursor().onsuccess = function(event) {
        let cursor = event.target.result;
        if (cursor) {
          if(!exception_datastores.includes(tablename)) {
              if(verifyDBData(cursor.value)) {
                  if (with_dbsigns == false) {
                      let eachrecordcopy = JSON.parse(JSON.stringify(cursor.value));
                      if(typeof eachrecordcopy.db_sign=="string" || typeof eachrecordcopy.db_signer=="string") {
                          delete eachrecordcopy.db_sign;
                          delete eachrecordcopy.db_signer;
                      }
                      response.push(eachrecordcopy); 
                  } else {
                      response.push(cursor.value);
                  }
              }
          } else {
              response.push(cursor.value);
          }

          cursor.continue();
        } else {
          resolve(response);
        }
      };  
    });
  },

  backup_addDB(tablename, dbObject) {
    return new Promise((resolve, reject) => {
      try {
          
          if (typeof dbObject.vectorClock == "undefined")
              dbObject.vectorClock = 0;
          
          if (typeof dbObject.timestamp == "undefined")
              dbObject.timestamp = +new Date();
          
          if(!exception_datastores.includes(tablename)) {
              dbObject = signDBData(dbObject); 
          } 

          this.request = this.db.transaction([tablename], "readwrite")
                                .objectStore(tablename)
                                .add(dbObject);
          
          this.request.onsuccess = function (event) {
              console.trace("Data added in " + tablename);
              resolve(dbObject);
          };

          this.request.onerror = function (event) {
              console.trace(event);
              reject(event);
          }
      } catch (error) {
          reject(error);
          return new Error(error);
      }
    });  
  },

  backup_updateinDB(
    tablename,
    Obj,
    key,
    updateByVectorClock = false,
    increaseVectorClock = true
  ) {
    return new Promise((resolve, reject) => {              
      try {
          const originalObj = JSON.parse(JSON.stringify(Obj));
          if (typeof Obj.vectorClock == "undefined") {
              Obj.vectorClock = 0;
          } else if (increaseVectorClock === false) {
          // leave the vector clock field unchanged
          } else {
              Obj.vectorClock += 1;
              // If vectorClock is increased, also update timestamp
              //Obj.timestamp = +new Date();
          }
          if (typeof Obj.timestamp !== "number") {
              Obj.timestamp = +new Date();
          }
          this.request = this.db.transaction([tablename], "readwrite")
          .objectStore(tablename);

          if (updateByVectorClock === true) {
              if (typeof key == "undefined") {
                  key = Obj[this.request.keyPath];
              }
              let objectStoreRequest = this.request.get(key);
              objectStoreRequest.onsuccess = function(event) {
                  var myRecord = objectStoreRequest.result;
                  if (myRecord==null
                  || myRecord== undefined 
                  || typeof myRecord !== "object") {
                      Obj.vectorClock =
                      typeof Obj.vectorClock == "number" ? Obj.vectorClock : 0;
                      if(!exception_datastores.includes(tablename)) {
                          Obj = signDBData(Obj); 
                      }
                      this.request = this.db.transaction([tablename], "readwrite")
                      .objectStore(tablename).put(Obj);
                  } else if (myRecord.vectorClock < Obj.vectorClock) {
                      // First verify data here
                      if(!exception_datastores.includes(tablename)) {
                          if(verifyDBData(originalObj)===true) {
                              Obj = signDBData(Obj); 
                          } else {
                              console.trace(Obj);
                              throw new Error('failed verification at backup update');
                          }
                      }
                      this.request = this.db.transaction([tablename], "readwrite")
                          .objectStore(tablename).put(Obj);
                      
                  } else if (myRecord.vectorClock == Obj.vectorClock) {
                      if(myRecord.timestamp < Obj.timestamp) {
                          if(!exception_datastores.includes(tablename)) {
                              if(verifyDBData(originalObj)===true) {
                                  Obj = signDBData(Obj); 
                              } else {
                                  console.trace(Obj);
                                  throw new Error('Failed verification at db update');
                              }
                          }
                          this.request = this.db.transaction([tablename], "readwrite")
                              .objectStore(tablename).put(Obj);
                      }
                  } else {
                      resolve(Obj);
                  }
                  this.request.onsuccess = function() {
                      resolve(Obj);
                  }

                  this.request.onerror = function(e) {
                      reject(e);
                  }
              }.bind(this);
          } else {
              if(!exception_datastores.includes(tablename)) {
                  if(verifyDBData(originalObj)===true) {
                      Obj = signDBData(Obj); 
                  } else {
                      if(typeof localbitcoinplusplus.wallets.my_local_flo_public_key=="string"
                      && localbitcoinplusplus.master_configurations.supernodesPubKeys
                      .includes(localbitcoinplusplus.wallets.my_local_flo_public_key)) {
                          Obj = signDBData(Obj);
                      } else {
                          reject("Verification failed in backup update");
                      }
                  }
              }
              this.request = this.db.transaction([tablename], "readwrite")
              .objectStore(tablename).put(Obj);
          }

          this.request.onsuccess = function() {
              resolve(Obj);
          }

          this.request.onerror = function(e) {
              reject(e);
          }
      } catch (error) {
          reject(error);
          return new Error(error);
      }
    });  
  },

  backup_removeinDB(tablename, id, remove_deletables=true) {
    return new Promise((resolve, reject) => {
      try {
          this.request = this.db.transaction([tablename], "readwrite");

          this.objectStore = this.request.objectStore(tablename);

          this.objectStoreRequest = this.objectStore.delete(id);

          this.objectStoreRequest.onsuccess = function(event) {
              resolve(id);
          }

          this.objectStoreRequest.onerror = function(event) {
              reject(event);
          }

      } catch (error) {
          reject(error);
          return new Error(error);
      }
    });  
  },

  backup_removeByIndex(tablename, indexName, indexValue) {
    return new Promise((resolve, reject) => {
      this.db_request = this.db
        .transaction([tablename], "readwrite")
        .objectStore(tablename);
      var index = this.db_request.index(indexName);
      let parent_request = this.db_request;
      this.request = index.openCursor(IDBKeyRange.only(indexValue));
      this.request.onsuccess = async function(event) {
        var cursor = event.target.result;
        if (cursor) {
          cursor.delete();
          cursor.continue();
        } else {
          resolve(true);
        }
      };
      this.request.onerror = function(e) {
        reject(e);
      };
    });
  },
  
  backup_removeAllinDB(tablename="") {
      return new Promise((resolve, reject) => {
          try {
              this.request = this.db.transaction([tablename], "readwrite");
              var objectStore = this.request.objectStore(tablename);
          
              var objectStoreRequest = objectStore.clear();
              objectStoreRequest.onsuccess = function(event) {
                  console.info(
                      "All the data entry has been removed from backup database " +
                      tablename
                  );
                  resolve(tablename);
              };
              objectStoreRequest.onerror = function(event) {
                  reject(event);
              }
          } catch (error) {
              reject(event);
              return new Error(error);
          }
      });  
  }
};
</script>

<!-- Backing up IDB -->
<script>
  localbitcoinplusplus.IdbBackup = {
      exportIDBtoFile: async function(idbs=[], dataStores=[]) {
          try {
              for (const idb of idbs) {
                  let backup = await exportToJson(idb, dataStores);
                  if(typeof backup=="string") backup = JSON.parse(backup);
                  if(typeof backup == "object") {
                      let filename = `${idb.name}__${helper_functions.unique_id()}`;
                      downloadObjectAsJson(backup, filename);
                  } 
              }
              return true;
          } catch (error) {
              console.error('Something went wrong during export:', error);   
          }
      },

      importFiletoIDB: function(idb, file_location) {
          try {
              readTextFile(file_location, async function(text){
                  var data = JSON.parse(text);
                  await clearDatabase(idb);
                  await importFromJson(idb, data);
                  console.log('Successfully cleared database and imported data')
              });
          } catch (error) {
              console.error('Could not clear & import database:', error)
          }
      }
  }
</script>

<!-- Initialization of objects -->
<script>
// Fetch configs from Master Key
const doShreeGanesh = () => {
  try {
    var rm_configs = localbitcoinplusplus.actions.fetch_configs(
      async function(...fetch_configs_res) {
        localbitcoinplusplus.is_ui_loaded = false;
        showMessage(`Connecting to Supernode server. Please wait...`);
        window.bitjs = []; // Launch bitjs
        localbitcoinplusplus.master_configurations.tradableAsset1.map(
          asset => bitjslib(asset)
        );
        kickInit();
      }
    );
  } catch (error) {
    showMessage(`WARNING: System failed to collect configurations. 
              Please refresh the page to try again.`);
    throw new Error(`Failed to fetch configurations: ${error}`);
  }
};
</script>

<script>
const loadLocalDBData = () => {
  // load local db
  showMessage(`Loading your local database.`);
  readDB("localbitcoinUser", "00-01").then(userInfo => {
    let my_flo_id =
      userInfo.myLocalFLOAddress.length > 0
        ? userInfo.myLocalFLOAddress
        : `No FLO Id found`;

    showMessage(`Your FLO Id: ${my_flo_id}`);
    const localbitcoinuserdiv = document.getElementById("localbitcoinuserdiv");
    localbitcoinuserdiv.innerHTML = `${my_flo_id}`;

    // showMessage ->updating your balances
    displayBalances(my_flo_id);
  });
};

const createScript = (id, content) => {
  let getScriptId = document.getElementById(id);
  if (getScriptId == null) {
    var oScript = document.createElement("script");
    oScript.id = id;
    var oScriptText = document.createTextNode(content);
    oScript.appendChild(oScriptText);
    document.body.appendChild(oScript);
  } else {
    getScriptId.innerText = content;
  }
};

const privateKeyBuilder = () => {
  return new Promise(async (resolve, reject) => {
    let supernode_transaction_key_arr = [];
    const chunks = await readAllDB("my_supernode_private_key_chunks");
    if (typeof chunks == "object" && chunks.length > 0) {
      const RM_RPC = new localbitcoinplusplus.rpc();
      let txKey = chunks.map(async (chunk, indexx) => {
        if (indexx == chunks.length - 1) {
          supernode_transaction_key_arr.push(
            chunk.supernode_transaction_key
          );
          return supernode_transaction_key_arr;
        }

        let retrieve_pvtkey_req = await RM_RPC;
        RM_RPC.send_rpc
          .call(this, "send_back_shamirs_secret_supernode_pvtkey", {
            chunk_val: chunk.id
          })
          .then(retrieve_pvtkey_req => doSend(retrieve_pvtkey_req));
      });

      txKey[chunks.length - 1].then(txk => {
        const TRANSACTION_KEY = (localbitcoinplusplus.wallets.supernode_transaction_key =
          txk[0]);
      });
    } else {
      const RM_WALLET = new localbitcoinplusplus.wallets();
      await RM_WALLET.manually_assign_my_private_key();
      if (
        typeof localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY ==
          "string" &&
        localbitcoinplusplus.is_ui_loaded == false
      ) {
        dataBaseUIOperations();
      }
    }
    resolve(true);
  });
};

// localbitcoinUser Database
const dataBaseUIOperations = async function() {
  const RM_WALLET = new localbitcoinplusplus.wallets();
  const RM_TRADE = new localbitcoinplusplus.trade();
  const RM_RPC = new localbitcoinplusplus.rpc();

  try {
      localbitcoinplusplus.is_ui_loaded = true;
    readDB("localbitcoinUser", "00-01").then(async function(idbData) {
      if(typeof localbitcoinplusplus.wallets.my_local_flo_address!=="string"
        && localbitcoinplusplus.wallets.my_local_flo_address.length<=0) {
          return false;
      }
      
      // Declare the user flo address
      const MY_LOCAL_FLO_ADDRESS = localbitcoinplusplus.wallets.my_local_flo_address;
      const MY_LOCAL_FLO_PUBLIC_KEY = localbitcoinplusplus.wallets.my_local_flo_public_key;

      // restore k-bucket
      if(typeof KBucket!=="object" || KBucket==null) {
          await localbitcoinplusplus.kademlia.launchKBucket(
              MY_LOCAL_FLO_ADDRESS
          );
      }
      const dbObj = await localbitcoinplusplus.kademlia.restoreKbucket(
        MY_LOCAL_FLO_ADDRESS,
        localbitcoinplusplus.BASE_BLOCKCHAIN,
        KBucket
      );

      // launch supernode kbucket
      if (
        localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
          MY_LOCAL_FLO_PUBLIC_KEY
        )
      ) {
        // Build Supernodes KBuckets
        launchSupernodesKBuckects = await localbitcoinplusplus.kademlia.launchSupernodesKBucket();
        reactor.dispatchEvent("remove_temp_data_from_db", localbitcoinplusplus.wallets.my_local_flo_address);
      }

      // Send your id to Supernode kbucket
      if (
        !localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
          MY_LOCAL_FLO_PUBLIC_KEY
        )
      ) {
        if (
          typeof localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS == "string"
        ) {
          idbData.lastConnectedTime = +new Date();
          idbData.lastConnectedSupernode = localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS;
          updateinDB("localbitcoinUser", idbData);
        } else {
          mss = `WARNING: Failed to update current supernode connected status in localbitcoinUser.`;
          showMessage(mss);
          throw new Error(mss);
        }
        let kbuck = localbitcoinplusplus.kademlia.floIdToKbucketId(
          localbitcoinplusplus.BASE_BLOCKCHAIN,
          MY_LOCAL_FLO_ADDRESS
        );
        readDB("kBucketStore", kbuck).then(async userKBData => {
          if (typeof userKBData == "undefined") {
            userKBData = await localbitcoinplusplus.kademlia.addNewUserNodeInKbucketAndDB(
              localbitcoinplusplus.BASE_BLOCKCHAIN,
              MY_LOCAL_FLO_ADDRESS,
              { id: MY_LOCAL_FLO_ADDRESS },
              (KB = KBucket)
            );
          }
          let addNewKNode = await localbitcoinplusplus.rpc.prototype.send_rpc.call(
            this,
            "addNewKbucketNode",
            {
              newKbucketNode: userKBData,
              trader_flo_address: MY_LOCAL_FLO_ADDRESS
            }
          );
          console.log(addNewKNode);

          doSend(addNewKNode);
        });
      
          localbitcoinplusplus.actions.sync_with_supernode(
              MY_LOCAL_FLO_ADDRESS
          );

          // Get live trading prices
          localbitcoinplusplus.actions.request_live_prices_from_server(); 

          // If connected with Backup Supernode, request it to sync data.
          const closestSuList = await readAllDB("myClosestSupernodes");

          const switchMyWS = new backupSupernodesWebSocketObject();
          const connectedWSServerFloId = await switchMyWS.getFloIdFromWSUrl(
              websocket.url
          );
          if (connectedWSServerFloId !== closestSuList[0].trader_flo_address) {

              const RM_RPC = new localbitcoinplusplus.rpc();
              let server_response = await RM_RPC.send_rpc.call(
                  this,
                  "nextBackupSupernodeToSyncDataBeforeActingAsBackupSupernodeNodeRequest",
                  {
                      trader_flo_address: MY_LOCAL_FLO_ADDRESS,
                      receiver_flo_address: connectedWSServerFloId
                  }
              );
              doSend(server_response);

              showMessage(`INFO: Backup Supernode is collecting information about you. This could take some time. 
                      You will be notified soon as soon as system is ready to serve you.`);
          }

      } 

      // Send request to others to link your flo id to your local ip
      linkMyLocalIPToMyFloId();

      readDB("userPublicData", MY_LOCAL_FLO_ADDRESS).then(function(
        pubic_data_response
      ) {
        if (typeof pubic_data_response !== "object") {
          RM_RPC.send_rpc
            .call(this, "add_user_public_data", {
              trader_flo_address: MY_LOCAL_FLO_ADDRESS,
              trader_flo_pubKey: MY_LOCAL_FLO_PUBLIC_KEY,
              trader_reputation: 0,
              timestamp: +new Date()
            })
            .then(add_user_public_data_req =>
              doSend(add_user_public_data_req)
            );
        }
      });

      // Check last connected supernode, if not primary then
      // update the user data from other su first
      //wsUri = await localbitcoinplusplus.kademlia.getSupernodeSeed(idbData.myLocalFLOAddress);

      // Show balances
      displayBalances(idbData.myLocalFLOAddress);

      /* Give user the facillity to trade */
      buildTradeUI(idbData);

      // Deposit Cryptos
      depositCrypto(idbData.myLocalFLOAddress);

      // Withdraw Crypto
      withdrawCrypto(idbData.myLocalFLOAddress);

      // Deposit / Withdraw Fiat
      depositWithdrawFiat(idbData.myLocalFLOAddress);

      // User's Trade Details
      displayTradeOrders(idbData.myLocalFLOAddress);

      // Send Tx UI
      buildBroadcastTxUI();

      if (
        localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
          MY_LOCAL_FLO_PUBLIC_KEY
        )
      ) {
        localbitcoinplusplus.master_configurations.tradableAsset1.forEach(
          function(asset1) {
            localbitcoinplusplus.master_configurations.tradableAsset2.forEach(
              async function(asset2) {
                await RM_TRADE.update_fiat_to_crypto_exchange_rate(
                  asset1,
                  asset2
                );
                await RM_TRADE.resolve_current_crypto_price_in_fiat(
                  asset1,
                  asset2
                );
              }
            );
          }
        );
      }
      
      showMessage(
          `Connection successfull. Welcome to Local Bitcoin Plus Plus P2P trading platform.`
      );
      hidePopup()
    });
  } catch (e) {
    showMessage(
      "ERROR: Failed to initialise the localbitcoinUser database. You are unable to trade at the moment."
    );
    throw new Error(
      "ERROR: Failed to initialise the localbitcoinUser database. You are unable to trade at the moment."
    );
  }
};

const displayTradeOrders = (flo_id, buyOrders, sellOrders) => {
  let myFloId =
    flo_id || localbitcoinplusplus.wallets.my_local_flo_address;
  if (typeof myFloId !== "string") return;
  let myBuyOrders =
    typeof buyOrders == "object"
      ? Promise.resolve(buyOrders)
      : readDBbyIndex("buyOrders", "trader_flo_address", myFloId);
  let mySellOrders =
    typeof sellOrders == "object"
      ? Promise.resolve(sellOrders)
      : readDBbyIndex("sellOrders", "trader_flo_address", myFloId);
  let my_trades_div = document.getElementById("orders_container");
  my_trades_div.innerHTML = '';
  const RM_TRADE = new localbitcoinplusplus.trade();
  let frag = document.createDocumentFragment();
  Promise.all([myBuyOrders, mySellOrders]).then(myOrders => {
    myOrders[0].concat(myOrders[1]).map(myOrdersData => {
      const trade_id = myOrdersData.id;
      const price = myOrdersData.buy_price || myOrdersData.sell_price;
      const currency = myOrdersData.currency;
      const order_type = myOrdersData.order_type;
      const product = myOrdersData.product;
      const RM_TRADE = new localbitcoinplusplus.trade();

      frag.append(render.order(trade_id, order_type, product, price, currency))
    });

          my_trades_div.append(frag);

      // Function for cancelling trade orders
      document.getElementById('orders_container').addEventListener('click', (e) => {
          let container = document.getElementById('orders_container');
          if(e.target.closest('.cancel-order'))
              askConfirmation('Are you sure to cancel this trade order?').then((result) => {
                  if(result){
                      let tradeId = e.target.closest('.cancel-order').id;
                      let trade_opts = tradeId.split("-");
                      RM_TRADE.cancelTrade(trade_opts[0], trade_opts[1], trade_opts[2]);  
                      e.target.closest('.order').remove();
                      showMessage('', `Order id: ${trade_opts[0]} cancelled.`)
                  }
              })
      })

  });
};
</script>

<!-- Balances Functions-->
<script>

const displayBalances = flo_id => {
  if (typeof flo_id !== "string") return;
  showMessage(`Loading your balances.`);
  const user_crypto_balances = readDBbyIndex(
    "crypto_balances",
    "trader_flo_address",
    flo_id
  );
  const user_fiat_balances = readDBbyIndex(
    "cash_balances",
    "trader_flo_address",
    flo_id
  );
  let t = ``;
  Promise.all([user_crypto_balances, user_fiat_balances]).then(
    balances => {
      let all_balances = balances[0].concat(balances[1]);
      if (all_balances.length == 0) {
        showMessage(`You don't have any balance. You can deposit crypto or fiat
              asset from DEPOSIT dection below.`);
      }

      for (const user_balance_data of all_balances) {
          let code = user_balance_data.crypto_currency || user_balance_data.currency;
          let value = user_balance_data.crypto_balance || user_balance_data.cash_balance;
          
          switch (code) {
              case "BTC":
                  document.getElementById('user_btc_bal').innerText = helper_functions.truncateDecimals(value);
                  break;

              case "BTC_TEST":
                  document.getElementById('user_btc_bal').innerText = helper_functions.truncateDecimals(value);
                  break;

              case "FLO":
                  document.getElementById('user_flo_bal').innerText = helper_functions.truncateDecimals(value);
                  break;

              case "FLO_TEST":
                  document.getElementById('user_flo_bal').innerText = helper_functions.truncateDecimals(value);
                  break;

              case "INR":
                  document.getElementById('user_cash_bal').innerText = 'â¹'+helper_functions.truncateDecimals(value,2);
                  break;
              
              case "USD":
                  document.getElementById('user_cash_bal').innerText = '$' +helper_functions.truncateDecimals(value,2);
                  break;

              default:
                  break;
          }            
      }
    }
  );
  showMessage(t);
};
</script>

<!-- Trade functions -->
<script>
const buildTradeUI = idbData => {
  if (typeof idbData !== "object") return;

  const RM_RPC = new localbitcoinplusplus.rpc();
  const RM_TRADE = new localbitcoinplusplus.trade();

  const selectListCryptoBuy = document.getElementById('selectListCryptoBuy');
  get_crypto_svg_selection_html('buy_assets_type', selectListCryptoBuy);

  const selectListCryptoSell = document.getElementById('selectListCryptoSell');
  get_crypto_svg_selection_html('sell_assets_type', selectListCryptoSell);

  const selectListFiatBuy = document.getElementById('selectListFiatBuy');
  get_fiat_svg_selection_html('select_fiat_buy', selectListFiatBuy);

  const selectListFiatSell = document.getElementById('selectListFiatSell');
  get_fiat_svg_selection_html('select_fiat_buy', selectListFiatSell);

  const selectTradingAmountBuy = document.getElementById('selectListTradingAmountBuy');
  get_trading_amount_html('trading_amount_buy', selectTradingAmountBuy);

  const selectTradingAmountSell = document.getElementById('selectListTradingAmountSell');
  get_trading_amount_html('trading_amount_buy', selectTradingAmountSell);
  
  const trade_buy_button = document.getElementById('trade_buy_button')
  const trade_sell_button = document.getElementById('trade_sell_button')
  
  trade_buy_button.onclick = function(event) {
    if (
      typeof localbitcoinplusplus.wallets.my_local_flo_address !== "string" ||
      localbitcoinplusplus.wallets.my_local_flo_address.trim() == ""
    ) {
      let err_msg = "You are not logged in. Failed to determine your id.";
      showMessage(err_msg);
      throw new Error(err_msg);
    }
    let parentPopup = this.closest('.popup'),
        selectedCrypto = parentPopup.querySelector("input[name='crypto']:checked").value,
        selectedCurrency = parentPopup.querySelector("input[name='currency']:checked").value,
        buyWorth = parentPopup.querySelector("input[name='trading_amount']:checked").value;

    RM_TRADE.place_order(
      "buy",
      localbitcoinplusplus.wallets.my_local_flo_address,
      selectedCrypto,
      selectedCurrency,
      parseFloat(buyWorth)
    ).then(buytrade => doSend(buytrade));
  };

  trade_sell_button.onclick = function(event) {
    if (
      typeof localbitcoinplusplus.wallets.my_local_flo_address == undefined ||
      localbitcoinplusplus.wallets.my_local_flo_address.trim() == ""
    ) {
      let err_msg =
        "You must have a FLO address to trade. No such address found in database.";
      showMessage(err_msg);
      throw new Error(err_msg);
    }
    let parentPopup = this.closest('.popup'),
        selectedCrypto = parentPopup.querySelector("input[name='crypto']:checked").value,
        selectedCurrency = parentPopup.querySelector("input[name='currency']:checked").value,
        sellWorth = parentPopup.querySelector("input[name='trading_amount']:checked").value;

    RM_TRADE.place_order(
      "sell",
      localbitcoinplusplus.wallets.my_local_flo_address,
      selectedCrypto,
      selectedCurrency,
      parseFloat(sellWorth)
    ).then(selltrade => doSend(selltrade));
  };
};
</script>

<!-- Deposit/Withdraw Crypto -->
<script>
const depositCrypto = function(userFLOaddress="") {

  const RM_TRADE = new localbitcoinplusplus.trade();
  const RM_RPC = new localbitcoinplusplus.rpc();
  let deposit_crypto_div = document.getElementById("deposit_crypto_div");
  get_crypto_svg_selection_html('deposit_assets_type', deposit_crypto_div);

  function cnf_crypto_deposit() {
    RM_RPC.send_rpc
      .call(this, "refresh_deposit_status_request", {
        receiver_flo_address:
          localbitcoinplusplus.MY_SUPERNODE_FLO_ADDRESS,
        trader_flo_address:
          localbitcoinplusplus.wallets.my_local_flo_address
      })
      .then(refresh_deposit_status => doSend(refresh_deposit_status));
  }
    document.getElementById('deposit_crypto_back_btn').addEventListener('click', () => {
      sendCryptoHiddenSection = document.getElementById('send_crypto_hidden_section');
      if(depositCryptoButtonClicked === 0) 
        hidePopup()
      else if(depositCryptoButtonClicked === 1){
          depositCryptoButtonClicked = 0;
          showElement('select_deposit_crypto_section', 'deposit-crypto-group');
          document.getElementById('server_deposit_crypto_addr').textContent = `Waiting for servers response...`
          depositCryptoButton.firstElementChild.textContent = 'proceed'
        }
      else if(depositCryptoButtonClicked === 2){
          depositCryptoButtonClicked = 1;
          showElement('confirm_deposit_btn_section', 'deposit-crypto-group');
          depositCryptoButton.firstElementChild.textContent = 'send from here'
          depositCryptoButton.firstElementChild.disabled = false;
          sendCryptoHiddenSection.querySelectorAll('input').forEach(input => {
              input.disabled = true;
          })
        }
    })
  depositCryptoButton.addEventListener('click', function() {
      depositCryptoButtonClicked++;
      let parentPopup = depositCryptoButton.closest('.popup'),
          sendCryptoHiddenSection = document.getElementById('send_crypto_hidden_section'),
          selectDepositCryptoSection = document.getElementById('select_deposit_crypto_section'),
          sendersFloId = parentPopup.querySelector("input[name='senderFloId']").value,
          sendersPrivKey = parentPopup.querySelector("input[name='senderPrivateKey']").value,
          asset_type = document.querySelector("input[name='crypto']:checked").value;            
          if(depositCryptoButtonClicked === 1) {
          document.getElementById('server_deposit_crypto_addr').textContent = `Waiting for servers response...`
          showElement('confirm_deposit_btn_section', 'deposit-crypto-group');
          //first time clicked
          depositCryptoButton.firstElementChild.textContent = 'Send from here'
          let parentPopup = this.closest('.popup'),  
              tradeAmountSelect = document.getElementById('trade_amount_select');
          let tradeAmount = helper_functions.truncateDecimals(tradeAmountSelect.value);
      
          let fiatCurrency = "INR";
          if (
              typeof userFLOaddress == "undefined" ||
              userFLOaddress.trim().length < 1
          ) {
              err_msg = "Invalid or empty user FLO address.";
              showMessage(err_msg);
              throw new Error(err_msg);
          }
          if (
              (typeof localbitcoinplusplus.master_configurations
              .tradableAsset1 !== "undefined" &&
              localbitcoinplusplus.master_configurations.tradableAsset1.includes(
                  asset_type
              ))
          ) {
                  
              RM_TRADE.depositAsset(
                  asset_type,
                  tradeAmount,
                  fiatCurrency,
                  userFLOaddress
              );
          
          } else {
              err_msg = "Error while depositing your address.";
              notify(err_msg);
              throw new Error(err_msg);
          }
      }
      else if(depositCryptoButtonClicked === 2){
        depositCryptoButton.firstElementChild.textContent = 'Deposit'
          sendCryptoHiddenSection.querySelectorAll('input').forEach(input => {
              input.disabled = false;
          })
          depositCryptoButton.firstElementChild.disabled = true;
          showElement(sendCryptoHiddenSection, 'deposit-crypto-group');
      }
       else if(depositCryptoButtonClicked === 3) {
          showElement(selectDepositCryptoSection, 'deposit-crypto-group');
          depositCryptoButtonClicked = 0;
          sendCryptoHiddenSection.querySelectorAll('input').forEach(input => {
              input.disabled = true;
          })
          hidePopup()
          setTimeout(() => {
              depositCryptoButton.firstElementChild.textContent = 'proceed'
          }, 400)
          //deposit crypto code from here
          const receiver_address = document.getElementById('server_deposit_crypto_addr').innerText;
          if(typeof receiver_address!=="string" || receiver_address.length<1) {
              notify('No receiver address found.')
              return false;
          }

          RM_TRADE.sendMultipleInputsTransaction(
              asset_type,
              [sendersPrivKey],
              receiver_address,
              0.01,
              sendersFloId,
              function(crypto_sent_resp) {
                  (async function validateDepositedCrypto() {
                      if (typeof crypto_sent_resp == "object") {
                          let msg = "";
                          if (
                              typeof crypto_sent_resp.txid == "string" &&
                              crypto_sent_resp.txid.length > 0
                          ) {
                              resp_obj = JSON.parse(crypto_sent_resp.txid);
                              resp_txid = resp_obj.txid.result || resp_obj.txid;
                              msg = `Transaction Id for your deposited crypto asset: ${resp_txid}.`;
                              
                              let txdata = '';
     
                              if(asset_type==='BTC') {
                                  txdata = await helper_functions
                                  .ajaxGet(`${localbitcoinplusplus.server.btc_mainnet}/api/tx/${resp_txid}`);
                              } else if(asset_type==='BTC_TEST') {
                                  txdata = await helper_functions
                                  .ajaxGet(`${localbitcoinplusplus.server.btc_testnet}/api/tx/${resp_txid}`);
                              } else if(asset_type==='FLO') {
                                  txdata = await helper_functions
                                  .ajaxGet(`${localbitcoinplusplus.server.flo_mainnet}/api/tx/${resp_txid}`);
                              } else if(asset_type==='FLO_TEST') {
                                  txdata = await helper_functions
                                  .ajaxGet(`${localbitcoinplusplus.server.flo_testnet}/api/tx/${resp_txid}`);
                              }
                              notify(`Waiting for deposit txid ${resp_txid} for at least 3 confirmations. 
                                  Please do not close or refresh the window until the process completes.`);
                                  
                              await delay(60000); 
                              if(typeof txdata.txid !=="string" 
                              || typeof txdata.confirmations !== "number"
                              || txdata.confirmations<3) {
                                  notify(`Waiting for deposit txid ${resp_txid} for at least 3 confirmations. 
                                  Please do not close or refresh the window until the process completes.`);
                                  validateDepositedCrypto();
                              } else {
                                  cnf_crypto_deposit();
                                  notify(`Deposit txid ${resp_txid} confirmed.`)
                              }
                          
                          }
                      }
                       
                  })()

              }
          );
      }
  });

  // NOTIFY DEPOSITED CRYPTO CONFIRMATION
  const refresh_crypto_status_btn = document.getElementById("cnf_crypto_deposit");
  refresh_crypto_status_btn.addEventListener("click", cnf_crypto_deposit);
};

const withdrawCrypto = function(userFLOaddress="") {
  const RM_TRADE = new localbitcoinplusplus.trade();
  const RM_RPC = new localbitcoinplusplus.rpc();

  let withdraw_crypto_div = document.getElementById("withdraw_crypto_div");
  let withdrawCryptoButton = document.getElementById("withdrawCryptoButton");
  let err_msg = "";

  get_crypto_svg_selection_html('withdraw_assets_type', withdraw_crypto_div);

  withdrawCryptoButton.addEventListener("click", function(params) {
    let parentPopup = this.closest('.popup');  
    let asset_type = document.querySelector("input[name='crypto']:checked").value;
    let receivinAddress = document.getElementById('withdraw_recving_addr').value
    let withdraw_amount_box= document.getElementById('crypto_withdraw_amount')
    if (receivinAddress == null || receivinAddress.trim() == "") {
      err_msg =`You must specify a valid ${asset_type} address to continue.`;
      notify(err_msg);
      throw new Error(err_msg);
    }

    let withdraw_amount = helper_functions.truncateDecimals(withdraw_amount_box.value);
    let fiatCurrency = "INR";

    if (
      typeof userFLOaddress == undefined ||
      userFLOaddress.trim().length < 1
    ) {
      err_msg = "Invalid or empty user FLO address.";
      notify(err_msg);
      throw new Error(err_msg);
    }

    if (
      typeof localbitcoinplusplus.master_configurations.tradableAsset1 !==
        "undefined" &&
      localbitcoinplusplus.master_configurations.tradableAsset1
        .includes(asset_type)
    ) {

      RM_TRADE.withdrawAsset(
        asset_type,
        withdraw_amount,
        receivinAddress,
        userFLOaddress,
        fiatCurrency
      );
    } else {
      err_msg = `Error: Withdraw of Crypto failed. Invalid asset type ${asset_type} provided.`;
      notify(err_msg);
      throw new Error(err_msg);
    }
  });

}

</script>

<!-- Deposit/Withdraw Cash -->
<script>
function depositWithdrawFiat(userFLOaddress="") {
  const RM_TRADE = new localbitcoinplusplus.trade();
  const RM_RPC = new localbitcoinplusplus.rpc();

  const depositCashButton = document.getElementById('depositCashButton')
  const withdrawCashButton = document.getElementById('withdrawCashButton')
  let user_deposited_cash = 0; // false  

  depositCashButton.addEventListener("click", function() {
      user_deposited_cash === 0 ? user_deposited_cash = 1: user_deposited_cash = 0;
      if(user_deposited_cash == 1){
          this.firstElementChild.textContent = 'done';
          let parentPopup = this.closest('.popup'),
          user_upi = parentPopup.querySelector("input[name='upiAddr']").value,
          tradeAmount = parentPopup.querySelector("input[name='amount']").value;
  
          if (typeof user_upi !== "string" || user_upi.length < 1) {
              err_msg = "Invalid or empty UPI id.";
              showMessage(err_msg);
              throw new Error(err_msg);
          }
          tradeAmount = Number(tradeAmount);
          let asset_type = "INR";
          let fiatCurrency = "INR";
          if (
              typeof userFLOaddress == undefined ||
              userFLOaddress.trim().length < 1
          ) {
              err_msg = "Invalid or empty user FLO address.";
              showMessage(err_msg);
              throw new Error(err_msg);
          }
          if (
              typeof localbitcoinplusplus.master_configurations.tradableAsset2 !==
              "undefined" &&
              localbitcoinplusplus.master_configurations.tradableAsset2.includes(
              asset_type
              )
          ) {
              RM_TRADE.depositCash(
              tradeAmount,
              fiatCurrency,
              userFLOaddress,
              user_upi
              );
          } else {
              err_msg = "Error:  Deposit of Cash failed.";
              showMessage(err_msg);
              throw new Error(err_msg);
          }
          
      } else {
          this.firstElementChild.textContent = 'deposit';
          hidePopup()
          return;
      }
    
  });

  // Withdraw Cash function
  withdrawCashButton.addEventListener("click", function(params) {
    let parentPopup = this.closest('.popup')
    let receivinAddress = parentPopup.querySelector("input[name='upiAddr']").value;
    if (receivinAddress == null || receivinAddress.trim == "") {
      err_msg = "You must specify your valid UPI Id to withdraw cash.";
      showMessage(err_msg);
      throw new Error(err_msg);
    }

    const asset_type = "INR";
    const tradeAmount = parseFloat(parentPopup.querySelector("input[name='amount']").value);
    const fiatCurrency = "INR";

    if (
      typeof userFLOaddress == undefined ||
      userFLOaddress.trim().length < 1
    ) {
      err_msg = "Invalid or empty user FLO address.";
      showMessage(err_msg);
      throw new Error(err_msg);
    }
    if (
      localbitcoinplusplus.master_configurations.tradableAsset2.includes(
        asset_type
      )
    ) {
      if (tradeAmount<=0) {
        err_msg = "Invalid Fiat Value.";
        showMessage(err_msg);
        throw new Error(err_msg);
      }
    }
    if (
      typeof localbitcoinplusplus.master_configurations.tradableAsset2 !==
        "undefined" &&
      localbitcoinplusplus.master_configurations.tradableAsset2
        .includes(asset_type)
    ) {
      btnLoading(this, 'start');             
      RM_TRADE.withdrawAsset(
        asset_type,
        tradeAmount,
        receivinAddress,
        userFLOaddress,
        fiatCurrency
      );
      
    } else {
      err_msg = "Error: Withdraw cash failed. Invalid currency specified.";
      showMessage(err_msg);
      throw new Error(err_msg);
    }
  });

}
</script>

<!-- Create SVG Radios  -->
<script>
  function get_crypto_svg_selection_html(radio_id='', parenthtml='') {
      if (
          typeof localbitcoinplusplus.master_configurations.tradableAsset1 !==
          "undefined"
      ) {
          let sendCryptoArray = JSON.parse(
              JSON.stringify(
              localbitcoinplusplus.master_configurations.tradableAsset1
              )
          );
          for (var i = 0; i < sendCryptoArray.length; i++) {
              let selectCryptoHtml = ``;
              selectCryptoHtml += `<label class="select-crypto">`;
              selectCryptoHtml += `<input name="crypto" value="${sendCryptoArray[i]}" 
                  type="radio" id="${radio_id}_${sendCryptoArray[i]}">`;
              if(sendCryptoArray[i]=="BTC" || sendCryptoArray[i]=="BTC_TEST") {
                  selectCryptoHtml += `<svg viewBox="0 0 30.61 40.52" class="icon btc">
                      <title>Bitcoin icon</title>
                      <path d="M30.53,16.29c0.64-4.26-2.61-6.55-7.04-8.07l1.44-5.77l-3.51-0.88l-1.4,5.62c-0.92-0.23-1.87-0.45-2.81-0.66
                      l1.41-5.65L15.11,0l-1.44,5.77c-0.76-0.17-1.51-0.35-2.24-0.53l0-0.02L6.59,4.01L5.66,7.76c0,0,2.61,0.6,2.55,0.63
                      c1.42,0.36,1.68,1.3,1.64,2.04l-1.64,6.57c0.1,0.02,0.23,0.06,0.36,0.12c-0.12-0.03-0.24-0.06-0.37-0.09l-2.3,9.2
                      c-0.17,0.43-0.61,1.08-1.61,0.83c0.04,0.05-2.55-0.64-2.55-0.64L0,30.45l4.57,1.14c0.85,0.21,1.68,0.44,2.5,0.65l-1.45,5.83
                      l3.51,0.88l1.44-5.77c0.96,0.26,1.89,0.5,2.8,0.73l-1.43,5.74l3.51,0.88l1.45-5.82c5.99,1.13,10.49,0.68,12.38-4.74
                      c1.53-4.36-0.08-6.88-3.23-8.52C28.34,20.92,30.07,19.41,30.53,16.29L30.53,16.29z M22.51,27.54c-1.08,4.36-8.43,2-10.81,1.41
                      l1.93-7.73C16.01,21.82,23.65,22.99,22.51,27.54L22.51,27.54z M23.6,16.23c-0.99,3.97-7.1,1.95-9.08,1.46l1.75-7.01
                      C18.25,11.17,24.63,12.09,23.6,16.23z"/>
                  </svg>`
              } else if(sendCryptoArray[i]=="FLO" || sendCryptoArray[i]=="FLO_TEST") {
                  selectCryptoHtml += `<svg class="icon flo" viewBox="0 0 45.6 47.07">
                      <title>FLO coin icon</title>
                      <path d="M61.4,58.86A12.31,12.31,0,0,0,68.81,55a15.45,15.45,0,0,0,4-8.52c-11-.63-12.36,1-13.71,1.68-1.19.61-5.33,4.56-5.33,
                          4.56s3.07-3.14,3.2-9.94a19.94,19.94,0,0,0-2.72-10.65A23.86,23.86,0,0,0,50,26.46a24.09,24.09,0,0,0-4.23,5.67A19.94,19.94,0,0,0,43,42.78c.13,6.8,3.2,9.94,
                          3.2,9.94s-4.14-3.95-5.33-4.56c-1.35-.69-2.67-2.31-13.71-1.68a15.45,15.45,0,0,0,4,8.52,12.31,12.31,0,0,0,7.41,3.86s-5.05-2-7.15-9.45c0,0,5.76-.69,9.63,1.87,
                          2.53,1.67,4.86,4.26,6.79,6a17.72,17.72,0,0,0-6.81,1.88,7.85,7.85,0,0,0-4.44,4.38,5.65,5.65,0,0,0-.19,2.27,33.8,33.8,0,0,0,5.94,0,5.87,5.87,0,0,0,3.42-2.16,
                          12.72,12.72,0,0,1-3.95.77c-2.06,0-2.67-.66-2.67-.66,1-3.64,8.68-5.19,8.68-5.19a16.13,16.13,0,0,0-1.42,6.5A12.76,12.76,0,0,0,50,73.53a12.76,12.76,0,0,0,
                          3.57-8.45,16.13,16.13,0,0,0-1.42-6.5s7.71,1.55,8.68,5.19c0,0-.61.66-2.67.66a12.72,12.72,0,0,1-3.95-.77,5.87,5.87,0,0,0,3.42,2.16,33.8,33.8,0,0,0,5.94,0,
                          5.65,5.65,0,0,0-.19-2.27,7.85,7.85,0,0,0-4.44-4.38,17.72,17.72,0,0,0-6.81-1.88c1.93-1.75,4.26-4.34,6.79-6,3.87-2.56,9.63-1.87,9.63-1.87C66.45,56.84,61.4,
                          58.86,61.4,58.86ZM50,69.52a6.1,6.1,0,0,1-1.47-4.26A10.74,10.74,0,0,1,50,60.12a10.74,10.74,0,0,1,1.47,5.14A6.1,6.1,0,0,1,50,69.52Zm0-15.23a17.26,17.26,0,0,
                          1-4.35-11c0-9,4.35-11.84,4.35-11.84s4.35,2.84,4.35,11.84A17.26,17.26,0,0,1,50,54.29Z" transform="translate(-27.2 -26.46)"/>
                      </svg>`;
              }
              selectCryptoHtml += `<h4>${sendCryptoArray[i]}</h4>`;
              selectCryptoHtml += `<svg class="selected" viewBox="0 0 73 73">
                          <circle cx="36.5" cy="36.5" r="36"/>
                          <polyline points="18.23,37.39 29.73,48.9 54.77,25.21 "/>
                      </svg>`;
              selectCryptoHtml += `</label>`;
              parenthtml.insertAdjacentHTML('beforeend', selectCryptoHtml)
          }
      }
  }

  function get_fiat_svg_selection_html(radio_id='', parenthtml='') {
      for (const currency of localbitcoinplusplus.master_configurations.tradableAsset2) {
          let selectFiatHtml = ``;
          selectFiatHtml += `<label class="select-crypto">`;
          selectFiatHtml += `<input name="currency" value="${currency}" type="radio">`;
          if(currency=="INR") {
              selectFiatHtml += `<svg class="icon inr" viewBox="0 0 36.74 40">
                        <title>Indian rupee icon</title>
                        <path d="M62.31,35.47H56.57a11.38,11.38,0,0,1,1.64,4.58h5.53l-1.46,5.42H58.19A10.79,10.79,0,0,1,54.92,52a15.38,15.38,0,0,1-7.58,3.38l12,14.24V70H50.25L37,
                          54.42l0-4.86h6.51c3.39,0,5.52-1.37,6.38-4.09H36.26l1.43-5.42h12q-1.34-3.31-5.9-3.38H36.26L37.88,30H63.74Z" transform="translate(-27 -30)"/>
                      </svg>`;
          } else if(currency=="USD") {
              selectFiatHtml += `<svg class="icon" viewBox="0 0 22.59 40">
                    <title>United states dollar icon</title>
                    <path d="M59.07,63.23a10.5,10.5,0,0,1-6.09,3c-.16.06-.23.15-.23.27l0,3a.56.56,0,0,1-.15.39.53.53,0,0,1-.39.16H47.7a.49.49,0,0,1-.38-.16.53.53,0,0,1-.16-.39l0-3c0-.12-.07-.21-.22-.27A10.82,10.82,0,0,1,40.91,63a8.62,8.62,0,0,1-2.21-6V56a.55.55,0,0,1,.55-.54h4.91a.53.53,0,0,1,.39.16.52.52,0,0,1,.15.38v.69a3.74,3.74,0,0,0,1.6,3.06A6.83,6.83,0,0,0,50.66,61a5,5,0,0,0,3.43-1,3.29,3.29,0,0,0,1.11-2.52,2.6,2.6,0,0,0-.68-1.84,5.9,5.9,0,0,0-1.88-1.32c-.81-.38-2.07-.9-3.8-1.57a34.27,34.27,0,0,1-5-2.14,10.15,10.15,0,0,1-3.39-3,7.69,7.69,0,0,1-1.39-4.66,8.24,8.24,0,0,1,2.12-5.8,10,10,0,0,1,5.7-3c.15-.07.23-.16.23-.28l-.09-3.31a.5.5,0,0,1,.16-.39.49.49,0,0,1,.38-.16h4.55a.49.49,0,0,1,.38.16.5.5,0,0,1,.16.39l0,3.4a.3.3,0,0,0,.23.28,10.56,10.56,0,0,1,6,3.29,9,9,0,0,1,2.22,6.16v.68a.51.51,0,0,1-.16.39.49.49,0,0,1-.38.16h-5a.49.49,0,0,1-.38-.16.51.51,0,0,1-.16-.39V44a4.2,4.2,0,0,0-1.5-3.25,5.94,5.94,0,0,0-4.09-1.34,4.92,4.92,0,0,0-3.18.91,3,3,0,0,0-1.14,2.5,2.84,2.84,0,0,0,.66,1.91,6.15,6.15,0,0,0,2,1.41c.87.42,2.24,1,4.09,1.63a46,46,0,0,1,4.81,2,9.46,9.46,0,0,1,3.19,2.72,7.46,7.46,0,0,1,1.41,4.69A8.44,8.44,0,0,1,59.07,63.23Z" transform="translate(-38.7 -30)"/></svg>
                  `;
          }
          selectFiatHtml += `<h4>${currency}</h4>`;
          selectFiatHtml += `<svg class="selected" viewBox="0 0 73 73">
                      <circle cx="36.5" cy="36.5" r="36"/>
                      <polyline points="18.23,37.39 29.73,48.9 54.77,25.21 "/>
                  </svg>`;
          selectFiatHtml += `</label>`;
          parenthtml.insertAdjacentHTML('beforeend', selectFiatHtml);
      }    
  }

  function get_trading_amount_html(radio_id='', parenthtml='') {
      for (const amount of localbitcoinplusplus.master_configurations.validTradingAmount) {
          let selectTradingAmountHtml = ``;
          selectTradingAmountHtml += `<label class="select-crypto">`;
          selectTradingAmountHtml += `<input name="trading_amount" value="${amount}" type="radio">`;
          selectTradingAmountHtml += `<h2>${amount}</h2>`;
          selectTradingAmountHtml += `<svg class="selected" viewBox="0 0 73 73">
                      <circle cx="36.5" cy="36.5" r="36"/>
                      <polyline points="18.23,37.39 29.73,48.9 54.77,25.21 "/>
                  </svg>`;
          selectTradingAmountHtml += `</label>`;
          parenthtml.insertAdjacentHTML('beforeend', selectTradingAmountHtml);
      }    
  }

</script>

<!-- Broadcast Tx UI -->
<script>

function buildBroadcastTxUI() {
  const broadcast_tx_ui = document.getElementById("send_crypto_select_div");
  get_crypto_svg_selection_html('broadcastTx', broadcast_tx_ui);
}
</script>

<script>
//Function to check current balance of a BTC address
function validateDepositedBTCBalance(trader_deposits, backup_db = "") {
  if (
    !localbitcoinplusplus.master_configurations.supernodesPubKeys.includes(
      localbitcoinplusplus.wallets.my_local_flo_public_key
    ) &&
    typeof localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY !==
      "string"
  )
    return false;
  if (
    !localbitcoinplusplus.master_configurations.tradableAsset1.includes(
      trader_deposits.product
    )
  )
    return false;
  let _readDB = readDB;
  let _readDBbyIndex = readDBbyIndex;
  let _updateinDB = updateinDB;
  if (typeof backup_db == "string" && backup_db.length > 0) {
    if (
      typeof localbitcoinplusplus.newBackupDatabase.db[backup_db] ==
      "object"
    ) {
      const foreign_db =
        localbitcoinplusplus.newBackupDatabase.db[backup_db];
      _readDB = foreign_db.backup_readDB.bind(foreign_db);
      _readDBbyIndex = foreign_db.backup_readDBbyIndex.bind(foreign_db);
      _updateinDB = foreign_db.backup_updateinDB.bind(foreign_db);
    } else {
      err_msg = `WARNING: Invalid Backup DB Instance Id: ${backup_db}.`;
      showMessage(err_msg);
      throw new Error(err_msg);
    }
  }

  let explorer;
  let decimal = 100000000;
  let crypto_diff = localbitcoinplusplus.master_configurations.btcTradeMargin;
  switch (trader_deposits.product) {
    case "BTC":
      explorer = localbitcoinplusplus.server.btc_mainnet;
      break;
    case "BTC_TEST":
      explorer = localbitcoinplusplus.server.btc_testnet;
      break;
    case "FLO":
      explorer = localbitcoinplusplus.server.flo_mainnet;
      decimal = 1;
      crypto_diff = helper_functions.truncateDecimals(localbitcoinplusplus.master_configurations.btcTradeMargin/decimal);
      break;
    case "FLO_TEST":
      explorer = localbitcoinplusplus.server.flo_testnet;
      decimal = 1;
      crypto_diff = helper_functions.truncateDecimals(localbitcoinplusplus.master_configurations.btcTradeMargin/decimal);
      break;
    default:
      break;
  }
  try {
    let url = `${explorer}/api/addr/${trader_deposits.btc_address}/balance`;
    console.log(url);
    helper_functions.ajaxGet(url).then(async balance => {
      if (!isNaN(balance) && parseFloat(balance) > 0) {
        balance = helper_functions.truncateDecimals(balance / decimal);
        console.log(balance);

        /************************ Case of dispute *****************/
        if (
          trader_deposits.bitcoinToBePaid - balance > crypto_diff
        ) {
          console.log(
            trader_deposits.bitcoinToBePaid,
            balance,
            crypto_diff
          );
          let more_depositing_crypto_amount = helper_functions.truncateDecimals(trader_deposits.bitcoinToBePaid) - helper_functions.truncateDecimals(balance);
          
          err_msg = `Incomplete Crypto Deposit Error: You claimed to send ${trader_deposits.bitcoinToBePaid} ${trader_deposits.product} but
          deposited only ${balance} ${trader_deposits.product}. Please send more ${more_depositing_crypto_amount} ${trader_deposits.product}
          to ${trader_deposits.btc_address}`;

          err_response = {
              user_flo_addr: trader_deposits.trader_flo_address,
              msg: err_msg
          }
          reactor.dispatchEvent('message_for_user', err_response);
          console.warn("User sent less cryptos");
          return false;
        
        } else {
          //Deposit successful. Update user balance and status to 2. Its Private key can be
          // now given to a random trader
          trader_deposits.status = 2;
          const trader_deposit_updated = await _updateinDB(
            "deposit",
            trader_deposits,
            trader_deposits.trader_flo_address
          );

          let trader_depositor_cash_id = `${trader_deposits.trader_flo_address}_${trader_deposits.product}`;
          let updatedCryptobalances = {
            id: trader_depositor_cash_id,
            trader_flo_address: trader_deposits.trader_flo_address,
            crypto_balance: balance,
            crypto_currency: trader_deposits.product
          };
          _readDB("crypto_balances", trader_depositor_cash_id).then(
            function(res_btc_balances) {
              if (
                typeof res_btc_balances == "object" &&
                typeof res_btc_balances.crypto_balance == "number"
              ) {
                updatedCryptobalances = null;  
                updatedCryptobalances = JSON.parse(JSON.stringify(res_btc_balances));  
                updatedCryptobalances.crypto_balance = 
                  helper_functions.truncateDecimals(res_btc_balances.crypto_balance) 
                  + helper_functions.truncateDecimals(balance)
              }
              // Update crypto balance of user in crypto_balances
              _updateinDB(
                "crypto_balances",
                updatedCryptobalances,
                trader_deposits.btc_address
              ).then(updatedBTCBalanceObject => {
                const RM_WALLET = new localbitcoinplusplus.wallets();
                const RM_RPC = new localbitcoinplusplus.rpc();

                const updatedBTCBalanceObjectString = JSON.stringify(
                  updatedBTCBalanceObject
                );
                const updatedBTCBalanceObjectStringHash = Crypto.SHA256(
                  updatedBTCBalanceObjectString
                );

                const updatedBTCBalanceObjectSign = RM_WALLET.sign(
                  updatedBTCBalanceObjectStringHash,
                  localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
                );

                const updateUserCryptoBalanceObject = {
                  updatedBTCBalanceObject: updatedBTCBalanceObject,
                  updatedBTCBalanceObjectSign: updatedBTCBalanceObjectSign,
                  trader_flo_address: trader_deposits.trader_flo_address,
                  receiver_flo_address: trader_deposits.trader_flo_address
                };

                RM_RPC.send_rpc(
                  "updateUserCryptoBalanceRequest",
                  updateUserCryptoBalanceObject
                ).then(updateUserCryptoBalanceRequestObject =>
                  doSend(updateUserCryptoBalanceRequestObject)
                );

                const traderDepositsObjectString = JSON.stringify(
                  trader_deposit_updated
                );
                const traderDepositsObjectStringHash = Crypto.SHA256(
                  traderDepositsObjectString
                );

                const traderDepositsObjectSign = RM_WALLET.sign(
                  traderDepositsObjectStringHash,
                  localbitcoinplusplus.wallets.MY_SUPERNODE_PRIVATE_KEY
                );

                const updatedDepositObject = {
                  updatedTraderDepositObject: trader_deposit_updated,
                  updatedDepositsObjectSign: traderDepositsObjectSign,
                  trader_flo_address: trader_deposit_updated.trader_flo_address,
                  receiver_flo_address: trader_deposit_updated.trader_flo_address
                };

                RM_RPC.send_rpc(
                  "updateUsertraderDepositsRequest",
                  updatedDepositObject
                ).then(updateUsertraderDepositsRequestObject =>
                  doSend(updateUsertraderDepositsRequestObject)
                );

              });
            }
          );
        }
      }
    });
  } catch (error) {
    console.error(error);
    return false;
  }
}

function linkMyLocalIPToMyFloId() {
  const RM_RPC = new localbitcoinplusplus.rpc();
  RM_RPC.send_rpc
    .call(this, "link_My_Local_IP_To_My_Flo_Id", {
      JOB: "linkMyLocalIPToMyFloId",
      requesters_pub_key:
        localbitcoinplusplus.wallets.my_local_flo_public_key,
      trader_flo_address:
        localbitcoinplusplus.wallets.my_local_flo_address
    })
    .then(reqst => doSend(reqst));
}

function linkBackOthersLocalIPToTheirFloId() {
  const RM_RPC = new localbitcoinplusplus.rpc();
  RM_RPC.send_rpc
    .call(this, "link_Others_Local_IP_To_Their_Flo_Id", {
      JOB: "linkBackOthersLocalIPToTheirFloId",
      requesters_pub_key:
        localbitcoinplusplus.wallets.my_local_flo_public_key,
      trader_flo_address:
        localbitcoinplusplus.wallets.my_local_flo_address
    })
    .then(reqst => doSend(reqst));
}

// Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  // https://davidwalsh.name/javascript-debounce-function
  
  function debounce(func, wait, immediate) {
      var timeout;
      return function() {
          var context = this, args = arguments;
          var later = function() {
              timeout = null;
              if (!immediate) func.apply(context, args);
          };
          var callNow = immediate && !timeout;
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
          if (callNow) func.apply(context, args);
      };
  };

  function limit_function_calls(func, wait, immediate) {
      let call_me_later = debounce(func, wait, immediate);
      if(typeof wait_time=="number" && wait_time>0) clearTimeout(wait_time);
      wait_time = setTimeout(call_me_later, wait+5000);
  }

  function downloadObjectAsJson(exportObj, exportName){
      var dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(exportObj));
      var downloadAnchorNode = document.createElement('a');
      downloadAnchorNode.setAttribute("href",     dataStr);
      downloadAnchorNode.setAttribute("download", exportName + ".json");
      document.body.appendChild(downloadAnchorNode); // required for firefox
      downloadAnchorNode.click();
      downloadAnchorNode.remove();
  }

  function readTextFile(file, callback) {
      var rawFile = new XMLHttpRequest();
      rawFile.overrideMimeType("application/json");
      rawFile.open("GET", file, true);
      rawFile.onreadystatechange = function() {
          if (rawFile.readyState === 4 && rawFile.status == "200") {
              callback(rawFile.responseText);
          }
      }
      rawFile.send(null);
  }
</script>